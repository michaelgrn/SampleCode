import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.NoSuchElementException;



/**
 * A unit test class for lists that implement IndexedUnsortedList. 
 * This set of black box tests should work for any implementation
 * of this interface. Expanded testing for double linked lists.
 * 
 * NOTE: One example test is given for each interface method using a new list to
 * get you started.
 * 
 * @author mvail, mhthomas
 * @author Michael Green (added functionality for double linked list)
 */
public class ListTester {
	//possible lists that could be tested
	private enum ListToUse {
		//goodList, badList, arrayList, IUsingleLinkedList, 
		doubleLinkedList
	};
	
	// TODO: THIS IS WHERE YOU CHOOSE WHICH LIST TO TEST
	private final ListToUse LIST_TO_USE = ListToUse.doubleLinkedList;

	// possible results expected in tests
	private enum Result {
		NoSuchElement, IndexOutOfBounds, IllegalState, 
		ConcurrentModification, UnsupportedOperation,  
		NoException, UnexpectedException,
		True, False, Pass, Fail, 
		MatchingValue,
		ValidString
	};

	// named elements for use in tests
	private static final Integer ELEMENT_A = new Integer(1);
	private static final Integer ELEMENT_B = new Integer(2);
	private static final Integer ELEMENT_C = new Integer(3);
	private static final Integer ELEMENT_D = new Integer(4);

	// instance variables for tracking test results
	private int passes = 0;
	private int failures = 0;
	private int total = 0;

	/**
	 * @param args not used
	 */
	public static void main(String[] args) {
		// to avoid every method being static
		ListTester tester = new ListTester();
		tester.runTests();
	}

	/**
	 * Print test results in a consistent format
	 * 
	 * @param testDesc description of the test
	 * @param result indicates if the test passed or failed
	 */
	private void printTest(String testDesc, boolean result) {
		total++;
		if (result) { passes++; }
		else { failures++; }
		System.out.printf("%-46s\t%s\n", testDesc, (result ? "   PASS" : "***FAIL***"));
	}

	/** Print a final summary */
	private void printFinalSummary() {
		System.out.printf("\nTotal Tests: %d,  Passed: %d,  Failed: %d\n",
				total, passes, failures);
	}

	/** XXX runTests()
	 *  XXX <- see the blue box on the right of the scroll bar? this tag aids in navigating long files
	 * Run tests to confirm required functionality from list constructors and methods */
	private void runTests() {
		//recommended scenario naming: start_change_result
		
		test_newList(); //listTest
		test_emptyList_addToFrontA_A(); //listTest
		test_emptyList_addToRearA_A();
		test_emptyList_addA_A();
		test_emptyList_add0A_A();
		test_A_addToFrontB_BA(); 
		test_A_addToRearB_AB(); //listTest
		test_A_addAfterBA_AB(); 
		test_A_addB_AB();
		test_A_add0B_BA();
		test_A_add1B_AB();
		test_A_removeFirst_emptyList();
		test_A_removeLast_emptyList();
		test_A_removeA_emptyList();
		test_A_remove0_emptyList();
		test_A_set0B_B();
		test_AB_addToFrontC_CAB();
		test_AB_addToRearC_ABC(); //listTest
		test_AB_addAfterCA_ACB();
		test_AB_addAfterCB_ABC();
		test_AB_addC_ABC();
		test_AB_add0C_CAB();
		test_AB_add1C_ACB();
		test_AB_add2C_ABC();
		test_AB_removeFirst_B();
		test_AB_removeLast_A();
		test_AB_removeA_B();
		test_AB_removeB_A();
		test_AB_remove0_B();
		test_AB_remove1_A();
		test_AB_set0C_CB();
		test_AB_set1C_AC();
		test_ABC_removeFirst_BC();
		test_ABC_removeLast_AB();
		test_ABC_removeA_BC();
		test_ABC_removeB_AC();
		test_ABC_removeC_AB();
		test_ABC_remove0_BC();
		test_ABC_remove1_AC();
		test_ABC_remove2_AB();
		test_ABC_set0D_DBC();
		test_ABC_set1D_ADC();
		test_ABC_set2D_ADC();
		test_A_iterRemoveAfterNextA_emptyList();
		test_AB_iterRemoveAfterNextB_A();
		test_AB_iterRemoveAfterNextA_B();
		test_ABC_iterRemoveAfterNextA_BC();
		test_ABC_iterRemoveAfterNextB_AC();
		test_ABC_iterRemoveAfterNextC_AB();
		test_A_listIterRemoveAfterNextA_emptyList(); //listTest
		test_AB_listIterRemoveAfterNextB_A();
		test_AB_listIterRemoveAfterNextA_B();
 		test_ABC_listIterRemoveAfterNextA_BC();
		test_ABC_listIterRemoveAfterNextB_AC();
		test_ABC_listIterRemoveAfterNextC_AB(); //listTest
		test_A_listIterRemoveAfterPrevA_emptyList();
		test_AB_listIterRemoveAfterPrevB_A();
		test_AB_listIterRemoveAfterPrevA_B();
		test_ABC_listIterRemoveAfterPrevA_BC();
		test_ABC_listIterRemoveAfterPrevB_AC();
		test_ABC_listIterRemoveAfterPrevC_AB();
		test_emptyList_listIterAddA_A();
		test_A_listIterAddB_BA();
		test_A_listIterNextAddB_AB();
		test_A_listIterPrevAddB_BA();
		test_AB_listIterAddC_CAB();
		test_AB_listIterNextAddC_ACB();
		test_AB_listIterNextNextAddC_ABC(); //listTest
		test_AB_listIterPrevPrevAddC_CAB();
		test_AB_listIterPrevAddC_ACB();
		test_A_listIterNextSetB_B();
		test_A_listIterPrevSetB_B();
		test_AB_listIterNextSetC_CB();
		test_AB_listIterNextNextSetC_AC();
		test_AB_listIterPrevPrevSetC_CB();
		test_AB_listIterPrevSetC_AC();
		test_ABC_listIterNextSetD_DBC();
		test_ABC_listIterNextNextSetD_ADC();
		test_ABC_listIterNextNextNextSetD_ABD();
		test_ABC_listIterPrevPrevPrevSetD_DBC();
		test_ABC_listIterPrevPrevSetD_ADC();
		test_ABC_listIterPrevSetD_ABD();
		test_IterConcurrency();
////		
		// report final verdict
		printFinalSummary();
	}

	//////////////////////////////////////
	// XXX SCENARIO: NEW EMPTY LIST
	// XXX <- see the blue box on the right? this tag aids in navigating a long file
	//////////////////////////////////////
	
	/**
	 * Returns a IndexedUnsortedList for the "new empty list" scenario.
	 * Scenario: no list -> constructor -> [ ]
	 * 
	 * @return a new, empty IndexedUnsortedList
	 */
	private IndexedUnsortedList<Integer> newList() {
		IndexedUnsortedList<Integer> listToUse;
		switch (LIST_TO_USE) {
//		case goodList:
//			listToUse = new GoodList<Integer>();
//			break;
//		case badList:
//			listToUse = new BadList<Integer>();
//			break;
//		case arrayList:
//			listToUse = new IUArrayList<Integer>();
//			break;
//		case IUsingleLinkedList:
//			listToUse = new IUSingleLinkedList<Integer>();
//			break;
		case doubleLinkedList:
		listToUse = new IUDoubleLinkedList<Integer>();
		break;
		default:
			listToUse = null;
		}
		return listToUse;
	}

	/** Run all tests on scenario: no list -> constructor -> [ ] */
	private void test_newList() {
		// recommended test naming: start_change_result_testName
		// e.g. A_addToFront_BA_testSize
		// AB_addC1_ACB_testFirst
		// A_remove0_empty_testLast

		System.out.println("\nSCENARIO: no list -> constructor -> []\n");
		//try-catch prevents an Exception from the scenario builder 
		// method from bringing down the whole test suite
		try {
			printTest("newList_testAddToFrontA", testAddToFront(newList(), ELEMENT_A, Result.NoException));
			printTest("newList_testAddToRearA", testAddToRear(newList(), ELEMENT_A, Result.NoException));
			printTest("newList_testAddAfterBA", testAddAfter(newList(), ELEMENT_B, ELEMENT_A, Result.NoSuchElement));
			printTest("newList_testAddAtIndexNeg1", testAddAtIndex(newList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("newList_testAddAtIndex0", testAddAtIndex(newList(), 0, ELEMENT_A, Result.NoException));
			printTest("newList_testAddAtIndex1", testAddAtIndex(newList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("newList_testAddA", testAdd(newList(), ELEMENT_A, Result.NoException));
			printTest("newList_testRemoveFirst", testRemoveFirst(newList(), null, Result.IllegalState));
			printTest("newList_testRemoveLast", testRemoveLast(newList(), null, Result.IllegalState));
			printTest("newList_testRemoveA", testRemoveElement(newList(), null, Result.NoSuchElement));
			printTest("newList_testRemoveNeg1", testRemoveIndex(newList(), -1, null, Result.IndexOutOfBounds));
			printTest("newList_testRemove0", testRemoveIndex(newList(), 0, null, Result.IndexOutOfBounds));
			printTest("newList_testFirst", testFirst(newList(), null, Result.IllegalState));
			printTest("newList_testLast", testLast(newList(), null, Result.IllegalState));
			printTest("newList_testContainsA", testContains(newList(), ELEMENT_A, Result.False));
			printTest("newList_testIsEmpty", testIsEmpty(newList(), Result.True));
			printTest("newList_testSize", testSize(newList(), 0));
			printTest("newList_testToString", testToString(newList(), Result.ValidString));
			printTest("newList_testSetNeg1A", testSet(newList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("newList_testSet0A", testSet(newList(), 0, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("newList_testGetNeg1", testGet(newList(), -1, null, Result.IndexOutOfBounds));
			printTest("newList_testGet0", testGet(newList(), 0, null, Result.IndexOutOfBounds));
			printTest("newList_testIndexOfA", testIndexOf(newList(), ELEMENT_A, -1));
			// Iterator
			printTest("newList_testIter", testIter(newList(), Result.NoException));
			printTest("newList_testIterHasNext", testIterHasNext(newList().iterator(), Result.False));
			printTest("newList_testIterNext", testIterNext(newList().iterator(), null, Result.NoSuchElement));
			printTest("newList_testIterRemove", testIterRemove(newList().iterator(), Result.IllegalState));
			// ListIterator
			printTest("newList_testListIter", testListIter(newList(), Result.NoException));
			printTest("newList_testListIter", testListIter(newList(), 0, Result.NoException));
			printTest("newList_testListIterHasPrev", testListIterHasPrev(newList(), 0, Result.False));
			printTest("newList_testListIterPrev", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("newList_testListIterAddNeg1A", testListIterAdd(newList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("newList_testListIterAdd0A", testListIterAdd(newList(), 0, ELEMENT_A, Result.NoException));
			printTest("newList_testListIterAdd1A", testListIterAdd(newList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("newList_testListIterNextIndex0", testListIterNextIndex(newList(), 0, 0));
			printTest("newList_testListIterPreviousIndex0", testListIterPrevIndex(newList(), 0, -1));
			printTest("newList_testListIterNext0AddA", testListNextAdd(newList(), ELEMENT_A, 0, Result.NoException));
			printTest("newList_testListIterNext1AddA", testListNextAdd(newList(), ELEMENT_A, 1, Result.NoSuchElement));
			printTest("newList_testListIterPrev0Index0AddA", testListPrevAdd(newList(), ELEMENT_A, 0, 0, Result.NoException));
			printTest("newList_testListIterPrev0Index1AddA", testListPrevAdd(newList(), ELEMENT_A, 0, 1, Result.IndexOutOfBounds));
			printTest("newList_testListIterPrev1Index0AddA", testListPrevAdd(newList(), ELEMENT_A, 1, 0, Result.NoSuchElement));
			printTest("newList_testListIterNext0SetA", testListNextSet(newList(), ELEMENT_A, 0, Result.IllegalState));
			printTest("newList_testListIterPrev0SetA", testListPrevSet(newList(), ELEMENT_A, 0, 0, Result.IllegalState));
			
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_newList");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [ ] -> addToFront(A) -> [A]
	////////////////////////////////////////////////
	
	/** Scenario: empty list -> addToFront(A) -> [A] 
	 * @return [A] after addToFront(A)
	 */
	private IndexedUnsortedList<Integer> emptyList_addToFrontA_A() {
		IndexedUnsortedList<Integer> list = newList(); //starting state
		list.addToFront(ELEMENT_A); //the change
		return list; //return the resulting state
	}

	/** Run all tests on scenario: empty list -> addToFront(A) -> [A] */
	private void test_emptyList_addToFrontA_A() {
		System.out.println("\nSCENARIO: [] -> addToFront(A) -> [A]\n");
		try {
			printTest("emptyList_addToFrontA_A_testAddToFrontB", testAddToFront(emptyList_addToFrontA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_addToFrontA_A_testAddToRearB", testAddToRear(emptyList_addToFrontA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_addToFrontA_A_testAddAfterAB", testAddAfter(emptyList_addToFrontA_A(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToFrontA_A_testAddAfterCB", testAddAfter(emptyList_addToFrontA_A(), ELEMENT_C, ELEMENT_B, Result.NoSuchElement));
			printTest("emptyList_addToFrontA_A_testAddAtIndexNeg1B", testAddAtIndex(emptyList_addToFrontA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addToFrontA_A_testAddAtIndex0B", testAddAtIndex(emptyList_addToFrontA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToFrontA_A_testAddAtIndex1B", testAddAtIndex(emptyList_addToFrontA_A(), 1, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToFrontA_A_testAddB", testAdd(emptyList_addToFrontA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_addToFrontA_A_testRemoveFirst", testRemoveFirst(emptyList_addToFrontA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToFrontA_A_testRemoveLast", testRemoveLast(emptyList_addToFrontA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToFrontA_A_testRemoveA", testRemoveElement(emptyList_addToFrontA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToFrontA_A_testRemoveB", testRemoveElement(emptyList_addToFrontA_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("emptyList_addToFrontA_A_testRemoveNeg1", testRemoveIndex(emptyList_addToFrontA_A(), -1, null, Result.IndexOutOfBounds));
			printTest("emptyList_addToFrontA_A_testRemove0", testRemoveIndex(emptyList_addToFrontA_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToFrontA_A_testRemove1", testRemoveIndex(emptyList_addToFrontA_A(), 1, null, Result.IndexOutOfBounds));
			printTest("emptyList_addToFrontA_A_testFirst", testFirst(emptyList_addToFrontA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToFrontA_A_testLast", testLast(emptyList_addToFrontA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToFrontA_A_testContainsA", testContains(emptyList_addToFrontA_A(), ELEMENT_A, Result.True));
			printTest("emptyList_addToFrontA_A_testContainsB", testContains(emptyList_addToFrontA_A(), ELEMENT_B, Result.False));
			printTest("emptyList_addToFrontA_A_testIsEmpty", testIsEmpty(emptyList_addToFrontA_A(), Result.False));
			printTest("emptyList_addToFrontA_A_testSize", testSize(emptyList_addToFrontA_A(), 1));
			printTest("emptyList_addToFrontA_A_testToString", testToString(emptyList_addToFrontA_A(), Result.ValidString));			
			printTest("emptyList_addToFrontA_A_testSetNeg1B", testSet(emptyList_addToFrontA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addToFrontA_A_testSet0B", testSet(emptyList_addToFrontA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToFrontA_A_testGetNeg1", testGet(emptyList_addToFrontA_A(), -1, null, Result.IndexOutOfBounds));
			printTest("emptyList_addToFrontA_A_testGet0", testGet(emptyList_addToFrontA_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToFrontA_A_testIndexOfA", testIndexOf(emptyList_addToFrontA_A(), ELEMENT_A, 0));
			printTest("emptyList_addToFrontA_A_testIndexOfB", testIndexOf(emptyList_addToFrontA_A(), ELEMENT_B, -1));
			// Iterator
			printTest("emptyList_addToFrontA_A_testIter", testIter(emptyList_addToFrontA_A(), Result.NoException));
			printTest("emptyList_addToFrontA_A_testIterHasNext", testIterHasNext(emptyList_addToFrontA_A().iterator(), Result.True));
			printTest("emptyList_addToFrontA_A_testIterNext", testIterNext(emptyList_addToFrontA_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToFrontA_A_testIterRemove", testIterRemove(emptyList_addToFrontA_A().iterator(), Result.IllegalState));
			printTest("emptyList_addToFrontA_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(emptyList_addToFrontA_A(), 1), Result.False));
			printTest("emptyList_addToFrontA_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(emptyList_addToFrontA_A(), 1), null, Result.NoSuchElement));
			printTest("emptyList_addToFrontA_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(emptyList_addToFrontA_A(), 1), Result.NoException));
			printTest("emptyList_addToFrontA_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(emptyList_addToFrontA_A(), 1)), Result.False));
			printTest("emptyList_addToFrontA_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(emptyList_addToFrontA_A(), 1)), null, Result.NoSuchElement));
			printTest("emptyList_addToFrontA_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(emptyList_addToFrontA_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("emptyList_addToFrontA_A_testListIter", testListIter(emptyList_addToFrontA_A(), Result.NoException));
			printTest("emptyList_addToFrontA_A_testListIter", testListIter(emptyList_addToFrontA_A(), 0, Result.NoException));
			printTest("emptyList_addToFrontA_A_testListIterHasPrev", testListIterHasPrev(emptyList_addToFrontA_A(), 0, Result.False));
			printTest("emptyList_addToFrontA_A_testListIterHasPrev", testListIterHasPrev(emptyList_addToFrontA_A(), 1, Result.True));
			printTest("emptyList_addToFrontA_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("emptyList_addToFrontA_A_testListIter1Prev1", testListIterPrev(emptyList_addToFrontA_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToFrontA_A_testListIterAddNeg1B", testListIterAdd(emptyList_addToFrontA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addToFrontA_A_testListIterAdd0B", testListIterAdd(emptyList_addToFrontA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToFrontA_A_testListIterAdd1B", testListIterAdd(emptyList_addToFrontA_A(), 1, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToFrontA_A_testListIterAdd2B", testListIterAdd(emptyList_addToFrontA_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addToFrontA_A_testListIterNextIndex0", testListIterNextIndex(emptyList_addToFrontA_A(), 0, 0));
			printTest("emptyList_addToFrontA_A_testListIterNextIndex1", testListIterNextIndex(emptyList_addToFrontA_A(), 1, 1));
			printTest("emptyList_addToFrontA_A_testListIterPreviousIndex0", testListIterPrevIndex(emptyList_addToFrontA_A(), 0, -1));
			printTest("emptyList_addToFrontA_A_testListIterPreviousIndex1", testListIterPrevIndex(emptyList_addToFrontA_A(), 1, 0));
			printTest("emptyList_addToFrontA_A_testListIterNext0AddB", testListNextAdd(emptyList_addToFrontA_A(), ELEMENT_B, 0, Result.NoException));
			printTest("emptyList_addToFrontA_A_testListIterNext1AddB", testListNextAdd(emptyList_addToFrontA_A(), ELEMENT_B, 1, Result.NoException));
			printTest("emptyList_addToFrontA_A_testListIterNext2AddB", testListNextAdd(emptyList_addToFrontA_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("emptyList_addToFrontA_A_testListIterPrev1Index0AddB", testListPrevAdd(emptyList_addToFrontA_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("emptyList_addToFrontA_A_testListIterPrev0Index0AddB", testListPrevAdd(emptyList_addToFrontA_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("emptyList_addToFrontA_A_testListIterPrev0Index1AddB", testListPrevAdd(emptyList_addToFrontA_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("emptyList_addToFrontA_A_testListIterPrev1Index1AddB", testListPrevAdd(emptyList_addToFrontA_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("emptyList_addToFrontA_A_testListIterPrev0Index2AddB", testListPrevAdd(emptyList_addToFrontA_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("emptyList_addToFrontA_A_testListIterNext0SetB", testListNextSet(emptyList_addToFrontA_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("emptyList_addToFrontA_A_testListIterNext1SetB", testListNextSet(emptyList_addToFrontA_A(), ELEMENT_B, 1, Result.NoException));
			printTest("emptyList_addToFrontA_A_testListIterNext2SetB", testListNextSet(emptyList_addToFrontA_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("emptyList_addToFrontA_A_testListIterPrev0SetB", testListPrevSet(emptyList_addToFrontA_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("emptyList_addToFrontA_A_testListIterPrev1SetB", testListPrevSet(emptyList_addToFrontA_A(), ELEMENT_B, 1, 1, Result.NoException));
			
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_emptyList_addToFrontA_A");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [ ] -> addToRear(A) -> [A]
	////////////////////////////////////////////////
	
	/** Scenario: empty list -> addToRear(A) -> [A] 
	 * @return [A] after addToRear(A)
	 */
	private IndexedUnsortedList<Integer> emptyList_addToRearA_A() {
		IndexedUnsortedList<Integer> list = newList(); //starting state
		list.addToRear(ELEMENT_A); //the change
		return list; //return the resulting state
	}

	/** Run all tests on scenario: empty list -> addToFront(A) -> [A] */
	private void test_emptyList_addToRearA_A() {
		System.out.println("\nSCENARIO: [] -> addToRear(A) -> [A]\n");
		try {
			printTest("emptyList_addToRearA_A_testAddToFrontB", testAddToFront(emptyList_addToRearA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testAddToRearB", testAddToRear(emptyList_addToRearA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testAddAfterAB", testAddAfter(emptyList_addToRearA_A(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testAddAfterCB", testAddAfter(emptyList_addToRearA_A(), ELEMENT_C, ELEMENT_B, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_testAddAtIndexNeg1B", testAddAtIndex(emptyList_addToRearA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testAddAtIndex0B", testAddAtIndex(emptyList_addToRearA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testAddAtIndex1B", testAddAtIndex(emptyList_addToRearA_A(), 1, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testAddB", testAdd(emptyList_addToRearA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testRemoveFirst", testRemoveFirst(emptyList_addToRearA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToRearA_A_testRemoveLast", testRemoveLast(emptyList_addToRearA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToRearA_A_testRemoveA", testRemoveElement(emptyList_addToRearA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToRearA_A_testRemoveB", testRemoveElement(emptyList_addToRearA_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_testRemoveNeg1", testRemoveIndex(emptyList_addToRearA_A(), -1, null, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testRemove0", testRemoveIndex(emptyList_addToRearA_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToRearA_A_testRemove1", testRemoveIndex(emptyList_addToRearA_A(), 1, null, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testFirst", testFirst(emptyList_addToRearA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToRearA_A_testLast", testLast(emptyList_addToRearA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToRearA_A_testContainsA", testContains(emptyList_addToRearA_A(), ELEMENT_A, Result.True));
			printTest("emptyList_addToRearA_A_testContainsB", testContains(emptyList_addToRearA_A(), ELEMENT_B, Result.False));
			printTest("emptyList_addToRearA_A_testIsEmpty", testIsEmpty(emptyList_addToRearA_A(), Result.False));
			printTest("emptyList_addToRearA_A_testSize", testSize(emptyList_addToRearA_A(), 1));
			printTest("emptyList_addToRearA_A_testToString", testToString(emptyList_addToRearA_A(), Result.ValidString));			
			printTest("emptyList_addToRearA_A_testSetNeg1B", testSet(emptyList_addToRearA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testSet0B", testSet(emptyList_addToRearA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testGetNeg1", testGet(emptyList_addToRearA_A(), -1, null, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testGet0", testGet(emptyList_addToRearA_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToRearA_A_testIndexOfA", testIndexOf(emptyList_addToRearA_A(), ELEMENT_A, 0));
			printTest("emptyList_addToRearA_A_testIndexOfB", testIndexOf(emptyList_addToRearA_A(), ELEMENT_B, -1));
			// Iterator
			printTest("emptyList_addToRearA_A_testIter", testIter(emptyList_addToRearA_A(), Result.NoException));
			printTest("emptyList_addToRearA_A_testIterHasNext", testIterHasNext(emptyList_addToRearA_A().iterator(), Result.True));
			printTest("emptyList_addToRearA_A_testIterNext", testIterNext(emptyList_addToRearA_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToRearA_A_testIterRemove", testIterRemove(emptyList_addToRearA_A().iterator(), Result.IllegalState));
			printTest("emptyList_addToRearA_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(emptyList_addToRearA_A(), 1), Result.False));
			printTest("emptyList_addToRearA_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(emptyList_addToRearA_A(), 1), null, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(emptyList_addToRearA_A(), 1), Result.NoException));
			printTest("emptyList_addToRearA_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(emptyList_addToRearA_A(), 1)), Result.False));
			printTest("emptyList_addToRearA_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(emptyList_addToRearA_A(), 1)), null, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(emptyList_addToRearA_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("emptyList_addToRearA_A_testListIter", testListIter(emptyList_addToRearA_A(), Result.NoException));
			printTest("emptyList_addToRearA_A_testListIter", testListIter(emptyList_addToRearA_A(), 0, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterHasPrev", testListIterHasPrev(emptyList_addToRearA_A(), 0, Result.False));
			printTest("emptyList_addToRearA_A_testListIterHasPrev", testListIterHasPrev(emptyList_addToRearA_A(), 1, Result.True));
			printTest("emptyList_addToRearA_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_testListIter1Prev1", testListIterPrev(emptyList_addToRearA_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToRearA_A_testListIterAddNeg1B", testListIterAdd(emptyList_addToRearA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testListIterAdd0B", testListIterAdd(emptyList_addToRearA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterAdd1B", testListIterAdd(emptyList_addToRearA_A(), 1, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterAdd2B", testListIterAdd(emptyList_addToRearA_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testListIterNextIndex0", testListIterNextIndex(emptyList_addToRearA_A(), 0, 0));
			printTest("emptyList_addToRearA_A_testListIterNextIndex1", testListIterNextIndex(emptyList_addToRearA_A(), 1, 1));
			printTest("emptyList_addToRearA_A_testListIterPreviousIndex0", testListIterPrevIndex(emptyList_addToRearA_A(), 0, -1));
			printTest("emptyList_addToRearA_A_testListIterPreviousIndex1", testListIterPrevIndex(emptyList_addToRearA_A(), 1, 0));
			printTest("emptyList_addToRearA_A_testListIterNext0AddB", testListNextAdd(emptyList_addToRearA_A(), ELEMENT_B, 0, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterNext1AddB", testListNextAdd(emptyList_addToRearA_A(), ELEMENT_B, 1, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterNext2AddB", testListNextAdd(emptyList_addToRearA_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_testListIterPrev1Index0AddB", testListPrevAdd(emptyList_addToRearA_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_testListIterPrev0Index0AddB", testListPrevAdd(emptyList_addToRearA_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterPrev0Index1AddB", testListPrevAdd(emptyList_addToRearA_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterPrev1Index1AddB", testListPrevAdd(emptyList_addToRearA_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterPrev0Index2AddB", testListPrevAdd(emptyList_addToRearA_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testListIterNext0SetB", testListNextSet(emptyList_addToRearA_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("emptyList_addToRearA_A_testListIterNext1SetB", testListNextSet(emptyList_addToRearA_A(), ELEMENT_B, 1, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterNext2SetB", testListNextSet(emptyList_addToRearA_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_testListIterPrev0SetB", testListPrevSet(emptyList_addToRearA_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("emptyList_addToRearA_A_testListIterPrev1SetB", testListPrevSet(emptyList_addToRearA_A(), ELEMENT_B, 1, 1, Result.NoException));

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_emptyList_addToRearA_A");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [ ] -> add(A) -> [A]
	////////////////////////////////////////////////
	
	/** Scenario: empty list -> add(A) -> [A] 
	 * @return [A] after add(A)
	 */
	private IndexedUnsortedList<Integer> emptyList_addA_A() {

		IndexedUnsortedList<Integer> list = newList(); //starting state
		list.add(ELEMENT_A); //the change
		return list; //return the resulting state
	}

	/** Run all tests on scenario: empty list -> add(A) -> [A] */
	private void test_emptyList_addA_A() {
		System.out.println("\nSCENARIO: [] -> add(A) -> [A]\n");
		try {
			printTest("emptyList_addA_A_testAddToFrontB", testAddToFront(emptyList_addA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_addA_A_testAddToRearB", testAddToRear(emptyList_addA_A(), ELEMENT_A, Result.NoException));
			printTest("emptyList_addA_A_testAddAfterAB", testAddAfter(emptyList_addA_A(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("emptyList_addA_A_testAddAfterCB", testAddAfter(emptyList_addA_A(), ELEMENT_C, ELEMENT_B, Result.NoSuchElement));
			printTest("emptyList_addA_A_testAddAtIndexNeg1B", testAddAtIndex(emptyList_addA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addA_A_testAddAtIndex0B", testAddAtIndex(emptyList_addA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_addA_A_testAddAtIndex1B", testAddAtIndex(emptyList_addA_A(), 1, ELEMENT_B, Result.NoException));
			printTest("emptyList_addA_A_testAddB", testAdd(emptyList_addA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_addA_A_testRemoveFirst", testRemoveFirst(emptyList_addA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addA_A_testRemoveLast", testRemoveLast(emptyList_addA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addA_A_testRemoveA", testRemoveElement(emptyList_addA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addA_A_testRemoveB", testRemoveElement(emptyList_addA_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("emptyList_addA_A_testRemoveNeg1", testRemoveIndex(emptyList_addA_A(), -1, null, Result.IndexOutOfBounds));
			printTest("emptyList_addA_A_testRemove0", testRemoveIndex(emptyList_addA_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addA_A_testRemove1", testRemoveIndex(emptyList_addA_A(), 1, null, Result.IndexOutOfBounds));
			printTest("emptyList_addA_A_testFirst", testFirst(emptyList_addA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addA_A_testLast", testLast(emptyList_addA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addA_A_testContainsA", testContains(emptyList_addA_A(), ELEMENT_A, Result.True));
			printTest("emptyList_addA_A_testContainsB", testContains(emptyList_addA_A(), ELEMENT_B, Result.False));
			printTest("emptyList_addA_A_testIsEmpty", testIsEmpty(emptyList_addA_A(), Result.False));
			printTest("emptyList_addA_A_testSize", testSize(emptyList_addA_A(), 1));
			printTest("emptyList_addA_A_testToString", testToString(emptyList_addA_A(), Result.ValidString));			
			printTest("emptyList_addA_A_testSetNeg1B", testSet(emptyList_addA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addA_A_testSet0B", testSet(emptyList_addA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_addA_A_testGetNeg1", testGet(emptyList_addA_A(), -1, null, Result.IndexOutOfBounds));
			printTest("emptyList_addA_A_testGet0", testGet(emptyList_addA_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addA_A_testIndexOfA", testIndexOf(emptyList_addA_A(), ELEMENT_A, 0));
			printTest("emptyList_addA_A_testIndexOfB", testIndexOf(emptyList_addA_A(), ELEMENT_B, -1));
			// Iterator
			printTest("emptyList_addA_A_testIter", testIter(emptyList_addA_A(), Result.NoException));
			printTest("emptyList_addA_A_testIterHasNext", testIterHasNext(emptyList_addA_A().iterator(), Result.True));
			printTest("emptyList_addA_A_testIterNext", testIterNext(emptyList_addA_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addA_A_testIterRemove", testIterRemove(emptyList_addA_A().iterator(), Result.IllegalState));
			printTest("emptyList_addA_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(emptyList_addA_A(), 1), Result.False));
			printTest("emptyList_addA_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(emptyList_addA_A(), 1), null, Result.NoSuchElement));
			printTest("emptyList_addA_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(emptyList_addA_A(), 1), Result.NoException));
			printTest("emptyList_addA_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(emptyList_addA_A(), 1)), Result.False));
			printTest("emptyList_addA_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(emptyList_addA_A(), 1)), null, Result.NoSuchElement));
			printTest("emptyList_addA_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(emptyList_addA_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("emptyList_addA_A_testListIter", testListIter(emptyList_addA_A(), Result.NoException));
			printTest("emptyList_addA_A_testListIter", testListIter(emptyList_addA_A(), 0, Result.NoException));
			printTest("emptyList_addA_A_testListIterHasPrev", testListIterHasPrev(emptyList_addA_A(), 0, Result.False));
			printTest("emptyList_addA_A_testListIterHasPrev", testListIterHasPrev(emptyList_addA_A(), 1, Result.True));
			printTest("emptyList_addA_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("emptyList_addA_A_testListIter1Prev1", testListIterPrev(emptyList_addA_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addA_A_testListIterAddNeg1B", testListIterAdd(emptyList_addA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addA_A_testListIterAdd0B", testListIterAdd(emptyList_addA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_addA_A_testListIterAdd1B", testListIterAdd(emptyList_addA_A(), 1, ELEMENT_B, Result.NoException));
			printTest("emptyList_addA_A_testListIterAdd2B", testListIterAdd(emptyList_addA_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addA_A_testListIterNextIndex0", testListIterNextIndex(emptyList_addA_A(), 0, 0));
			printTest("emptyList_addA_A_testListIterNextIndex1", testListIterNextIndex(emptyList_addA_A(), 1, 1));
			printTest("emptyList_addA_A_testListIterPreviousIndex0", testListIterPrevIndex(emptyList_addA_A(), 0, -1));
			printTest("emptyList_addA_A_testListIterPreviousIndex1", testListIterPrevIndex(emptyList_addA_A(), 1, 0));
			printTest("emptyList_addA_A_testListIterNext0AddB", testListNextAdd(emptyList_addA_A(), ELEMENT_B, 0, Result.NoException));
			printTest("emptyList_addA_A_testListIterNext1AddB", testListNextAdd(emptyList_addA_A(), ELEMENT_B, 1, Result.NoException));
			printTest("emptyList_addA_A_testListIterNext2AddB", testListNextAdd(emptyList_addA_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("emptyList_addA_A_testListIterPrev1Index0AddB", testListPrevAdd(emptyList_addA_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("emptyList_addA_A_testListIterPrev0Index0AddB", testListPrevAdd(emptyList_addA_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("emptyList_addA_A_testListIterPrev0Index1AddB", testListPrevAdd(emptyList_addA_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("emptyList_addA_A_testListIterPrev1Index1AddB", testListPrevAdd(emptyList_addA_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("emptyList_addA_A_testListIterPrev0Index2AddB", testListPrevAdd(emptyList_addA_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("emptyList_addA_A_testListIterNext0SetB", testListNextSet(emptyList_addA_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("emptyList_addA_A_testListIterNext1SetB", testListNextSet(emptyList_addA_A(), ELEMENT_B, 1, Result.NoException));
			printTest("emptyList_addA_A_testListIterNext2SetB", testListNextSet(emptyList_addA_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("emptyList_addA_A_testListIterPrev0SetB", testListPrevSet(emptyList_addA_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("emptyList_addA_A_testListIterPrev1SetB", testListPrevSet(emptyList_addA_A(), ELEMENT_B, 1, 1, Result.NoException));

			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_emptyList_addA_A");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [ ] -> add(0,A) -> [A]
	////////////////////////////////////////////////
	
	/** Scenario: empty list -> add(0,A) -> [A] 
	 * @return [A] after add(0,A)
	 */
	private IndexedUnsortedList<Integer> emptyList_add0A_A() {
		IndexedUnsortedList<Integer> list = newList(); //starting state
		list.add(0,ELEMENT_A); //the change
		return list; //return the resulting state
	}

	/** Run all tests on scenario: empty list -> add(0,A) -> [A] */
	private void test_emptyList_add0A_A() {
		System.out.println("\nSCENARIO: [] -> add(0,A) -> [A]\n");
		try {
			printTest("emptyList_add0A_A_testAddToFrontB", testAddToFront(emptyList_add0A_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_add0A_A_testAddToRearB", testAddToRear(emptyList_add0A_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_add0A_A_testAddAfterAB", testAddAfter(emptyList_add0A_A(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("emptyList_add0A_A_testAddAfterCB", testAddAfter(emptyList_add0A_A(), ELEMENT_C, ELEMENT_B, Result.NoSuchElement));
			printTest("emptyList_add0A_A_testAddAtIndexNeg1B", testAddAtIndex(emptyList_add0A_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_add0A_A_testAddAtIndex0B", testAddAtIndex(emptyList_add0A_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_add0A_A_testAddAtIndex1B", testAddAtIndex(emptyList_add0A_A(), 1, ELEMENT_B, Result.NoException));
			printTest("emptyList_add0A_A_testAddB", testAdd(emptyList_add0A_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_add0A_A_testRemoveFirst", testRemoveFirst(emptyList_add0A_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_add0A_A_testRemoveLast", testRemoveLast(emptyList_add0A_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_add0A_A_testRemoveA", testRemoveElement(emptyList_add0A_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_add0A_A_testRemoveB", testRemoveElement(emptyList_add0A_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("emptyList_add0A_A_testRemoveNeg1", testRemoveIndex(emptyList_add0A_A(), -1, null, Result.IndexOutOfBounds));
			printTest("emptyList_add0A_A_testRemove0", testRemoveIndex(emptyList_add0A_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_add0A_A_testRemove1", testRemoveIndex(emptyList_add0A_A(), 1, null, Result.IndexOutOfBounds));
			printTest("emptyList_add0A_A_testFirst", testFirst(emptyList_add0A_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_add0A_A_testLast", testLast(emptyList_add0A_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_add0A_A_testContainsA", testContains(emptyList_add0A_A(), ELEMENT_A, Result.True));
			printTest("emptyList_add0A_A_testContainsB", testContains(emptyList_add0A_A(), ELEMENT_B, Result.False));
			printTest("emptyList_add0A_A_testIsEmpty", testIsEmpty(emptyList_add0A_A(), Result.False));
			printTest("emptyList_add0A_A_testSize", testSize(emptyList_add0A_A(), 1));
			printTest("emptyList_add0A_A_testToString", testToString(emptyList_add0A_A(), Result.ValidString));			
			printTest("emptyList_add0A_A_testSetNeg1B", testSet(emptyList_add0A_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_add0A_A_testSet0B", testSet(emptyList_add0A_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_add0A_A_testGetNeg1", testGet(emptyList_add0A_A(), -1, null, Result.IndexOutOfBounds));
			printTest("emptyList_add0A_A_testGet0", testGet(emptyList_add0A_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_add0A_A_testIndexOfA", testIndexOf(emptyList_add0A_A(), ELEMENT_A, 0));
			printTest("emptyList_add0A_A_testIndexOfB", testIndexOf(emptyList_add0A_A(), ELEMENT_B, -1));
			// Iterator
			printTest("emptyList_add0A_A_testIter", testIter(emptyList_add0A_A(), Result.NoException));
			printTest("emptyList_add0A_A_testIterHasNext", testIterHasNext(emptyList_add0A_A().iterator(), Result.True));
			printTest("emptyList_add0A_A_testIterNext", testIterNext(emptyList_add0A_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_add0A_A_testIterRemove", testIterRemove(emptyList_add0A_A().iterator(), Result.IllegalState));
			printTest("emptyList_add0A_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(emptyList_add0A_A(), 1), Result.False));
			printTest("emptyList_add0A_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(emptyList_add0A_A(), 1), null, Result.NoSuchElement));
			printTest("emptyList_add0A_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(emptyList_add0A_A(), 1), Result.NoException));
			printTest("emptyList_add0A_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(emptyList_add0A_A(), 1)), Result.False));
			printTest("emptyList_add0A_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(emptyList_add0A_A(), 1)), null, Result.NoSuchElement));
			printTest("emptyList_add0A_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(emptyList_add0A_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("emptyList_add0A_A_testListIter", testListIter(emptyList_add0A_A(), Result.NoException));
			printTest("emptyList_add0A_A_testListIter", testListIter(emptyList_add0A_A(), 0, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterHasPrev", testListIterHasPrev(emptyList_addToRearA_A(), 0, Result.False));
			printTest("emptyList_addToRearA_A_testListIterHasPrev", testListIterHasPrev(emptyList_addToRearA_A(), 1, Result.True));
			printTest("emptyList_addToRearA_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_testListIter1Prev1", testListIterPrev(emptyList_addToRearA_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_addToRearA_A_testListIterAddNeg1B", testListIterAdd(emptyList_addToRearA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testListIterAdd0B", testListIterAdd(emptyList_addToRearA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterAdd1B", testListIterAdd(emptyList_addToRearA_A(), 1, ELEMENT_B, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterAdd2B", testListIterAdd(emptyList_addToRearA_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testListIterNextIndex0", testListIterNextIndex(emptyList_addToRearA_A(), 0, 0));
			printTest("emptyList_addToRearA_A_testListIterNextIndex1", testListIterNextIndex(emptyList_addToRearA_A(), 1, 1));
			printTest("emptyList_addToRearA_A_testListIterPreviousIndex0", testListIterPrevIndex(emptyList_addToRearA_A(), 0, -1));
			printTest("emptyList_addToRearA_A_testListIterPreviousIndex1", testListIterPrevIndex(emptyList_addToRearA_A(), 1, 0));
			printTest("emptyList_addToRearA_A_testListIterNext0AddB", testListNextAdd(emptyList_addToRearA_A(), ELEMENT_B, 0, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterNext1AddB", testListNextAdd(emptyList_addToRearA_A(), ELEMENT_B, 1, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterNext2AddB", testListNextAdd(emptyList_addToRearA_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_testListIterPrev1Index0AddB", testListPrevAdd(emptyList_addToRearA_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_testListIterPrev0Index0AddB", testListPrevAdd(emptyList_addToRearA_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterPrev0Index1AddB", testListPrevAdd(emptyList_addToRearA_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterPrev1Index1AddB", testListPrevAdd(emptyList_addToRearA_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterPrev0Index2AddB", testListPrevAdd(emptyList_addToRearA_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("emptyList_addToRearA_A_testListIterNext0SetB", testListNextSet(emptyList_addToRearA_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("emptyList_addToRearA_A_testListIterNext1SetB", testListNextSet(emptyList_addToRearA_A(), ELEMENT_B, 1, Result.NoException));
			printTest("emptyList_addToRearA_A_testListIterNext2SetB", testListNextSet(emptyList_addToRearA_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("emptyList_addToRearA_A_testListIterPrev0SetB", testListPrevSet(emptyList_addToRearA_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("emptyList_addToRearA_A_testListIterPrev1SetB", testListPrevSet(emptyList_addToRearA_A(), ELEMENT_B, 1, 1, Result.NoException));

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_emptyList_add0A_A");
			e.printStackTrace();
		}
	}

	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> addToFront(B) -> [B,A]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> addToFront(B) -> [B,A] 
	 * @return [B,A] after addToFront(B)
	 */
	private IndexedUnsortedList<Integer> A_addToFrontB_BA() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.addToFront(ELEMENT_B); //the change
		return list; //return resulting state
	}

	/** Run all tests on scenario: A -> addToFront(B) -> [B,A] */
	private void test_A_addToFrontB_BA() {
		System.out.println("\nSCENARIO: [A] -> addToFront(B) -> [B,A]\n");
		try {
			// IndexedUnsortedList
			printTest("A_addToFrontB_BA_testAddToFrontC", testAddToFront(A_addToFrontB_BA(), ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testAddToRearC", testAddToRear(A_addToFrontB_BA(), ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testAddAfterAC", testAddAfter(A_addToFrontB_BA(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testAddAfterBC", testAddAfter(A_addToFrontB_BA(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testAddAfterDC", testAddAfter(A_addToFrontB_BA(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("A_addToFrontB_BA_testAddAtIndexNeg1C", testAddAtIndex(A_addToFrontB_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testAddAtIndex0C", testAddAtIndex(A_addToFrontB_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testAddAtIndex1C", testAddAtIndex(A_addToFrontB_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testAddAtIndex2C", testAddAtIndex(A_addToFrontB_BA(), 2, ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testAddAtIndex3C", testAddAtIndex(A_addToFrontB_BA(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testAddC", testAdd(A_addToFrontB_BA(), ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testRemoveFirst", testRemoveFirst(A_addToFrontB_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testRemoveLast", testRemoveLast(A_addToFrontB_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testRemoveA", testRemoveElement(A_addToFrontB_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testRemoveB", testRemoveElement(A_addToFrontB_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testRemoveC", testRemoveElement(A_addToFrontB_BA(), ELEMENT_C, Result.NoSuchElement));
			printTest("A_addToFrontB_BA_testRemoveNeg1", testRemoveIndex(A_addToFrontB_BA(), -1, null, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testRemove0", testRemoveIndex(A_addToFrontB_BA(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testRemove1", testRemoveIndex(A_addToFrontB_BA(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testRemove2", testRemoveIndex(A_addToFrontB_BA(), 2, null, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testFirst", testFirst(A_addToFrontB_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testLast", testLast(A_addToFrontB_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testContainsA", testContains(A_addToFrontB_BA(), ELEMENT_A, Result.True));
			printTest("A_addToFrontB_BA_testContainsB", testContains(A_addToFrontB_BA(), ELEMENT_B, Result.True));
			printTest("A_addToFrontB_BA_testContainsC", testContains(A_addToFrontB_BA(), ELEMENT_C, Result.False));
			printTest("A_addToFrontB_BA_testIsEmpty", testIsEmpty(A_addToFrontB_BA(), Result.False));
			printTest("A_addToFrontB_BA_testSize", testSize(A_addToFrontB_BA(), 2));
			printTest("A_addToFrontB_BA_testToString", testToString(A_addToFrontB_BA(), Result.ValidString));
			printTest("A_addToFrontB_BA_testSetNeg1C", testSet(A_addToFrontB_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testSet0C", testSet(A_addToFrontB_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testSet1C", testSet(A_addToFrontB_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testSet2C", testSet(A_addToFrontB_BA(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testGetNeg1", testGet(A_addToFrontB_BA(), -1, null, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testGet0", testGet(A_addToFrontB_BA(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testGet1", testGet(A_addToFrontB_BA(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testGet2", testGet(A_addToFrontB_BA(), 2, null, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testIndexOfA", testIndexOf(A_addToFrontB_BA(), ELEMENT_A, 1));
			printTest("A_addToFrontB_BA_testIndexOfB", testIndexOf(A_addToFrontB_BA(), ELEMENT_B, 0));
			printTest("A_addToFrontB_BA_testIndexOfC", testIndexOf(A_addToFrontB_BA(), ELEMENT_C, -1));
			// Iterator
			printTest("A_addToFrontB_BA_testIter", testIter(A_addToFrontB_BA(), Result.NoException));
			printTest("A_addToFrontB_BA_testIterHasNext", testIterHasNext(A_addToFrontB_BA().iterator(), Result.True));
			printTest("A_addToFrontB_BA_testIterNext", testIterNext(A_addToFrontB_BA().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testIterRemove", testIterRemove(A_addToFrontB_BA().iterator(), Result.IllegalState));
			printTest("A_addToFrontB_BA_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(A_addToFrontB_BA(), 1), Result.True));
			printTest("A_addToFrontB_BA_iterNext_testIterNext", testIterNext(iterAfterNext(A_addToFrontB_BA(), 1), ELEMENT_A, Result.MatchingValue));
			printTest("A_addToFrontB_BA_iterNext_testIterRemove", testIterRemove(iterAfterNext(A_addToFrontB_BA(), 1), Result.NoException));
			printTest("A_addToFrontB_BA_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_addToFrontB_BA(), 1)), Result.True));
			printTest("A_addToFrontB_BA_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_addToFrontB_BA(), 1)), ELEMENT_A, Result.MatchingValue));
			printTest("A_addToFrontB_BA_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_addToFrontB_BA(), 1)), Result.IllegalState));
			printTest("A_addToFrontB_BA_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(A_addToFrontB_BA(), 2), Result.False));
			printTest("A_addToFrontB_BA_iterNextNext_testIterNext", testIterNext(iterAfterNext(A_addToFrontB_BA(), 2), null, Result.NoSuchElement));
			printTest("A_addToFrontB_BA_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(A_addToFrontB_BA(), 2), Result.NoException));
			printTest("A_addToFrontB_BA_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_addToFrontB_BA(), 2)), Result.False));
			printTest("A_addToFrontB_BA_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_addToFrontB_BA(), 2)), null, Result.NoSuchElement));
			printTest("A_addToFrontB_BA_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_addToFrontB_BA(), 2)), Result.IllegalState));
			// ListIterator
			printTest("A_addToFrontB_BA_testListIter", testListIter(A_addToFrontB_BA(), Result.NoException));
			printTest("A_addToFrontB_BA_testListIter", testListIter(A_addToFrontB_BA(), 0, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterHas0Prev", testListIterHasPrev(A_addToFrontB_BA(), 0, Result.False));
			printTest("A_addToFrontB_BA_testListIterHas1Prev", testListIterHasPrev(A_addToFrontB_BA(), 1, Result.True));
			printTest("A_addToFrontB_BA_testListIterHas2Prev", testListIterHasPrev(A_addToFrontB_BA(), 2, Result.True));
			printTest("A_addToFrontB_BA_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_addToFrontB_BA_testListIter1Prev1", testListIterPrev(A_addToFrontB_BA(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testListIter2Prev2", testListIterPrev(A_addToFrontB_BA(), 2, 2, ELEMENT_B, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testListIter2Prev1", testListIterPrev(A_addToFrontB_BA(), 2, 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_addToFrontB_BA_testListIterAddNeg1C", testListIterAdd(A_addToFrontB_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testListIterAdd0C", testListIterAdd(A_addToFrontB_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterAdd1C", testListIterAdd(A_addToFrontB_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterAdd2C", testListIterAdd(A_addToFrontB_BA(), 2, ELEMENT_C, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterAdd3C", testListIterAdd(A_addToFrontB_BA(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testListIterNextIndex0", testListIterNextIndex(A_addToFrontB_BA(), 0, 0));
			printTest("A_addToFrontB_BA_testListIterNextIndex1", testListIterNextIndex(A_addToFrontB_BA(), 1, 1));
			printTest("A_addToFrontB_BA_testListIterNextIndex2", testListIterNextIndex(A_addToFrontB_BA(), 2, 2));
			printTest("A_addToFrontB_BA_testListIterPreviousIndex0", testListIterPrevIndex(A_addToFrontB_BA(), 0, -1));
			printTest("A_addToFrontB_BA_testListIterPreviousIndex1", testListIterPrevIndex(A_addToFrontB_BA(), 1, 0));
			printTest("A_addToFrontB_BA_testListIterPreviousIndex2", testListIterPrevIndex(A_addToFrontB_BA(), 2, 1));
			printTest("A_addToFrontB_BA_testListIterNext0AddC", testListNextAdd(A_addToFrontB_BA(), ELEMENT_C, 0, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterNext1AddC", testListNextAdd(A_addToFrontB_BA(), ELEMENT_C, 1, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterNext2AddC", testListNextAdd(A_addToFrontB_BA(), ELEMENT_C, 2, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterNext3AddC", testListNextAdd(A_addToFrontB_BA(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_addToFrontB_BA_testListIterPrev1Index0AddC", testListPrevAdd(A_addToFrontB_BA(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("A_addToFrontB_BA_testListIterPrev0Index0AddC", testListPrevAdd(A_addToFrontB_BA(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterPrev0Index1AddC", testListPrevAdd(A_addToFrontB_BA(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterPrev1Index1AddC", testListPrevAdd(A_addToFrontB_BA(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterPrev0Index2AddC", testListPrevAdd(A_addToFrontB_BA(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterPrev1Index2AddC", testListPrevAdd(A_addToFrontB_BA(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterPrev2Index2AddC", testListPrevAdd(A_addToFrontB_BA(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterPrev0Index3AddC", testListPrevAdd(A_addToFrontB_BA(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("A_addToFrontB_BA_testListIterNext0SetC", testListNextSet(A_addToFrontB_BA(), ELEMENT_C, 0, Result.IllegalState));
			printTest("A_addToFrontB_BA_testListIterNext1SetC", testListNextSet(A_addToFrontB_BA(), ELEMENT_C, 1, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterNext2SetC", testListNextSet(A_addToFrontB_BA(), ELEMENT_C, 2, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterNext3SetC", testListNextSet(A_addToFrontB_BA(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_addToFrontB_BA_testListIterPrev0SetC", testListPrevSet(A_addToFrontB_BA(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("A_addToFrontB_BA_testListIterPrev1SetC", testListPrevSet(A_addToFrontB_BA(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_addToFrontB_BA_testListIterPrev2SetC", testListPrevSet(A_addToFrontB_BA(), ELEMENT_C, 2, 2, Result.NoException));
	
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_addToFrontB_BA");
			e.printStackTrace();
		}
	}
	

	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> addToRear(B) -> [A,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> addToRear(B) -> [A,B] 
	 * @return [A,B] after addToRear(B)
	 */
	private IndexedUnsortedList<Integer> A_addToRearB_AB() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.addToRear(ELEMENT_B); //the change
		return list; //return resulting state
	}

	/** Run all tests on scenario: A -> addToRear(B) -> [A,B] */
	private void test_A_addToRearB_AB() {
		System.out.println("\nSCENARIO: [A] -> addToRear(B) -> [A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("A_addToRearB_AB_testAddToFrontC", testAddToFront(A_addToRearB_AB(), ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testAddToRearC", testAddToRear(A_addToRearB_AB(), ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testAddAfterAC", testAddAfter(A_addToRearB_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testAddAfterBC", testAddAfter(A_addToRearB_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testAddAfterDC", testAddAfter(A_addToRearB_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("A_addToRearB_AB_testAddAtIndexNeg1C", testAddAtIndex(A_addToRearB_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testAddAtIndex0C", testAddAtIndex(A_addToRearB_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testAddAtIndex1C", testAddAtIndex(A_addToRearB_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testAddAtIndex2C", testAddAtIndex(A_addToRearB_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testAddAtIndex3C", testAddAtIndex(A_addToRearB_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testAddC", testAdd(A_addToRearB_AB(), ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testRemoveFirst", testRemoveFirst(A_addToRearB_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addToRearB_AB_testRemoveLast", testRemoveLast(A_addToRearB_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addToRearB_AB_testRemoveA", testRemoveElement(A_addToRearB_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addToRearB_AB_testRemoveB", testRemoveElement(A_addToRearB_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addToRearB_AB_testRemoveC", testRemoveElement(A_addToRearB_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("A_addToRearB_AB_testRemoveNeg1", testRemoveIndex(A_addToRearB_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testRemove0", testRemoveIndex(A_addToRearB_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("A_addToRearB_AB_testRemove1", testRemoveIndex(A_addToRearB_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_addToRearB_AB_testRemove2", testRemoveIndex(A_addToRearB_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testFirst", testFirst(A_addToRearB_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addToRearB_AB_testLast", testLast(A_addToRearB_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addToRearB_AB_testContainsA", testContains(A_addToRearB_AB(), ELEMENT_A, Result.True));
			printTest("A_addToRearB_AB_testContainsB", testContains(A_addToRearB_AB(), ELEMENT_B, Result.True));
			printTest("A_addToRearB_AB_testContainsC", testContains(A_addToRearB_AB(), ELEMENT_C, Result.False));
			printTest("A_addToRearB_AB_testIsEmpty", testIsEmpty(A_addToRearB_AB(), Result.False));
			printTest("A_addToRearB_AB_testSize", testSize(A_addToRearB_AB(), 2));
			printTest("A_addToRearB_AB_testToString", testToString(A_addToRearB_AB(), Result.ValidString));
			printTest("A_addToRearB_AB_testSetNeg1C", testSet(A_addToRearB_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testSet0C", testSet(A_addToRearB_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testSet1C", testSet(A_addToRearB_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testSet2C", testSet(A_addToRearB_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testGetNeg1", testGet(A_addToRearB_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testGet0", testGet(A_addToRearB_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("A_addToRearB_AB_testGet1", testGet(A_addToRearB_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_addToRearB_AB_testGet2", testGet(A_addToRearB_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testIndexOfA", testIndexOf(A_addToRearB_AB(), ELEMENT_A, 0));
			printTest("A_addToRearB_AB_testIndexOfB", testIndexOf(A_addToRearB_AB(), ELEMENT_B, 1));
			printTest("A_addToRearB_AB_testIndexOfC", testIndexOf(A_addToRearB_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("A_addToRearB_AB_testIter", testIter(A_addToRearB_AB(), Result.NoException));
			printTest("A_addToRearB_AB_testIterHasNext", testIterHasNext(A_addToRearB_AB().iterator(), Result.True));
			printTest("A_addToRearB_AB_testIterNext", testIterNext(A_addToRearB_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addToRearB_AB_testIterRemove", testIterRemove(A_addToRearB_AB().iterator(), Result.IllegalState));
			printTest("A_addToRearB_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(A_addToRearB_AB(), 1), Result.True));
			printTest("A_addToRearB_AB_iterNext_testIterNext", testIterNext(iterAfterNext(A_addToRearB_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("A_addToRearB_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(A_addToRearB_AB(), 1), Result.NoException));
			printTest("A_addToRearB_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_addToRearB_AB(), 1)), Result.True));
			printTest("A_addToRearB_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_addToRearB_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("A_addToRearB_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_addToRearB_AB(), 1)), Result.IllegalState));
			printTest("A_addToRearB_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(A_addToRearB_AB(), 2), Result.False));
			printTest("A_addToRearB_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(A_addToRearB_AB(), 2), null, Result.NoSuchElement));
			printTest("A_addToRearB_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(A_addToRearB_AB(), 2), Result.NoException));
			printTest("A_addToRearB_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_addToRearB_AB(), 2)), Result.False));
			printTest("A_addToRearB_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_addToRearB_AB(), 2)), null, Result.NoSuchElement));
			printTest("A_addToRearB_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_addToRearB_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("A_addToRearB_AB_testListIter", testListIter(A_addToRearB_AB(), Result.NoException));
			printTest("A_addToRearB_AB_testListIter", testListIter(A_addToRearB_AB(), 0, Result.NoException));
			printTest("A_addToRearB_AB_testListIterHas0Prev", testListIterHasPrev(A_addToRearB_AB(), 0, Result.False));
			printTest("A_addToRearB_AB_testListIterHas1Prev", testListIterHasPrev(A_addToRearB_AB(), 1, Result.True));
			printTest("A_addToRearB_AB_testListIterHas2Prev", testListIterHasPrev(A_addToRearB_AB(), 2, Result.True));
			printTest("A_addToRearB_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_addToRearB_AB_testListIter1Prev1", testListIterPrev(A_addToRearB_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_addToRearB_AB_testListIter2Prev2", testListIterPrev(A_addToRearB_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("A_addToRearB_AB_testListIter2Prev1", testListIterPrev(A_addToRearB_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_addToRearB_AB_testListIterAddNeg1C", testListIterAdd(A_addToRearB_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testListIterAdd0C", testListIterAdd(A_addToRearB_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testListIterAdd1C", testListIterAdd(A_addToRearB_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testListIterAdd2C", testListIterAdd(A_addToRearB_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("A_addToRearB_AB_testListIterAdd3C", testListIterAdd(A_addToRearB_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testListIterNextIndex0", testListIterNextIndex(A_addToRearB_AB(), 0, 0));
			printTest("A_addToRearB_AB_testListIterNextIndex1", testListIterNextIndex(A_addToRearB_AB(), 1, 1));
			printTest("A_addToRearB_AB_testListIterNextIndex2", testListIterNextIndex(A_addToRearB_AB(), 2, 2));
			printTest("A_addToRearB_AB_testListIterPreviousIndex0", testListIterPrevIndex(A_addToRearB_AB(), 0, -1));
			printTest("A_addToRearB_AB_testListIterPreviousIndex1", testListIterPrevIndex(A_addToRearB_AB(), 1, 0));
			printTest("A_addToRearB_AB_testListIterPreviousIndex2", testListIterPrevIndex(A_addToRearB_AB(), 2, 1));
			printTest("A_addToRearB_AB_testListIterNext0AddC", testListNextAdd(A_addToRearB_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("A_addToRearB_AB_testListIterNext1AddC", testListNextAdd(A_addToRearB_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("A_addToRearB_AB_testListIterNext2AddC", testListNextAdd(A_addToRearB_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("A_addToRearB_AB_testListIterNext3AddC", testListNextAdd(A_addToRearB_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_addToRearB_AB_testListIterPrev1Index0AddC", testListPrevAdd(A_addToRearB_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("A_addToRearB_AB_testListIterPrev0Index0AddC", testListPrevAdd(A_addToRearB_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("A_addToRearB_AB_testListIterPrev0Index1AddC", testListPrevAdd(A_addToRearB_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("A_addToRearB_AB_testListIterPrev1Index1AddC", testListPrevAdd(A_addToRearB_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_addToRearB_AB_testListIterPrev0Index2AddC", testListPrevAdd(A_addToRearB_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("A_addToRearB_AB_testListIterPrev1Index2AddC", testListPrevAdd(A_addToRearB_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("A_addToRearB_AB_testListIterPrev2Index2AddC", testListPrevAdd(A_addToRearB_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("A_addToRearB_AB_testListIterPrev0Index3AddC", testListPrevAdd(A_addToRearB_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("A_addToRearB_AB_testListIterNext0SetC", testListNextSet(A_addToRearB_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("A_addToRearB_AB_testListIterNext1SetC", testListNextSet(A_addToRearB_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("A_addToRearB_AB_testListIterNext2SetC", testListNextSet(A_addToRearB_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("A_addToRearB_AB_testListIterNext3SetC", testListNextSet(A_addToRearB_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_addToRearB_AB_testListIterPrev0SetC", testListPrevSet(A_addToRearB_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("A_addToRearB_AB_testListIterPrev1SetC", testListPrevSet(A_addToRearB_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_addToRearB_AB_testListIterPrev2SetC", testListPrevSet(A_addToRearB_AB(), ELEMENT_C, 2, 2, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_addToRearB_AB");
			e.printStackTrace();
		}
	}


	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> addAfter(B,A) -> [A,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> addAfter(B,A) -> [A,B] 
	 * @return [A,B] after addAfter(B,A)
	 */
	private IndexedUnsortedList<Integer> A_addAfterBA_AB() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.addAfter(ELEMENT_B,ELEMENT_A); //the change
		return list; //return resulting state
	}

	/** Run all tests on scenario: A -> addAfter(B,A) -> [A,B] */
	private void test_A_addAfterBA_AB() {
		System.out.println("\nSCENARIO: [A] -> addAfter(B,A) -> [A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("A_addAfterBA_AB_testAddToFrontC", testAddToFront(A_addAfterBA_AB(), ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testAddToRearC", testAddToRear(A_addAfterBA_AB(), ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testAddAfterAC", testAddAfter(A_addAfterBA_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testAddAfterBC", testAddAfter(A_addAfterBA_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testAddAfterDC", testAddAfter(A_addAfterBA_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_testAddAtIndexNeg1C", testAddAtIndex(A_addAfterBA_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testAddAtIndex0C", testAddAtIndex(A_addAfterBA_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testAddAtIndex1C", testAddAtIndex(A_addAfterBA_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testAddAtIndex2C", testAddAtIndex(A_addAfterBA_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testAddAtIndex3C", testAddAtIndex(A_addAfterBA_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testAddC", testAdd(A_addAfterBA_AB(), ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testRemoveFirst", testRemoveFirst(A_addAfterBA_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testRemoveLast", testRemoveLast(A_addAfterBA_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testRemoveA", testRemoveElement(A_addAfterBA_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testRemoveB", testRemoveElement(A_addAfterBA_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testRemoveC", testRemoveElement(A_addAfterBA_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_testRemoveNeg1", testRemoveIndex(A_addAfterBA_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testRemove0", testRemoveIndex(A_addAfterBA_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testRemove1", testRemoveIndex(A_addAfterBA_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testRemove2", testRemoveIndex(A_addAfterBA_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testFirst", testFirst(A_addAfterBA_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testLast", testLast(A_addAfterBA_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testContainsA", testContains(A_addAfterBA_AB(), ELEMENT_A, Result.True));
			printTest("A_addAfterBA_AB_testContainsB", testContains(A_addAfterBA_AB(), ELEMENT_B, Result.True));
			printTest("A_addAfterBA_AB_testContainsC", testContains(A_addAfterBA_AB(), ELEMENT_C, Result.False));
			printTest("A_addAfterBA_AB_testIsEmpty", testIsEmpty(A_addAfterBA_AB(), Result.False));
			printTest("A_addAfterBA_AB_testSize", testSize(A_addAfterBA_AB(), 2));
			printTest("A_addAfterBA_AB_testToString", testToString(A_addAfterBA_AB(), Result.ValidString));
			printTest("A_addAfterBA_AB_testSetNeg1C", testSet(A_addAfterBA_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testSet0C", testSet(A_addAfterBA_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testSet1C", testSet(A_addAfterBA_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testSet2C", testSet(A_addAfterBA_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testGetNeg1", testGet(A_addAfterBA_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testGet0", testGet(A_addAfterBA_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testGet1", testGet(A_addAfterBA_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testGet2", testGet(A_addAfterBA_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testIndexOfA", testIndexOf(A_addAfterBA_AB(), ELEMENT_A, 0));
			printTest("A_addAfterBA_AB_testIndexOfB", testIndexOf(A_addAfterBA_AB(), ELEMENT_B, 1));
			printTest("A_addAfterBA_AB_testIndexOfC", testIndexOf(A_addAfterBA_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("A_addAfterBA_AB_testIter", testIter(A_addAfterBA_AB(), Result.NoException));
			printTest("A_addAfterBA_AB_testIterHasNext", testIterHasNext(A_addAfterBA_AB().iterator(), Result.True));
			printTest("A_addAfterBA_AB_testIterNext", testIterNext(A_addAfterBA_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testIterRemove", testIterRemove(A_addAfterBA_AB().iterator(), Result.IllegalState));
			printTest("A_addAfterBA_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(A_addAfterBA_AB(), 1), Result.True));
			printTest("A_addAfterBA_AB_iterNext_testIterNext", testIterNext(iterAfterNext(A_addAfterBA_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(A_addAfterBA_AB(), 1), Result.NoException));
			printTest("A_addAfterBA_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 1)), Result.True));
			printTest("A_addAfterBA_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 1)), Result.IllegalState));
			printTest("A_addAfterBA_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(A_addAfterBA_AB(), 2), Result.False));
			printTest("A_addAfterBA_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(A_addAfterBA_AB(), 2), null, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(A_addAfterBA_AB(), 2), Result.NoException));
			printTest("A_addAfterBA_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 2)), Result.False));
			printTest("A_addAfterBA_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 2)), null, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("A_addAfterBA_AB_testListIter", testListIter(A_addAfterBA_AB(), Result.NoException));
			printTest("A_addAfterBA_AB_testListIter", testListIter(A_addAfterBA_AB(), 0, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterHas0Prev", testListIterHasPrev(A_addAfterBA_AB(), 0, Result.False));
			printTest("A_addAfterBA_AB_testListIterHas1Prev", testListIterHasPrev(A_addAfterBA_AB(), 1, Result.True));
			printTest("A_addAfterBA_AB_testListIterHas2Prev", testListIterHasPrev(A_addAfterBA_AB(), 2, Result.True));
			printTest("A_addAfterBA_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_testListIter1Prev1", testListIterPrev(A_addAfterBA_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testListIter2Prev2", testListIterPrev(A_addAfterBA_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testListIter2Prev1", testListIterPrev(A_addAfterBA_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testListIterAddNeg1C", testListIterAdd(A_addAfterBA_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testListIterAdd0C", testListIterAdd(A_addAfterBA_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterAdd1C", testListIterAdd(A_addAfterBA_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterAdd2C", testListIterAdd(A_addAfterBA_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterAdd3C", testListIterAdd(A_addAfterBA_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testListIterNextIndex0", testListIterNextIndex(A_addAfterBA_AB(), 0, 0));
			printTest("A_addAfterBA_AB_testListIterNextIndex1", testListIterNextIndex(A_addAfterBA_AB(), 1, 1));
			printTest("A_addAfterBA_AB_testListIterNextIndex2", testListIterNextIndex(A_addAfterBA_AB(), 2, 2));
			printTest("A_addAfterBA_AB_testListIterPreviousIndex0", testListIterPrevIndex(A_addAfterBA_AB(), 0, -1));
			printTest("A_addAfterBA_AB_testListIterPreviousIndex1", testListIterPrevIndex(A_addAfterBA_AB(), 1, 0));
			printTest("A_addAfterBA_AB_testListIterPreviousIndex2", testListIterPrevIndex(A_addAfterBA_AB(), 2, 1));
			printTest("A_addAfterBA_AB_testListIterNext0AddC", testListNextAdd(A_addAfterBA_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterNext1AddC", testListNextAdd(A_addAfterBA_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterNext2AddC", testListNextAdd(A_addAfterBA_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterNext3AddC", testListNextAdd(A_addAfterBA_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_testListIterPrev1Index0AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_testListIterPrev0Index0AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev0Index1AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev1Index1AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev0Index2AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev1Index2AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev2Index2AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev0Index3AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testListIterNext0SetC", testListNextSet(A_addAfterBA_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("A_addAfterBA_AB_testListIterNext1SetC", testListNextSet(A_addAfterBA_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterNext2SetC", testListNextSet(A_addAfterBA_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterNext3SetC", testListNextSet(A_addAfterBA_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_testListIterPrev0SetC", testListPrevSet(A_addAfterBA_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("A_addAfterBA_AB_testListIterPrev1SetC", testListPrevSet(A_addAfterBA_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev2SetC", testListPrevSet(A_addAfterBA_AB(), ELEMENT_C, 2, 2, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_addAfterBA_AB");
			e.printStackTrace();
		}
	}
	

	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> add(B) -> [A,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> add(B) -> [A,B] 
	 * @return [A,B] after add(B)
	 */
	private IndexedUnsortedList<Integer> A_addB_AB() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.add(ELEMENT_B); //the change
		return list; //return resulting state
	}

	/** Run all tests on scenario: A -> add(B) -> [A,B] */
	private void test_A_addB_AB() {
		System.out.println("\nSCENARIO: [A] -> add(B) -> [A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("A_addB_AB_testAddToFrontC", testAddToFront(A_addB_AB(), ELEMENT_C, Result.NoException));
			printTest("A_addB_AB_testAddToRearC", testAddToRear(A_addB_AB(), ELEMENT_C, Result.NoException));
			printTest("A_addB_AB_testAddAfterAC", testAddAfter(A_addB_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("A_addB_AB_testAddAfterBC", testAddAfter(A_addB_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("A_addB_AB_testAddAfterDC", testAddAfter(A_addB_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("A_addB_AB_testAddAtIndexNeg1C", testAddAtIndex(A_addB_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addB_AB_testAddAtIndex0C", testAddAtIndex(A_addB_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addB_AB_testAddAtIndex1C", testAddAtIndex(A_addB_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addB_AB_testAddAtIndex2C", testAddAtIndex(A_addB_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("A_addB_AB_testAddAtIndex3C", testAddAtIndex(A_addB_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addB_AB_testAddC", testAdd(A_addB_AB(), ELEMENT_C, Result.NoException));
			printTest("A_addB_AB_testRemoveFirst", testRemoveFirst(A_addB_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addB_AB_testRemoveLast", testRemoveLast(A_addB_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addB_AB_testRemoveA", testRemoveElement(A_addB_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addB_AB_testRemoveB", testRemoveElement(A_addB_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addB_AB_testRemoveC", testRemoveElement(A_addB_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("A_addB_AB_testRemoveNeg1", testRemoveIndex(A_addB_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("A_addB_AB_testRemove0", testRemoveIndex(A_addB_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("A_addB_AB_testRemove1", testRemoveIndex(A_addB_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_addB_AB_testRemove2", testRemoveIndex(A_addB_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("A_addB_AB_testFirst", testFirst(A_addB_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addB_AB_testLast", testLast(A_addB_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_addB_AB_testContainsA", testContains(A_addB_AB(), ELEMENT_A, Result.True));
			printTest("A_addB_AB_testContainsB", testContains(A_addB_AB(), ELEMENT_B, Result.True));
			printTest("A_addB_AB_testContainsC", testContains(A_addB_AB(), ELEMENT_C, Result.False));
			printTest("A_addB_AB_testIsEmpty", testIsEmpty(A_addB_AB(), Result.False));
			printTest("A_addB_AB_testSize", testSize(A_addB_AB(), 2));
			printTest("A_addB_AB_testToString", testToString(A_addB_AB(), Result.ValidString));
			printTest("A_addB_AB_testSetNeg1C", testSet(A_addB_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addB_AB_testSet0C", testSet(A_addB_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addB_AB_testSet1C", testSet(A_addB_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addB_AB_testSet2C", testSet(A_addB_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addB_AB_testGetNeg1", testGet(A_addB_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("A_addB_AB_testGet0", testGet(A_addB_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("A_addB_AB_testGet1", testGet(A_addB_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_addB_AB_testGet2", testGet(A_addB_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("A_addB_AB_testIndexOfA", testIndexOf(A_addB_AB(), ELEMENT_A, 0));
			printTest("A_addB_AB_testIndexOfB", testIndexOf(A_addB_AB(), ELEMENT_B, 1));
			printTest("A_addB_AB_testIndexOfC", testIndexOf(A_addB_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("A_addAfterBA_AB_testIter", testIter(A_addAfterBA_AB(), Result.NoException));
			printTest("A_addAfterBA_AB_testIterHasNext", testIterHasNext(A_addAfterBA_AB().iterator(), Result.True));
			printTest("A_addAfterBA_AB_testIterNext", testIterNext(A_addAfterBA_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testIterRemove", testIterRemove(A_addAfterBA_AB().iterator(), Result.IllegalState));
			printTest("A_addAfterBA_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(A_addAfterBA_AB(), 1), Result.True));
			printTest("A_addAfterBA_AB_iterNext_testIterNext", testIterNext(iterAfterNext(A_addAfterBA_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(A_addAfterBA_AB(), 1), Result.NoException));
			printTest("A_addAfterBA_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 1)), Result.True));
			printTest("A_addAfterBA_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 1)), Result.IllegalState));
			printTest("A_addAfterBA_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(A_addAfterBA_AB(), 2), Result.False));
			printTest("A_addAfterBA_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(A_addAfterBA_AB(), 2), null, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(A_addAfterBA_AB(), 2), Result.NoException));
			printTest("A_addAfterBA_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 2)), Result.False));
			printTest("A_addAfterBA_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 2)), null, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_addAfterBA_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("A_addAfterBA_AB_testListIter", testListIter(A_addB_AB(), Result.NoException));
			printTest("A_addAfterBA_AB_testListIter", testListIter(A_addB_AB(), 0, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterHas0Prev", testListIterHasPrev(A_addAfterBA_AB(), 0, Result.False));
			printTest("A_addAfterBA_AB_testListIterHas1Prev", testListIterHasPrev(A_addAfterBA_AB(), 1, Result.True));
			printTest("A_addAfterBA_AB_testListIterHas2Prev", testListIterHasPrev(A_addAfterBA_AB(), 2, Result.True));
			printTest("A_addAfterBA_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_testListIter1Prev1", testListIterPrev(A_addAfterBA_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testListIter2Prev2", testListIterPrev(A_addAfterBA_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testListIter2Prev1", testListIterPrev(A_addAfterBA_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_addAfterBA_AB_testListIterAddNeg1C", testListIterAdd(A_addAfterBA_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testListIterAdd0C", testListIterAdd(A_addAfterBA_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterAdd1C", testListIterAdd(A_addAfterBA_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterAdd2C", testListIterAdd(A_addAfterBA_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterAdd3C", testListIterAdd(A_addAfterBA_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testListIterNextIndex0", testListIterNextIndex(A_addAfterBA_AB(), 0, 0));
			printTest("A_addAfterBA_AB_testListIterNextIndex1", testListIterNextIndex(A_addAfterBA_AB(), 1, 1));
			printTest("A_addAfterBA_AB_testListIterNextIndex2", testListIterNextIndex(A_addAfterBA_AB(), 2, 2));
			printTest("A_addAfterBA_AB_testListIterPreviousIndex0", testListIterPrevIndex(A_addAfterBA_AB(), 0, -1));
			printTest("A_addAfterBA_AB_testListIterPreviousIndex1", testListIterPrevIndex(A_addAfterBA_AB(), 1, 0));
			printTest("A_addAfterBA_AB_testListIterPreviousIndex2", testListIterPrevIndex(A_addAfterBA_AB(), 2, 1));
			printTest("A_addAfterBA_AB_testListIterNext0AddC", testListNextAdd(A_addAfterBA_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterNext1AddC", testListNextAdd(A_addAfterBA_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterNext2AddC", testListNextAdd(A_addAfterBA_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterNext3AddC", testListNextAdd(A_addAfterBA_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_testListIterPrev1Index0AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_testListIterPrev0Index0AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev0Index1AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev1Index1AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev0Index2AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev1Index2AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev2Index2AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev0Index3AddC", testListPrevAdd(A_addAfterBA_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("A_addAfterBA_AB_testListIterNext0SetC", testListNextSet(A_addAfterBA_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("A_addAfterBA_AB_testListIterNext1SetC", testListNextSet(A_addAfterBA_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterNext2SetC", testListNextSet(A_addAfterBA_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterNext3SetC", testListNextSet(A_addAfterBA_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_addAfterBA_AB_testListIterPrev0SetC", testListPrevSet(A_addAfterBA_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("A_addAfterBA_AB_testListIterPrev1SetC", testListPrevSet(A_addAfterBA_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_addAfterBA_AB_testListIterPrev2SetC", testListPrevSet(A_addAfterBA_AB(), ELEMENT_C, 2, 2, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_addB_AB");
			e.printStackTrace();
		}
	}
	

	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> add(0,B) -> [B,A]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> add(0,B) -> [B,A] 
	 * @return [B,A] after add(0,B)
	 */
	private IndexedUnsortedList<Integer> A_add0B_BA() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.add(0,ELEMENT_B); //the change
		return list; //return resulting state
	}

	/** Run all tests on scenario: A -> add(0,B) -> [B,A] */
	private void test_A_add0B_BA() {
		System.out.println("\nSCENARIO: [A] -> add(0,B) -> [B,A]\n");
		try {
			// IndexedUnsortedList
			printTest("A_add0B_BA_testAddToFrontC", testAddToFront(A_add0B_BA(), ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testAddToRearC", testAddToRear(A_add0B_BA(), ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testAddAfterAC", testAddAfter(A_add0B_BA(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testAddAfterBC", testAddAfter(A_add0B_BA(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testAddAfterDC", testAddAfter(A_add0B_BA(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("A_add0B_BA_testAddAtIndexNeg1C", testAddAtIndex(A_add0B_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testAddAtIndex0C", testAddAtIndex(A_add0B_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testAddAtIndex1C", testAddAtIndex(A_add0B_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testAddAtIndex2C", testAddAtIndex(A_add0B_BA(), 2, ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testAddAtIndex3C", testAddAtIndex(A_add0B_BA(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testAddC", testAdd(A_add0B_BA(), ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testRemoveFirst", testRemoveFirst(A_add0B_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_add0B_BA_testRemoveLast", testRemoveLast(A_add0B_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_add0B_BA_testRemoveA", testRemoveElement(A_add0B_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_add0B_BA_testRemoveB", testRemoveElement(A_add0B_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_add0B_BA_testRemoveC", testRemoveElement(A_add0B_BA(), ELEMENT_C, Result.NoSuchElement));
			printTest("A_add0B_BA_testRemoveNeg1", testRemoveIndex(A_add0B_BA(), -1, null, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testRemove0", testRemoveIndex(A_add0B_BA(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_add0B_BA_testRemove1", testRemoveIndex(A_add0B_BA(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_add0B_BA_testRemove2", testRemoveIndex(A_add0B_BA(), 2, null, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testFirst", testFirst(A_add0B_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_add0B_BA_testLast", testLast(A_add0B_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_add0B_BA_testContainsA", testContains(A_add0B_BA(), ELEMENT_A, Result.True));
			printTest("A_add0B_BA_testContainsB", testContains(A_add0B_BA(), ELEMENT_B, Result.True));
			printTest("A_add0B_BA_testContainsC", testContains(A_add0B_BA(), ELEMENT_C, Result.False));
			printTest("A_add0B_BA_testIsEmpty", testIsEmpty(A_add0B_BA(), Result.False));
			printTest("A_add0B_BA_testSize", testSize(A_add0B_BA(), 2));
			printTest("A_add0B_BA_testToString", testToString(A_add0B_BA(), Result.ValidString));
			printTest("A_add0B_BA_testSetNeg1C", testSet(A_add0B_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testSet0C", testSet(A_add0B_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testSet1C", testSet(A_add0B_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testSet2C", testSet(A_add0B_BA(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testGetNeg1", testGet(A_add0B_BA(), -1, null, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testGet0", testGet(A_add0B_BA(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_add0B_BA_testGet1", testGet(A_add0B_BA(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_add0B_BA_testGet2", testGet(A_add0B_BA(), 2, null, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testIndexOfA", testIndexOf(A_add0B_BA(), ELEMENT_A, 1));
			printTest("A_add0B_BA_testIndexOfB", testIndexOf(A_add0B_BA(), ELEMENT_B, 0));
			printTest("A_add0B_BA_testIndexOfC", testIndexOf(A_add0B_BA(), ELEMENT_C, -1));
			// Iterator
			printTest("A_add0B_BA_testIter", testIter(A_add0B_BA(), Result.NoException));
			printTest("A_add0B_BA_testIterHasNext", testIterHasNext(A_add0B_BA().iterator(), Result.True));
			printTest("A_add0B_BA_testIterNext", testIterNext(A_add0B_BA().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("A_add0B_BA_testIterRemove", testIterRemove(A_add0B_BA().iterator(), Result.IllegalState));
			printTest("A_add0B_BA_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(A_add0B_BA(), 1), Result.True));
			printTest("A_add0B_BA_iterNext_testIterNext", testIterNext(iterAfterNext(A_add0B_BA(), 1), ELEMENT_A, Result.MatchingValue));
			printTest("A_add0B_BA_iterNext_testIterRemove", testIterRemove(iterAfterNext(A_add0B_BA(), 1), Result.NoException));
			printTest("A_add0B_BA_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_add0B_BA(), 1)), Result.True));
			printTest("A_add0B_BA_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_add0B_BA(), 1)), ELEMENT_A, Result.MatchingValue));
			printTest("A_add0B_BA_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_add0B_BA(), 1)), Result.IllegalState));
			printTest("A_add0B_BA_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(A_add0B_BA(), 2), Result.False));
			printTest("A_add0B_BA_iterNextNext_testIterNext", testIterNext(iterAfterNext(A_add0B_BA(), 2), null, Result.NoSuchElement));
			printTest("A_add0B_BA_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(A_add0B_BA(), 2), Result.NoException));
			printTest("A_add0B_BA_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_add0B_BA(), 2)), Result.False));
			printTest("A_add0B_BA_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_add0B_BA(), 2)), null, Result.NoSuchElement));
			printTest("A_add0B_BA_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_add0B_BA(), 2)), Result.IllegalState));
			// ListIterator
			printTest("A_add0B_BA_testListIter", testListIter(A_add0B_BA(), Result.NoException));
			printTest("A_add0B_BA_testListIter", testListIter(A_add0B_BA(), 0, Result.NoException));
			printTest("A_add0B_BA_testListIterHas0Prev", testListIterHasPrev(A_add0B_BA(), 0, Result.False));
			printTest("A_add0B_BA_testListIterHas1Prev", testListIterHasPrev(A_add0B_BA(), 1, Result.True));
			printTest("A_add0B_BA_testListIterHas2Prev", testListIterHasPrev(A_add0B_BA(), 2, Result.True));
			printTest("A_add0B_BA_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_add0B_BA_testListIter1Prev1", testListIterPrev(A_add0B_BA(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_add0B_BA_testListIter2Prev2", testListIterPrev(A_add0B_BA(), 2, 2, ELEMENT_B, Result.MatchingValue));
			printTest("A_add0B_BA_testListIter2Prev1", testListIterPrev(A_add0B_BA(), 2, 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_add0B_BA_testListIterAddNeg1C", testListIterAdd(A_add0B_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testListIterAdd0C", testListIterAdd(A_add0B_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testListIterAdd1C", testListIterAdd(A_add0B_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testListIterAdd2C", testListIterAdd(A_add0B_BA(), 2, ELEMENT_C, Result.NoException));
			printTest("A_add0B_BA_testListIterAdd3C", testListIterAdd(A_add0B_BA(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testListIterNextIndex0", testListIterNextIndex(A_add0B_BA(), 0, 0));
			printTest("A_add0B_BA_testListIterNextIndex1", testListIterNextIndex(A_add0B_BA(), 1, 1));
			printTest("A_add0B_BA_testListIterNextIndex2", testListIterNextIndex(A_add0B_BA(), 2, 2));
			printTest("A_add0B_BA_testListIterPreviousIndex0", testListIterPrevIndex(A_add0B_BA(), 0, -1));
			printTest("A_add0B_BA_testListIterPreviousIndex1", testListIterPrevIndex(A_add0B_BA(), 1, 0));
			printTest("A_add0B_BA_testListIterPreviousIndex2", testListIterPrevIndex(A_add0B_BA(), 2, 1));
			printTest("A_add0B_BA_testListIterNext0AddC", testListNextAdd(A_add0B_BA(), ELEMENT_C, 0, Result.NoException));
			printTest("A_add0B_BA_testListIterNext1AddC", testListNextAdd(A_add0B_BA(), ELEMENT_C, 1, Result.NoException));
			printTest("A_add0B_BA_testListIterNext2AddC", testListNextAdd(A_add0B_BA(), ELEMENT_C, 2, Result.NoException));
			printTest("A_add0B_BA_testListIterNext3AddC", testListNextAdd(A_add0B_BA(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_add0B_BA_testListIterPrev1Index0AddC", testListPrevAdd(A_add0B_BA(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("A_add0B_BA_testListIterPrev0Index0AddC", testListPrevAdd(A_add0B_BA(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("A_add0B_BA_testListIterPrev0Index1AddC", testListPrevAdd(A_add0B_BA(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("A_add0B_BA_testListIterPrev1Index1AddC", testListPrevAdd(A_add0B_BA(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_add0B_BA_testListIterPrev0Index2AddC", testListPrevAdd(A_add0B_BA(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("A_add0B_BA_testListIterPrev1Index2AddC", testListPrevAdd(A_add0B_BA(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("A_add0B_BA_testListIterPrev2Index2AddC", testListPrevAdd(A_add0B_BA(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("A_add0B_BA_testListIterPrev0Index3AddC", testListPrevAdd(A_add0B_BA(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("A_add0B_BA_testListIterNext0SetC", testListNextSet(A_add0B_BA(), ELEMENT_C, 0, Result.IllegalState));
			printTest("A_add0B_BA_testListIterNext1SetC", testListNextSet(A_add0B_BA(), ELEMENT_C, 1, Result.NoException));
			printTest("A_add0B_BA_testListIterNext2SetC", testListNextSet(A_add0B_BA(), ELEMENT_C, 2, Result.NoException));
			printTest("A_add0B_BA_testListIterNext3SetC", testListNextSet(A_add0B_BA(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_add0B_BA_testListIterPrev0SetC", testListPrevSet(A_add0B_BA(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("A_add0B_BA_testListIterPrev1SetC", testListPrevSet(A_add0B_BA(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_add0B_BA_testListIterPrev2SetC", testListPrevSet(A_add0B_BA(), ELEMENT_C, 2, 2, Result.NoException));
	
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_add0B_BA");
			e.printStackTrace();
		}
	}
	

	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> add(1,B) -> [A,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> add(1,B) -> [A,B] 
	 * @return [A,B] after add(1,B)
	 */
	private IndexedUnsortedList<Integer> A_add1B_AB() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.add(1,ELEMENT_B); //the change
		return list; //return resulting state
	}

	/** Run all tests on scenario: A -> add(1,B) -> [A,B] */
	private void test_A_add1B_AB() {
		System.out.println("\nSCENARIO: [A] -> add(1,B) -> [A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("A_add1B_AB_testAddToFrontC", testAddToFront(A_add1B_AB(), ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testAddToRearC", testAddToRear(A_add1B_AB(), ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testAddAfterAC", testAddAfter(A_add1B_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testAddAfterBC", testAddAfter(A_add1B_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testAddAfterDC", testAddAfter(A_add1B_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("A_add1B_AB_testAddAtIndexNeg1C", testAddAtIndex(A_add1B_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testAddAtIndex0C", testAddAtIndex(A_add1B_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testAddAtIndex1C", testAddAtIndex(A_add1B_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testAddAtIndex2C", testAddAtIndex(A_add1B_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testAddAtIndex3C", testAddAtIndex(A_add1B_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testAddC", testAdd(A_add1B_AB(), ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testRemoveFirst", testRemoveFirst(A_add1B_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_add1B_AB_testRemoveLast", testRemoveLast(A_add1B_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_add1B_AB_testRemoveA", testRemoveElement(A_add1B_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_add1B_AB_testRemoveB", testRemoveElement(A_add1B_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_add1B_AB_testRemoveC", testRemoveElement(A_add1B_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("A_add1B_AB_testRemoveNeg1", testRemoveIndex(A_add1B_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testRemove0", testRemoveIndex(A_add1B_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("A_add1B_AB_testRemove1", testRemoveIndex(A_add1B_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_add1B_AB_testRemove2", testRemoveIndex(A_add1B_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testFirst", testFirst(A_add1B_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_add1B_AB_testLast", testLast(A_add1B_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_add1B_AB_testContainsA", testContains(A_add1B_AB(), ELEMENT_A, Result.True));
			printTest("A_add1B_AB_testContainsB", testContains(A_add1B_AB(), ELEMENT_B, Result.True));
			printTest("A_add1B_AB_testContainsC", testContains(A_add1B_AB(), ELEMENT_C, Result.False));
			printTest("A_add1B_AB_testIsEmpty", testIsEmpty(A_add1B_AB(), Result.False));
			printTest("A_add1B_AB_testSize", testSize(A_add1B_AB(), 2));
			printTest("A_add1B_AB_testToString", testToString(A_add1B_AB(), Result.ValidString));
			printTest("A_add1B_AB_testSetNeg1C", testSet(A_add1B_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testSet0C", testSet(A_add1B_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testSet1C", testSet(A_add1B_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testSet2C", testSet(A_add1B_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testGetNeg1", testGet(A_add1B_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testGet0", testGet(A_add1B_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("A_add1B_AB_testGet1", testGet(A_add1B_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_add1B_AB_testGet2", testGet(A_add1B_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testIndexOfA", testIndexOf(A_add1B_AB(), ELEMENT_A, 0));
			printTest("A_add1B_AB_testIndexOfB", testIndexOf(A_add1B_AB(), ELEMENT_B, 1));
			printTest("A_add1B_AB_testIndexOfC", testIndexOf(A_add1B_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("A_add1B_AB_testIter", testIter(A_add1B_AB(), Result.NoException));
			printTest("A_add1B_AB_testIterHasNext", testIterHasNext(A_add1B_AB().iterator(), Result.True));
			printTest("A_add1B_AB_testIterNext", testIterNext(A_add1B_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("A_add1B_AB_testIterRemove", testIterRemove(A_add1B_AB().iterator(), Result.IllegalState));
			printTest("A_add1B_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(A_add1B_AB(), 1), Result.True));
			printTest("A_add1B_AB_iterNext_testIterNext", testIterNext(iterAfterNext(A_add1B_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("A_add1B_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(A_add1B_AB(), 1), Result.NoException));
			printTest("A_add1B_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_add1B_AB(), 1)), Result.True));
			printTest("A_add1B_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_add1B_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("A_add1B_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_add1B_AB(), 1)), Result.IllegalState));
			printTest("A_add1B_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(A_add1B_AB(), 2), Result.False));
			printTest("A_add1B_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(A_add1B_AB(), 2), null, Result.NoSuchElement));
			printTest("A_add1B_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(A_add1B_AB(), 2), Result.NoException));
			printTest("A_add1B_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_add1B_AB(), 2)), Result.False));
			printTest("A_add1B_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_add1B_AB(), 2)), null, Result.NoSuchElement));
			printTest("A_add1B_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_add1B_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("A_add1B_AB_testListIter", testListIter(A_add1B_AB(), Result.NoException));
			printTest("A_add1B_AB_testListIter", testListIter(A_add1B_AB(), 0, Result.NoException));
			printTest("A_add1B_AB_testListIterHas0Prev", testListIterHasPrev(A_add1B_AB(), 0, Result.False));
			printTest("A_add1B_AB_testListIterHas1Prev", testListIterHasPrev(A_add1B_AB(), 1, Result.True));
			printTest("A_add1B_AB_testListIterHas2Prev", testListIterHasPrev(A_add1B_AB(), 2, Result.True));
			printTest("A_add1B_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_add1B_AB_testListIter1Prev1", testListIterPrev(A_add1B_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_add1B_AB_testListIter2Prev2", testListIterPrev(A_add1B_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("A_add1B_AB_testListIter2Prev1", testListIterPrev(A_add1B_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_add1B_AB_testListIterAddNeg1C", testListIterAdd(A_add1B_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testListIterAdd0C", testListIterAdd(A_add1B_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testListIterAdd1C", testListIterAdd(A_add1B_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testListIterAdd2C", testListIterAdd(A_add1B_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("A_add1B_AB_testListIterAdd3C", testListIterAdd(A_add1B_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testListIterNextIndex0", testListIterNextIndex(A_add1B_AB(), 0, 0));
			printTest("A_add1B_AB_testListIterNextIndex1", testListIterNextIndex(A_add1B_AB(), 1, 1));
			printTest("A_add1B_AB_testListIterNextIndex2", testListIterNextIndex(A_add1B_AB(), 2, 2));
			printTest("A_add1B_AB_testListIterPreviousIndex0", testListIterPrevIndex(A_add1B_AB(), 0, -1));
			printTest("A_add1B_AB_testListIterPreviousIndex1", testListIterPrevIndex(A_add1B_AB(), 1, 0));
			printTest("A_add1B_AB_testListIterPreviousIndex2", testListIterPrevIndex(A_add1B_AB(), 2, 1));
			printTest("A_add1B_AB_testListIterNext0AddC", testListNextAdd(A_add1B_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("A_add1B_AB_testListIterNext1AddC", testListNextAdd(A_add1B_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("A_add1B_AB_testListIterNext2AddC", testListNextAdd(A_add1B_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("A_add1B_AB_testListIterNext3AddC", testListNextAdd(A_add1B_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_add1B_AB_testListIterPrev1Index0AddC", testListPrevAdd(A_add1B_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("A_add1B_AB_testListIterPrev0Index0AddC", testListPrevAdd(A_add1B_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("A_add1B_AB_testListIterPrev0Index1AddC", testListPrevAdd(A_add1B_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("A_add1B_AB_testListIterPrev1Index1AddC", testListPrevAdd(A_add1B_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_add1B_AB_testListIterPrev0Index2AddC", testListPrevAdd(A_add1B_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("A_add1B_AB_testListIterPrev1Index2AddC", testListPrevAdd(A_add1B_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("A_add1B_AB_testListIterPrev2Index2AddC", testListPrevAdd(A_add1B_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("A_add1B_AB_testListIterPrev0Index3AddC", testListPrevAdd(A_add1B_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("A_add1B_AB_testListIterNext0SetC", testListNextSet(A_add1B_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("A_add1B_AB_testListIterNext1SetC", testListNextSet(A_add1B_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("A_add1B_AB_testListIterNext2SetC", testListNextSet(A_add1B_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("A_add1B_AB_testListIterNext3SetC", testListNextSet(A_add1B_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_add1B_AB_testListIterPrev0SetC", testListPrevSet(A_add1B_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("A_add1B_AB_testListIterPrev1SetC", testListPrevSet(A_add1B_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_add1B_AB_testListIterPrev2SetC", testListPrevSet(A_add1B_AB(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_add1B_AB");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> removeFirst() -> [ ]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> removeFirst() -> [ ]
	 * @return [ ] after removeFirst()
	 */
	private IndexedUnsortedList<Integer> A_removeFirst_emptyList() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.removeFirst(); //the change
		return list; //return resulting state
	}
	
	/** Run all tests on scenario: [A] -> removeFirst() -> [ ] */
	private void test_A_removeFirst_emptyList() {
	
		System.out.println("\nSCENARIO: [A] -> removeFirst() -> []\n");
		//try-catch prevents an Exception from the scenario builder 
		// method from bringing down the whole test suite
		try {
			printTest("A_removeFirst_emptyList_testAddToFrontA", testAddToFront(A_removeFirst_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_removeFirst_emptyList_testAddToRearA", testAddToRear(A_removeFirst_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_removeFirst_emptyList_testAddAfterBA", testAddAfter(A_removeFirst_emptyList(), ELEMENT_B, ELEMENT_A, Result.NoSuchElement));
			printTest("A_removeFirst_emptyList_testAddAtIndexNeg1", testAddAtIndex(A_removeFirst_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testAddAtIndex0", testAddAtIndex(A_removeFirst_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_removeFirst_emptyList_testAddAtIndex1", testAddAtIndex(A_removeFirst_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testAddA", testAdd(A_removeFirst_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_removeFirst_emptyList_testRemoveFirst", testRemoveFirst(A_removeFirst_emptyList(), null, Result.IllegalState));
			printTest("A_removeFirst_emptyList_testRemoveLast", testRemoveLast(A_removeFirst_emptyList(), null, Result.IllegalState));
			printTest("A_removeFirst_emptyList_testRemoveA", testRemoveElement(A_removeFirst_emptyList(), null, Result.NoSuchElement));
			printTest("A_removeFirst_emptyList_testRemoveNeg1", testRemoveIndex(A_removeFirst_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testRemove0", testRemoveIndex(A_removeFirst_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testFirst", testFirst(A_removeFirst_emptyList(), null, Result.IllegalState));
			printTest("A_removeFirst_emptyList_testLast", testLast(A_removeFirst_emptyList(), null, Result.IllegalState));
			printTest("A_removeFirst_emptyList_testContainsA", testContains(A_removeFirst_emptyList(), ELEMENT_A, Result.False));
			printTest("A_removeFirst_emptyList_testIsEmpty", testIsEmpty(A_removeFirst_emptyList(), Result.True));
			printTest("A_removeFirst_emptyList_testSize", testSize(A_removeFirst_emptyList(), 0));
			printTest("A_removeFirst_emptyList_testToString", testToString(A_removeFirst_emptyList(), Result.ValidString));
			printTest("A_removeFirst_emptyList_testSetNeg1A", testSet(A_removeFirst_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testSet0A", testSet(A_removeFirst_emptyList(), 0, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testGetNeg1", testGet(A_removeFirst_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testGet0", testGet(A_removeFirst_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testIndexOfA", testIndexOf(A_removeFirst_emptyList(), ELEMENT_A, -1));
			// Iterator
			printTest("A_removeFirst_emptyList_testIter", testIter(A_removeFirst_emptyList(), Result.NoException));
			printTest("A_removeFirst_emptyList_testIterHasNext", testIterHasNext(A_removeFirst_emptyList().iterator(), Result.False));
			printTest("A_removeFirst_emptyList_testIterNext", testIterNext(A_removeFirst_emptyList().iterator(), null, Result.NoSuchElement));
			printTest("A_removeFirst_emptyList_testIterRemove", testIterRemove(A_removeFirst_emptyList().iterator(), Result.IllegalState));
			// ListIterator
			printTest("A_removeFirst_emptyList_testListIter", testListIter(A_removeFirst_emptyList(), Result.NoException));
			printTest("A_removeFirst_emptyList_testListIter", testListIter(A_removeFirst_emptyList(), 0, Result.NoException));
			printTest("A_removeFirst_emptyList_testListIterHasPrev", testListIterHasPrev(A_removeFirst_emptyList(), 0, Result.False));
			printTest("A_removeFirst_emptyList_testListIterPrev", testListIterPrev(A_removeFirst_emptyList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_removeFirst_emptyList_testListIterAddNeg1A", testListIterAdd(A_removeFirst_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testListIterAdd0A", testListIterAdd(A_removeFirst_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_removeFirst_emptyList_testListIterAdd1A", testListIterAdd(A_removeFirst_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testListIterNextIndex0", testListIterNextIndex(A_removeFirst_emptyList(), 0, 0));
			printTest("A_removeFirst_emptyList_testListIterPreviousIndex0", testListIterPrevIndex(A_removeFirst_emptyList(), 0, -1));
			printTest("A_removeFirst_emptyList_testListIterNext0AddA", testListNextAdd(A_removeFirst_emptyList(), ELEMENT_A, 0, Result.NoException));
			printTest("A_removeFirst_emptyList_testListIterNext1AddA", testListNextAdd(A_removeFirst_emptyList(), ELEMENT_A, 1, Result.NoSuchElement));
			printTest("A_removeFirst_emptyList_testListIterPrev0Index0AddA", testListPrevAdd(A_removeFirst_emptyList(), ELEMENT_A, 0, 0, Result.NoException));
			printTest("A_removeFirst_emptyList_testListIterPrev0Index1AddA", testListPrevAdd(A_removeFirst_emptyList(), ELEMENT_A, 0, 1, Result.IndexOutOfBounds));
			printTest("A_removeFirst_emptyList_testListIterPrev1Index0AddA", testListPrevAdd(A_removeFirst_emptyList(), ELEMENT_A, 1, 0, Result.NoSuchElement));
			printTest("A_removeFirst_emptyList_testListIterNext0SetA", testListNextSet(A_removeFirst_emptyList(), ELEMENT_A, 0, Result.IllegalState));
			printTest("A_removeFirst_emptyList_testListIterPrev0SetA", testListPrevSet(A_removeFirst_emptyList(), ELEMENT_A, 0, 0, Result.IllegalState));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_removeFirst_emptyList");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> removeLast() -> [ ]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> removeLast() -> [ ]
	 * @return [ ] after removeLast()
	 */
	private IndexedUnsortedList<Integer> A_removeLast_emptyList() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.removeLast(); //the change
		return list; //return resulting state
	}
	
	/** Run all tests on scenario: [A] -> removeLast() -> [ ] */
	private void test_A_removeLast_emptyList() {
		
		System.out.println("\nSCENARIO: [A] -> removeLast() -> []\n");
		//try-catch prevents an Exception from the scenario builder 
		// method from bringing down the whole test suite
		try {
			printTest("A_removeLast_emptyList_testAddToFrontA", testAddToFront(A_removeLast_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_removeLast_emptyList_testAddToRearA", testAddToRear(A_removeLast_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_removeLast_emptyList_testAddAfterBA", testAddAfter(A_removeLast_emptyList(), ELEMENT_B, ELEMENT_A, Result.NoSuchElement));
			printTest("A_removeLast_emptyList_testAddAtIndexNeg1", testAddAtIndex(A_removeLast_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testAddAtIndex0", testAddAtIndex(A_removeLast_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_removeLast_emptyList_testAddAtIndex1", testAddAtIndex(A_removeLast_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testAddA", testAdd(A_removeLast_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_removeLast_emptyList_testRemoveFirst", testRemoveFirst(A_removeLast_emptyList(), null, Result.IllegalState));
			printTest("A_removeLast_emptyList_testRemoveLast", testRemoveLast(A_removeLast_emptyList(), null, Result.IllegalState));
			printTest("A_removeLast_emptyList_testRemoveA", testRemoveElement(A_removeLast_emptyList(), null, Result.NoSuchElement));
			printTest("A_removeLast_emptyList_testRemoveNeg1", testRemoveIndex(A_removeLast_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testRemove0", testRemoveIndex(A_removeLast_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testFirst", testFirst(A_removeLast_emptyList(), null, Result.IllegalState));
			printTest("A_removeLast_emptyList_testLast", testLast(A_removeLast_emptyList(), null, Result.IllegalState));
			printTest("A_removeLast_emptyList_testContainsA", testContains(A_removeLast_emptyList(), ELEMENT_A, Result.False));
			printTest("A_removeLast_emptyList_testIsEmpty", testIsEmpty(A_removeLast_emptyList(), Result.True));
			printTest("A_removeLast_emptyList_testSize", testSize(A_removeLast_emptyList(), 0));
			printTest("A_removeLast_emptyList_testToString", testToString(A_removeLast_emptyList(), Result.ValidString));
			printTest("A_removeLast_emptyList_testSetNeg1A", testSet(A_removeLast_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testSet0A", testSet(A_removeLast_emptyList(), 0, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testGetNeg1", testGet(A_removeLast_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testGet0", testGet(A_removeLast_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testIndexOfA", testIndexOf(A_removeLast_emptyList(), ELEMENT_A, -1));
			// Iterator
			printTest("A_removeLast_emptyList_testIter", testIter(A_removeLast_emptyList(), Result.NoException));
			printTest("A_removeLast_emptyList_testIterHasNext", testIterHasNext(A_removeLast_emptyList().iterator(), Result.False));
			printTest("A_removeLast_emptyList_testIterNext", testIterNext(A_removeLast_emptyList().iterator(), null, Result.NoSuchElement));
			printTest("A_removeLast_emptyList_testIterRemove", testIterRemove(A_removeLast_emptyList().iterator(), Result.IllegalState));
			// ListIterator
			printTest("A_removeLast_emptyList_testListIter", testListIter(A_removeLast_emptyList(), Result.NoException));
			printTest("A_removeLast_emptyList_testListIter", testListIter(A_removeLast_emptyList(), 0, Result.NoException));
			printTest("A_removeLast_emptyList_testListIterHasPrev", testListIterHasPrev(A_removeLast_emptyList(), 0, Result.False));
			printTest("A_removeLast_emptyList_testListIterPrev", testListIterPrev(A_removeLast_emptyList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_removeLast_emptyList_testListIterAddNeg1A", testListIterAdd(A_removeLast_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testListIterAdd0A", testListIterAdd(A_removeLast_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_removeLast_emptyList_testListIterAdd1A", testListIterAdd(A_removeLast_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testListIterNextIndex0", testListIterNextIndex(A_removeLast_emptyList(), 0, 0));
			printTest("A_removeLast_emptyList_testListIterPreviousIndex0", testListIterPrevIndex(A_removeLast_emptyList(), 0, -1));
			printTest("A_removeLast_emptyList_testListIterNext0AddA", testListNextAdd(A_removeLast_emptyList(), ELEMENT_A, 0, Result.NoException));
			printTest("A_removeLast_emptyList_testListIterNext1AddA", testListNextAdd(A_removeLast_emptyList(), ELEMENT_A, 1, Result.NoSuchElement));
			printTest("A_removeLast_emptyList_testListIterPrev0Index0AddA", testListPrevAdd(A_removeLast_emptyList(), ELEMENT_A, 0, 0, Result.NoException));
			printTest("A_removeLast_emptyList_testListIterPrev0Index1AddA", testListPrevAdd(A_removeLast_emptyList(), ELEMENT_A, 0, 1, Result.IndexOutOfBounds));
			printTest("A_removeLast_emptyList_testListIterPrev1Index0AddA", testListPrevAdd(A_removeLast_emptyList(), ELEMENT_A, 1, 0, Result.NoSuchElement));
			printTest("A_removeLast_emptyList_testListIterNext0SetA", testListNextSet(A_removeLast_emptyList(), ELEMENT_A, 0, Result.IllegalState));
			printTest("A_removeLast_emptyList_testListIterPrev0SetA", testListPrevSet(A_removeLast_emptyList(), ELEMENT_A, 0, 0, Result.IllegalState));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_removeLast_emptyList");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> remove(A) -> [ ]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> remove(A) -> [ ]
	 * @return [ ] after remove(A)
	 */
	private IndexedUnsortedList<Integer> A_removeA_emptyList() {

		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.remove(ELEMENT_A); //the change
		return list; //return resulting state
	}
	
	/** Run all tests on scenario: [A] -> remove(A) -> [ ] */
	private void test_A_removeA_emptyList() {
	
		System.out.println("\nSCENARIO: [A] -> remove(A) -> []\n");
		//try-catch prevents an Exception from the scenario builder 
		// method from bringing down the whole test suite
		try {
			printTest("A_removeA_emptyList_testAddToFrontA", testAddToFront(A_removeA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_removeA_emptyList_testAddToRearA", testAddToRear(A_removeA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_removeA_emptyList_testAddAfterBA", testAddAfter(A_removeA_emptyList(), ELEMENT_B, ELEMENT_A, Result.NoSuchElement));
			printTest("A_removeA_emptyList_testAddAtIndexNeg1", testAddAtIndex(A_removeA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testAddAtIndex0", testAddAtIndex(A_removeA_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_removeA_emptyList_testAddAtIndex1", testAddAtIndex(A_removeA_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testAddA", testAdd(A_removeA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_removeA_emptyList_testRemoveFirst", testRemoveFirst(A_removeA_emptyList(), null, Result.IllegalState));
			printTest("A_removeA_emptyList_testRemoveLast", testRemoveLast(A_removeA_emptyList(), null, Result.IllegalState));
			printTest("A_removeA_emptyList_testRemoveA", testRemoveElement(A_removeA_emptyList(), null, Result.NoSuchElement));
			printTest("A_removeA_emptyList_testRemoveNeg1", testRemoveIndex(A_removeA_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testRemove0", testRemoveIndex(A_removeA_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testFirst", testFirst(A_removeA_emptyList(), null, Result.IllegalState));
			printTest("A_removeA_emptyList_testLast", testLast(A_removeA_emptyList(), null, Result.IllegalState));
			printTest("A_removeA_emptyList_testContainsA", testContains(A_removeA_emptyList(), ELEMENT_A, Result.False));
			printTest("A_removeA_emptyList_testIsEmpty", testIsEmpty(A_removeA_emptyList(), Result.True));
			printTest("A_removeA_emptyList_testSize", testSize(A_removeA_emptyList(), 0));
			printTest("A_removeA_emptyList_testToString", testToString(A_removeA_emptyList(), Result.ValidString));
			printTest("A_removeA_emptyList_testSetNeg1A", testSet(A_removeA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testSet0A", testSet(A_removeA_emptyList(), 0, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testGetNeg1", testGet(A_removeA_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testGet0", testGet(A_removeA_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testIndexOfA", testIndexOf(A_removeA_emptyList(), ELEMENT_A, -1));
			// Iterator
			printTest("A_removeA_emptyList_testIter", testIter(A_removeA_emptyList(), Result.NoException));
			printTest("A_removeA_emptyList_testIterHasNext", testIterHasNext(A_removeA_emptyList().iterator(), Result.False));
			printTest("A_removeA_emptyList_testIterNext", testIterNext(A_removeA_emptyList().iterator(), null, Result.NoSuchElement));
			printTest("A_removeA_emptyList_testIterRemove", testIterRemove(A_removeA_emptyList().iterator(), Result.IllegalState));
			// ListIterator
			printTest("A_removeA_emptyList_testListIter", testListIter(A_removeA_emptyList(), Result.NoException));
			printTest("A_removeA_emptyList_testListIter", testListIter(A_removeA_emptyList(), 0, Result.NoException));
			printTest("A_removeA_emptyList_testListIterHasPrev", testListIterHasPrev(A_removeA_emptyList(), 0, Result.False));
			printTest("A_removeA_emptyList_testListIterPrev", testListIterPrev(A_removeA_emptyList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_removeA_emptyList_testListIterAddNeg1A", testListIterAdd(A_removeA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testListIterAdd0A", testListIterAdd(A_removeA_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_removeA_emptyList_testListIterAdd1A", testListIterAdd(A_removeA_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testListIterNextIndex0", testListIterNextIndex(A_removeA_emptyList(), 0, 0));
			printTest("A_removeA_emptyList_testListIterPreviousIndex0", testListIterPrevIndex(A_removeA_emptyList(), 0, -1));
			printTest("A_removeA_emptyList_testListIterNext0AddA", testListNextAdd(A_removeA_emptyList(), ELEMENT_A, 0, Result.NoException));
			printTest("A_removeA_emptyList_testListIterNext1AddA", testListNextAdd(A_removeA_emptyList(), ELEMENT_A, 1, Result.NoSuchElement));
			printTest("A_removeA_emptyList_testListIterPrev0Index0AddA", testListPrevAdd(A_removeA_emptyList(), ELEMENT_A, 0, 0, Result.NoException));
			printTest("A_removeA_emptyList_testListIterPrev0Index1AddA", testListPrevAdd(A_removeA_emptyList(), ELEMENT_A, 0, 1, Result.IndexOutOfBounds));
			printTest("A_removeA_emptyList_testListIterPrev1Index0AddA", testListPrevAdd(A_removeA_emptyList(), ELEMENT_A, 1, 0, Result.NoSuchElement));
			printTest("A_removeA_emptyList_testListIterNext0SetA", testListNextSet(A_removeA_emptyList(), ELEMENT_A, 0, Result.IllegalState));
			printTest("A_removeA_emptyList_testListIterPrev0SetA", testListPrevSet(A_removeA_emptyList(), ELEMENT_A, 0, 0, Result.IllegalState));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_removeA_emptyList");
			e.printStackTrace();
		}
	}
	
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> remove(0) -> [ ]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> remove(0) -> [ ]
	 * @return [ ] after remove(0)
	 */
	private IndexedUnsortedList<Integer> A_remove0_emptyList() {
	
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.remove(0); //the change
		return list; //return resulting state
	}
	
	
	private void test_A_remove0_emptyList() {
	
		System.out.println("\nSCENARIO: [A] -> remove0 -> []\n");
		//try-catch prevents an Exception from the scenario builder 
		// method from bringing down the whole test suite
		try {
			printTest("A_remove0_emptyList_testAddToFrontA", testAddToFront(A_remove0_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_remove0_emptyList_testAddToRearA", testAddToRear(A_remove0_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_remove0_emptyList_testAddAfterBA", testAddAfter(A_remove0_emptyList(), ELEMENT_B, ELEMENT_A, Result.NoSuchElement));
			printTest("A_remove0_emptyList_testAddAtIndexNeg1", testAddAtIndex(A_remove0_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testAddAtIndex0", testAddAtIndex(A_remove0_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_remove0_emptyList_testAddAtIndex1", testAddAtIndex(A_remove0_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testAddA", testAdd(A_remove0_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_remove0_emptyList_testRemoveFirst", testRemoveFirst(A_remove0_emptyList(), null, Result.IllegalState));
			printTest("A_remove0_emptyList_testRemoveLast", testRemoveLast(A_remove0_emptyList(), null, Result.IllegalState));
			printTest("A_remove0_emptyList_testRemoveA", testRemoveElement(A_remove0_emptyList(), null, Result.NoSuchElement));
			printTest("A_remove0_emptyList_testRemoveNeg1", testRemoveIndex(A_remove0_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testRemove0", testRemoveIndex(A_remove0_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testFirst", testFirst(A_remove0_emptyList(), null, Result.IllegalState));
			printTest("A_remove0_emptyList_testLast", testLast(A_remove0_emptyList(), null, Result.IllegalState));
			printTest("A_remove0_emptyList_testContainsA", testContains(A_remove0_emptyList(), ELEMENT_A, Result.False));
			printTest("A_remove0_emptyList_testIsEmpty", testIsEmpty(A_remove0_emptyList(), Result.True));
			printTest("A_remove0_emptyList_testSize", testSize(A_remove0_emptyList(), 0));
			printTest("A_remove0_emptyList_testToString", testToString(A_remove0_emptyList(), Result.ValidString));
			printTest("A_remove0_emptyList_testSetNeg1A", testSet(A_remove0_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testSet0A", testSet(A_remove0_emptyList(), 0, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testGetNeg1", testGet(A_remove0_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testGet0", testGet(A_remove0_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testIndexOfA", testIndexOf(A_remove0_emptyList(), ELEMENT_A, -1));
			// Iterator
			printTest("A_remove0_emptyList_testIter", testIter(A_remove0_emptyList(), Result.NoException));
			printTest("A_remove0_emptyList_testIterHasNext", testIterHasNext(A_remove0_emptyList().iterator(), Result.False));
			printTest("A_remove0_emptyList_testIterNext", testIterNext(A_remove0_emptyList().iterator(), null, Result.NoSuchElement));
			printTest("A_remove0_emptyList_testIterRemove", testIterRemove(A_remove0_emptyList().iterator(), Result.IllegalState));
			// ListIterator
			printTest("A_remove0_emptyList_testListIter", testListIter(A_remove0_emptyList(), Result.NoException));
			printTest("A_remove0_emptyList_testListIter", testListIter(A_remove0_emptyList(), 0, Result.NoException));
			printTest("A_remove0_emptyList_testListIterHasPrev", testListIterHasPrev(A_remove0_emptyList(), 0, Result.False));
			printTest("A_remove0_emptyList_testListIterPrev", testListIterPrev(A_remove0_emptyList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_remove0_emptyList_testListIterAddNeg1A", testListIterAdd(A_remove0_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testListIterAdd0A", testListIterAdd(A_remove0_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_remove0_emptyList_testListIterAdd1A", testListIterAdd(A_remove0_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testListIterNextIndex0", testListIterNextIndex(A_remove0_emptyList(), 0, 0));
			printTest("A_remove0_emptyList_testListIterPreviousIndex0", testListIterPrevIndex(A_remove0_emptyList(), 0, -1));
			printTest("A_remove0_emptyList_testListIterNext0AddA", testListNextAdd(A_remove0_emptyList(), ELEMENT_A, 0, Result.NoException));
			printTest("A_remove0_emptyList_testListIterNext1AddA", testListNextAdd(A_remove0_emptyList(), ELEMENT_A, 1, Result.NoSuchElement));
			printTest("A_remove0_emptyList_testListIterPrev0Index0AddA", testListPrevAdd(A_remove0_emptyList(), ELEMENT_A, 0, 0, Result.NoException));
			printTest("A_remove0_emptyList_testListIterPrev0Index1AddA", testListPrevAdd(A_remove0_emptyList(), ELEMENT_A, 0, 1, Result.IndexOutOfBounds));
			printTest("A_remove0_emptyList_testListIterPrev1Index0AddA", testListPrevAdd(A_remove0_emptyList(), ELEMENT_A, 1, 0, Result.NoSuchElement));
			printTest("A_remove0_emptyList_testListIterNext0SetA", testListNextSet(A_remove0_emptyList(), ELEMENT_A, 0, Result.IllegalState));
			printTest("A_remove0_emptyList_testListIterPrev0SetA", testListPrevSet(A_remove0_emptyList(), ELEMENT_A, 0, 0, Result.IllegalState));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_remove0_emptyList");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> set(0,B) -> [B]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> set(0,B) -> [B]
	 * @return [B] after set(0,B)
	 */
	private IndexedUnsortedList<Integer> A_set0B_B() {

		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); //starting state 
		list.set(0,ELEMENT_B); //the change
		return list; //return resulting state
	}
	
	private void test_A_set0B_B() {
		System.out.println("\nSCENARIO: [A] -> set(0,B) -> [B]\n");
		try {
			printTest("A_set0B_B_testAddToFrontA", testAddToFront(A_set0B_B(), ELEMENT_A, Result.NoException));
			printTest("A_set0B_B_testAddToRearA", testAddToRear(A_set0B_B(), ELEMENT_A, Result.NoException));
			printTest("A_set0B_B_testAddAfterBA", testAddAfter(A_set0B_B(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("A_set0B_B_testAddAfterCA", testAddAfter(A_set0B_B(), ELEMENT_C, ELEMENT_A, Result.NoSuchElement));
			printTest("A_set0B_B_testAddAtIndexNeg1A", testAddAtIndex(A_set0B_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_set0B_B_testAddAtIndex0A", testAddAtIndex(A_set0B_B(), 0, ELEMENT_A, Result.NoException));
			printTest("A_set0B_B_testAddAtIndex1A", testAddAtIndex(A_set0B_B(), 1, ELEMENT_A, Result.NoException));
			printTest("A_set0B_B_testAddB", testAdd(A_set0B_B(), ELEMENT_A, Result.NoException));
			printTest("A_set0B_B_testRemoveFirst", testRemoveFirst(A_set0B_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_set0B_B_testRemoveLast", testRemoveLast(A_set0B_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_set0B_B_testRemoveA", testRemoveElement(A_set0B_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_set0B_B_testRemoveB", testRemoveElement(A_set0B_B(), ELEMENT_A, Result.NoSuchElement));
			printTest("A_set0B_B_testRemoveNeg1", testRemoveIndex(A_set0B_B(), -1, null, Result.IndexOutOfBounds));
			printTest("A_set0B_B_testRemove0", testRemoveIndex(A_set0B_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_set0B_B_testRemove1", testRemoveIndex(A_set0B_B(), 1, null, Result.IndexOutOfBounds));
			printTest("A_set0B_B_testFirst", testFirst(A_set0B_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_set0B_B_testLast", testLast(A_set0B_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_set0B_B_testContainsA", testContains(A_set0B_B(), ELEMENT_B, Result.True));
			printTest("A_set0B_B_testContainsB", testContains(A_set0B_B(), ELEMENT_A, Result.False));
			printTest("A_set0B_B_testIsEmpty", testIsEmpty(A_set0B_B(), Result.False));
			printTest("A_set0B_B_testSize", testSize(A_set0B_B(), 1));
			printTest("A_set0B_B_testToString", testToString(A_set0B_B(), Result.ValidString));			
			printTest("A_set0B_B_testSetNeg1A", testSet(A_set0B_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_set0B_B_testSet0A", testSet(A_set0B_B(), 0, ELEMENT_A, Result.NoException));
			printTest("A_set0B_B_testGetNeg1", testGet(A_set0B_B(), -1, null, Result.IndexOutOfBounds));
			printTest("A_set0B_B_testGet0", testGet(A_set0B_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_set0B_B_testIndexOfA", testIndexOf(A_set0B_B(), ELEMENT_A, -1));
			printTest("A_set0B_B_testIndexOfB", testIndexOf(A_set0B_B(), ELEMENT_B, 0));
			// Iterator
			printTest("A_set0B_B_testIter", testIter(A_set0B_B(), Result.NoException));
			printTest("A_set0B_B_testIterHasNext", testIterHasNext(A_set0B_B().iterator(), Result.True));
			printTest("A_set0B_B_testIterNext", testIterNext(A_set0B_B().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("A_set0B_B_testIterRemove", testIterRemove(A_set0B_B().iterator(), Result.IllegalState));
			printTest("A_set0B_B_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(A_set0B_B(), 1), Result.False));
			printTest("A_set0B_B_iteratorNext_testIterNext", testIterNext(iterAfterNext(A_set0B_B(), 1), null, Result.NoSuchElement));
			printTest("A_set0B_B_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(A_set0B_B(), 1), Result.NoException));
			printTest("A_set0B_B_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_set0B_B(), 1)), Result.False));
			printTest("A_set0B_B_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_set0B_B(), 1)), null, Result.NoSuchElement));
			printTest("A_set0B_B_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_set0B_B(), 1)), Result.IllegalState));
			// ListIterator
			printTest("A_set0B_B_testListIter", testListIter(A_set0B_B(), Result.NoException));
			printTest("A_set0B_B_testListIter", testListIter(A_set0B_B(), 0, Result.NoException));
			printTest("A_set0B_B_testListIterHasPrev", testListIterHasPrev(A_set0B_B(), 0, Result.False));
			printTest("A_set0B_B_testListIterHasPrev", testListIterHasPrev(A_set0B_B(), 1, Result.True));
			printTest("A_set0B_B_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_B, Result.NoSuchElement));
			printTest("A_set0B_B_testListIter1Prev1", testListIterPrev(A_set0B_B(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_set0B_B_testListIterAddNeg1B", testListIterAdd(A_set0B_B(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("A_set0B_B_testListIterAdd0B", testListIterAdd(A_set0B_B(), 0, ELEMENT_B, Result.NoException));
			printTest("A_set0B_B_testListIterAdd1B", testListIterAdd(A_set0B_B(), 1, ELEMENT_B, Result.NoException));
			printTest("A_set0B_B_testListIterAdd2B", testListIterAdd(A_set0B_B(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("A_set0B_B_testListIterNextIndex0", testListIterNextIndex(A_set0B_B(), 0, 0));
			printTest("A_set0B_B_testListIterNextIndex1", testListIterNextIndex(A_set0B_B(), 1, 1));
			printTest("A_set0B_B_testListIterPreviousIndex0", testListIterPrevIndex(A_set0B_B(), 0, -1));
			printTest("A_set0B_B_testListIterPreviousIndex1", testListIterPrevIndex(A_set0B_B(), 1, 0));
			printTest("A_set0B_B_testListIterNext0AddB", testListNextAdd(A_set0B_B(), ELEMENT_B, 0, Result.NoException));
			printTest("A_set0B_B_testListIterNext1AddB", testListNextAdd(A_set0B_B(), ELEMENT_B, 1, Result.NoException));
			printTest("A_set0B_B_testListIterNext2AddB", testListNextAdd(A_set0B_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("A_set0B_B_testListIterPrev1Index0AddB", testListPrevAdd(A_set0B_B(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("A_set0B_B_testListIterPrev0Index0AddB", testListPrevAdd(A_set0B_B(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("A_set0B_B_testListIterPrev0Index1AddB", testListPrevAdd(A_set0B_B(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("A_set0B_B_testListIterPrev1Index1AddB", testListPrevAdd(A_set0B_B(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("A_set0B_B_testListIterPrev0Index2AddB", testListPrevAdd(A_set0B_B(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("A_set0B_B_testListIterNext0SetB", testListNextSet(A_set0B_B(), ELEMENT_B, 0, Result.IllegalState));
			printTest("A_set0B_B_testListIterNext1SetB", testListNextSet(A_set0B_B(), ELEMENT_B, 1, Result.NoException));
			printTest("A_set0B_B_testListIterNext2SetB", testListNextSet(A_set0B_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("A_set0B_B_testListIterPrev0SetB", testListPrevSet(A_set0B_B(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("A_set0B_B_testListIterPrev1SetB", testListPrevSet(A_set0B_B(), ELEMENT_B, 1, 1, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_set0B_B");
			e.printStackTrace();
		}
	}

	
	////////////////////////////////////////////////
	// XXX SCENARIO:[A,B] -> addToFront(C) -> [C,A,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> addToFront(C) -> [C,A,B]
	 * @return [C,A,B] after addToFront(C)
	 */
	private IndexedUnsortedList<Integer> AB_addToFrontC_CAB() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.addToFront(ELEMENT_C); //the change
		return list; //return resulting state
	}
	
	private void test_AB_addToFrontC_CAB() {
		System.out.println("\nSCENARIO: [A,B] -> addToFront(C) -> [C,A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_addToFrontC_CAB_testAddToFrontD", testAddToFront(AB_addToFrontC_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testAddToRearD", testAddToRear(AB_addToFrontC_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testAddAfterAD", testAddAfter(AB_addToFrontC_CAB(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testAddAfterBD", testAddAfter(AB_addToFrontC_CAB(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testAddAfterCD", testAddAfter(AB_addToFrontC_CAB(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testAddAfterDD", testAddAfter(AB_addToFrontC_CAB(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_addToFrontC_CAB_testAddAtIndexNeg1D", testAddAtIndex(AB_addToFrontC_CAB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testAddAtIndex0C", testAddAtIndex(AB_addToFrontC_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testAddAtIndex1D", testAddAtIndex(AB_addToFrontC_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testAddAtIndex2D", testAddAtIndex(AB_addToFrontC_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testAddAtIndex3D", testAddAtIndex(AB_addToFrontC_CAB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testAddAtIndex3D", testAddAtIndex(AB_addToFrontC_CAB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testAddC", testAdd(AB_addToFrontC_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testRemoveFirst", testRemoveFirst(AB_addToFrontC_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testRemoveLast", testRemoveLast(AB_addToFrontC_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testRemoveA", testRemoveElement(AB_addToFrontC_CAB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testRemoveB", testRemoveElement(AB_addToFrontC_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testRemoveB", testRemoveElement(AB_addToFrontC_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testRemoveC", testRemoveElement(AB_addToFrontC_CAB(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_addToFrontC_CAB_testRemoveNeg1", testRemoveIndex(AB_addToFrontC_CAB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testRemove0", testRemoveIndex(AB_addToFrontC_CAB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testRemove1", testRemoveIndex(AB_addToFrontC_CAB(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testRemove2", testRemoveIndex(AB_addToFrontC_CAB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testRemove3", testRemoveIndex(AB_addToFrontC_CAB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testFirst", testFirst(AB_addToFrontC_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testLast", testLast(AB_addToFrontC_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testContainsA", testContains(AB_addToFrontC_CAB(), ELEMENT_A, Result.True));
			printTest("AB_addToFrontC_CAB_testContainsB", testContains(AB_addToFrontC_CAB(), ELEMENT_B, Result.True));
			printTest("AB_addToFrontC_CAB_testContainsC", testContains(AB_addToFrontC_CAB(), ELEMENT_C, Result.True));
			printTest("AB_addToFrontC_CAB_testContainsC", testContains(AB_addToFrontC_CAB(), ELEMENT_D, Result.False));
			printTest("AB_addToFrontC_CAB_testIsEmpty", testIsEmpty(AB_addToFrontC_CAB(), Result.False));
			printTest("AB_addToFrontC_CAB_testSize", testSize(AB_addToFrontC_CAB(), 3));
			printTest("AB_addToFrontC_CAB_testToString", testToString(AB_addToFrontC_CAB(), Result.ValidString));
			printTest("AB_addToFrontC_CAB_testSetNeg1D", testSet(AB_addToFrontC_CAB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testSet0D", testSet(AB_addToFrontC_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testSet1D", testSet(AB_addToFrontC_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testSet2D", testSet(AB_addToFrontC_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testSet3D", testSet(AB_addToFrontC_CAB(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testGetNeg1", testGet(AB_addToFrontC_CAB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testGet0", testGet(AB_addToFrontC_CAB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testGet1", testGet(AB_addToFrontC_CAB(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testGet2", testGet(AB_addToFrontC_CAB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testGet3", testGet(AB_addToFrontC_CAB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testIndexOfA", testIndexOf(AB_addToFrontC_CAB(), ELEMENT_A, 1));
			printTest("AB_addToFrontC_CAB_testIndexOfB", testIndexOf(AB_addToFrontC_CAB(), ELEMENT_B, 2));
			printTest("AB_addToFrontC_CAB_testIndexOfC", testIndexOf(AB_addToFrontC_CAB(), ELEMENT_C, 0));
			printTest("AB_addToFrontC_CAB_testIndexOfD", testIndexOf(AB_addToFrontC_CAB(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_addToFrontC_CAB_testIter", testIter(AB_addToFrontC_CAB(), Result.NoException));
			printTest("AB_addToFrontC_CAB_testIterHasNext", testIterHasNext(AB_addToFrontC_CAB().iterator(), Result.True));
			printTest("AB_addToFrontC_CAB_testIterNext", testIterNext(AB_addToFrontC_CAB().iterator(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testIterRemove", testIterRemove(AB_addToFrontC_CAB().iterator(), Result.IllegalState));
			printTest("AB_addToFrontC_CAB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_addToFrontC_CAB(), 1), Result.True));
			printTest("AB_addToFrontC_CAB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_addToFrontC_CAB(), 1), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_addToFrontC_CAB(), 1), Result.NoException));
			printTest("AB_addToFrontC_CAB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_addToFrontC_CAB(), 1)), Result.True));
			printTest("AB_addToFrontC_CAB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_addToFrontC_CAB(), 1)), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_addToFrontC_CAB(), 1)), Result.IllegalState));
			printTest("AB_addToFrontC_CAB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_addToFrontC_CAB(), 2), Result.True));
			printTest("AB_addToFrontC_CAB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_addToFrontC_CAB(), 2), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_addToFrontC_CAB(), 2), Result.NoException));
			printTest("AB_addToFrontC_CAB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_addToFrontC_CAB(), 3)), Result.False));
			printTest("AB_addToFrontC_CAB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_addToFrontC_CAB(), 3)), null, Result.NoSuchElement));
			printTest("AB_addToFrontC_CAB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_addToFrontC_CAB(), 3)), Result.IllegalState));
			// ListIterator
			printTest("AB_addToFrontC_CAB_testListIter", testListIter(AB_addToFrontC_CAB(), Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIter", testListIter(AB_addToFrontC_CAB(), 0, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterHas0Prev", testListIterHasPrev(AB_addToFrontC_CAB(), 0, Result.False));
			printTest("AB_addToFrontC_CAB_testListIterHas1Prev", testListIterHasPrev(AB_addToFrontC_CAB(), 1, Result.True));
			printTest("AB_addToFrontC_CAB_testListIterHas2Prev", testListIterHasPrev(AB_addToFrontC_CAB(), 2, Result.True));
			printTest("AB_addToFrontC_CAB_testListIterHas3Prev", testListIterHasPrev(AB_addToFrontC_CAB(), 3, Result.True));
			printTest("AB_addToFrontC_CAB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_addToFrontC_CAB_testListIter1Prev1", testListIterPrev(AB_addToFrontC_CAB(), 1, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testListIter2Prev2", testListIterPrev(AB_addToFrontC_CAB(), 2, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testListIter2Prev1", testListIterPrev(AB_addToFrontC_CAB(), 2, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testListIter3Prev1", testListIterPrev(AB_addToFrontC_CAB(), 3, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testListIter3Prev2", testListIterPrev(AB_addToFrontC_CAB(), 3, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testListIter3Prev3", testListIterPrev(AB_addToFrontC_CAB(), 3, 3, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToFrontC_CAB_testListIterAddNeg1D", testListIterAdd(AB_addToFrontC_CAB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testListIterAdd0D", testListIterAdd(AB_addToFrontC_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterAdd1D", testListIterAdd(AB_addToFrontC_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterAdd2D", testListIterAdd(AB_addToFrontC_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterAdd3D", testListIterAdd(AB_addToFrontC_CAB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterAdd4D", testListIterAdd(AB_addToFrontC_CAB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testListIterNextIndex0", testListIterNextIndex(AB_addToFrontC_CAB(), 0, 0));
			printTest("AB_addToFrontC_CAB_testListIterNextIndex1", testListIterNextIndex(AB_addToFrontC_CAB(), 1, 1));
			printTest("AB_addToFrontC_CAB_testListIterNextIndex2", testListIterNextIndex(AB_addToFrontC_CAB(), 2, 2));
			printTest("AB_addToFrontC_CAB_testListIterNextIndex3", testListIterNextIndex(AB_addToFrontC_CAB(), 3, 3));
			printTest("AB_addToFrontC_CAB_testListIterPreviousIndex0", testListIterPrevIndex(AB_addToFrontC_CAB(), 0, -1));
			printTest("AB_addToFrontC_CAB_testListIterPreviousIndex1", testListIterPrevIndex(AB_addToFrontC_CAB(), 1, 0));
			printTest("AB_addToFrontC_CAB_testListIterPreviousIndex2", testListIterPrevIndex(AB_addToFrontC_CAB(), 2, 1));
			printTest("AB_addToFrontC_CAB_testListIterPreviousIndex3", testListIterPrevIndex(AB_addToFrontC_CAB(), 3, 2));
			printTest("AB_addToFrontC_CAB_testListIterNext0AddD", testListNextAdd(AB_addToFrontC_CAB(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterNext1AddD", testListNextAdd(AB_addToFrontC_CAB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterNext2AddD", testListNextAdd(AB_addToFrontC_CAB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterNext3AddD", testListNextAdd(AB_addToFrontC_CAB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterNext4AddD", testListNextAdd(AB_addToFrontC_CAB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_addToFrontC_CAB_testListIterPrev1Index0AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_addToFrontC_CAB_testListIterPrev0Index0AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev0Index1AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev1Index1AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev0Index2AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev1Index2AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev2Index2AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev0Index3AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev1Index3AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev2Index3AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev3Index3AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev0Index4AddD", testListPrevAdd(AB_addToFrontC_CAB(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_addToFrontC_CAB_testListIterNext0SetD", testListNextSet(AB_addToFrontC_CAB(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_addToFrontC_CAB_testListIterNext1SetD", testListNextSet(AB_addToFrontC_CAB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterNext2SetD", testListNextSet(AB_addToFrontC_CAB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterNext3SetD", testListNextSet(AB_addToFrontC_CAB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterNext4SetD", testListNextSet(AB_addToFrontC_CAB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_addToFrontC_CAB_testListIterPrev0SetD", testListPrevSet(AB_addToFrontC_CAB(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_addToFrontC_CAB_testListIterPrev1SetD", testListPrevSet(AB_addToFrontC_CAB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev2SetD", testListPrevSet(AB_addToFrontC_CAB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_addToFrontC_CAB_testListIterPrev3SetD", testListPrevSet(AB_addToFrontC_CAB(), ELEMENT_D, 3, 3, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_addToFrontC_CAB");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO:[A,B] -> addToRear(C) -> [A,B,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> addToRear(C) -> [A,B,C]
	 * @return [A,B,C] after addToRear(C)
	 */
	private IndexedUnsortedList<Integer> AB_addToRearC_ABC() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.addToRear(ELEMENT_C); //the change
		return list; //return resulting state
	}
	
	private void test_AB_addToRearC_ABC() {
		System.out.println("\nSCENARIO: [A,B] -> addToRear(C) -> [A,B,C]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_addToRearC_ABC_testAddToFrontD", testAddToFront(AB_addToRearC_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testAddToRearD", testAddToRear(AB_addToRearC_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testAddAfterAD", testAddAfter(AB_addToRearC_ABC(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testAddAfterBD", testAddAfter(AB_addToRearC_ABC(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testAddAfterCD", testAddAfter(AB_addToRearC_ABC(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testAddAfterDD", testAddAfter(AB_addToRearC_ABC(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_addToRearC_ABC_testAddAtIndexNeg1D", testAddAtIndex(AB_addToRearC_ABC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testAddAtIndex0D", testAddAtIndex(AB_addToRearC_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testAddAtIndex1D", testAddAtIndex(AB_addToRearC_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testAddAtIndex2D", testAddAtIndex(AB_addToRearC_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testAddAtIndex3D", testAddAtIndex(AB_addToRearC_ABC(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testAddAtIndex3D", testAddAtIndex(AB_addToRearC_ABC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testAddC", testAdd(AB_addToRearC_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testRemoveFirst", testRemoveFirst(AB_addToRearC_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testRemoveLast", testRemoveLast(AB_addToRearC_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testRemoveA", testRemoveElement(AB_addToRearC_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testRemoveB", testRemoveElement(AB_addToRearC_ABC(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testRemoveC", testRemoveElement(AB_addToRearC_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testRemoveD", testRemoveElement(AB_addToRearC_ABC(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_addToRearC_ABC_testRemoveNeg1", testRemoveIndex(AB_addToRearC_ABC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testRemove0", testRemoveIndex(AB_addToRearC_ABC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testRemove1", testRemoveIndex(AB_addToRearC_ABC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testRemove2", testRemoveIndex(AB_addToRearC_ABC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testRemove3", testRemoveIndex(AB_addToRearC_ABC(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testFirst", testFirst(AB_addToRearC_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testLast", testLast(AB_addToRearC_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testContainsA", testContains(AB_addToRearC_ABC(), ELEMENT_A, Result.True));
			printTest("AB_addToRearC_ABC_testContainsB", testContains(AB_addToRearC_ABC(), ELEMENT_B, Result.True));
			printTest("AB_addToRearC_ABC_testContainsC", testContains(AB_addToRearC_ABC(), ELEMENT_C, Result.True));
			printTest("AB_addToRearC_ABC_testContainsC", testContains(AB_addToRearC_ABC(), ELEMENT_D, Result.False));
			printTest("AB_addToRearC_ABC_testIsEmpty", testIsEmpty(AB_addToRearC_ABC(), Result.False));
			printTest("AB_addToRearC_ABC_testSize", testSize(AB_addToRearC_ABC(), 3));
			printTest("AB_addToRearC_ABC_testToString", testToString(AB_addToRearC_ABC(), Result.ValidString));
			printTest("AB_addToRearC_ABC_testSetNeg1D", testSet(AB_addToRearC_ABC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testSet0D", testSet(AB_addToRearC_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testSet1D", testSet(AB_addToRearC_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testSet2D", testSet(AB_addToRearC_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testSet3D", testSet(AB_addToRearC_ABC(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testGetNeg1", testGet(AB_addToRearC_ABC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testGet0", testGet(AB_addToRearC_ABC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testGet1", testGet(AB_addToRearC_ABC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testGet2", testGet(AB_addToRearC_ABC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testGet3", testGet(AB_addToRearC_ABC(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testIndexOfA", testIndexOf(AB_addToRearC_ABC(), ELEMENT_A, 0));
			printTest("AB_addToRearC_ABC_testIndexOfB", testIndexOf(AB_addToRearC_ABC(), ELEMENT_B, 1));
			printTest("AB_addToRearC_ABC_testIndexOfC", testIndexOf(AB_addToRearC_ABC(), ELEMENT_C, 2));
			printTest("AB_addToRearC_ABC_testIndexOfD", testIndexOf(AB_addToRearC_ABC(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_addToRearC_ABC_testIter", testIter(AB_addToRearC_ABC(), Result.NoException));
			printTest("AB_addToRearC_ABC_testIterHasNext", testIterHasNext(AB_addToRearC_ABC().iterator(), Result.True));
			printTest("AB_addToRearC_ABC_testIterNext", testIterNext(AB_addToRearC_ABC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testIterRemove", testIterRemove(AB_addToRearC_ABC().iterator(), Result.IllegalState));
			printTest("AB_addToRearC_ABC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_addToRearC_ABC(), 1), Result.True));
			printTest("AB_addToRearC_ABC_iterNext_testIterNext", testIterNext(iterAfterNext(AB_addToRearC_ABC(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_addToRearC_ABC(), 1), Result.NoException));
			printTest("AB_addToRearC_ABC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_addToRearC_ABC(), 1)), Result.True));
			printTest("AB_addToRearC_ABC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_addToRearC_ABC(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_addToRearC_ABC(), 1)), Result.IllegalState));
			printTest("AB_addToRearC_ABC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_addToRearC_ABC(), 2), Result.True));
			printTest("AB_addToRearC_ABC_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_addToRearC_ABC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_addToRearC_ABC(), 2), Result.NoException));
			printTest("AB_addToRearC_ABC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_addToRearC_ABC(), 3)), Result.False));
			printTest("AB_addToRearC_ABC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_addToRearC_ABC(), 3)), null, Result.NoSuchElement));
			printTest("AB_addToRearC_ABC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_addToRearC_ABC(), 3)), Result.IllegalState));
			// ListIterator
			printTest("AB_addToRearC_ABC_testListIter", testListIter(AB_addToRearC_ABC(), Result.NoException));
			printTest("AB_addToRearC_ABC_testListIter", testListIter(AB_addToRearC_ABC(), 0, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterHas0Prev", testListIterHasPrev(AB_addToRearC_ABC(), 0, Result.False));
			printTest("AB_addToRearC_ABC_testListIterHas1Prev", testListIterHasPrev(AB_addToRearC_ABC(), 1, Result.True));
			printTest("AB_addToRearC_ABC_testListIterHas2Prev", testListIterHasPrev(AB_addToRearC_ABC(), 2, Result.True));
			printTest("AB_addToRearC_ABC_testListIterHas3Prev", testListIterHasPrev(AB_addToRearC_ABC(), 3, Result.True));
			printTest("AB_addToRearC_ABC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_addToRearC_ABC_testListIter1Prev1", testListIterPrev(AB_addToRearC_ABC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testListIter2Prev2", testListIterPrev(AB_addToRearC_ABC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testListIter2Prev1", testListIterPrev(AB_addToRearC_ABC(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testListIter3Prev1", testListIterPrev(AB_addToRearC_ABC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testListIter3Prev2", testListIterPrev(AB_addToRearC_ABC(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testListIter3Prev3", testListIterPrev(AB_addToRearC_ABC(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addToRearC_ABC_testListIterAddNeg1D", testListIterAdd(AB_addToRearC_ABC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testListIterAdd0D", testListIterAdd(AB_addToRearC_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterAdd1D", testListIterAdd(AB_addToRearC_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterAdd2D", testListIterAdd(AB_addToRearC_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterAdd3D", testListIterAdd(AB_addToRearC_ABC(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterAdd4D", testListIterAdd(AB_addToRearC_ABC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testListIterNextIndex0", testListIterNextIndex(AB_addToRearC_ABC(), 0, 0));
			printTest("AB_addToRearC_ABC_testListIterNextIndex1", testListIterNextIndex(AB_addToRearC_ABC(), 1, 1));
			printTest("AB_addToRearC_ABC_testListIterNextIndex2", testListIterNextIndex(AB_addToRearC_ABC(), 2, 2));
			printTest("AB_addToRearC_ABC_testListIterNextIndex3", testListIterNextIndex(AB_addToRearC_ABC(), 3, 3));
			printTest("AB_addToRearC_ABC_testListIterPreviousIndex0", testListIterPrevIndex(AB_addToRearC_ABC(), 0, -1));
			printTest("AB_addToRearC_ABC_testListIterPreviousIndex1", testListIterPrevIndex(AB_addToRearC_ABC(), 1, 0));
			printTest("AB_addToRearC_ABC_testListIterPreviousIndex2", testListIterPrevIndex(AB_addToRearC_ABC(), 2, 1));
			printTest("AB_addToRearC_ABC_testListIterPreviousIndex3", testListIterPrevIndex(AB_addToRearC_ABC(), 3, 2));
			printTest("AB_addToRearC_ABC_testListIterNext0AddD", testListNextAdd(AB_addToRearC_ABC(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterNext1AddD", testListNextAdd(AB_addToRearC_ABC(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterNext2AddD", testListNextAdd(AB_addToRearC_ABC(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterNext3AddD", testListNextAdd(AB_addToRearC_ABC(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterNext4AddD", testListNextAdd(AB_addToRearC_ABC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_addToRearC_ABC_testListIterPrev1Index0AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_addToRearC_ABC_testListIterPrev0Index0AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev0Index1AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev1Index1AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev0Index2AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev1Index2AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev2Index2AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev0Index3AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev1Index3AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev2Index3AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev3Index3AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev0Index4AddD", testListPrevAdd(AB_addToRearC_ABC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_addToRearC_ABC_testListIterNext0SetD", testListNextSet(AB_addToRearC_ABC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_addToRearC_ABC_testListIterNext1SetD", testListNextSet(AB_addToRearC_ABC(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterNext2SetD", testListNextSet(AB_addToRearC_ABC(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterNext3SetD", testListNextSet(AB_addToRearC_ABC(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterNext4SetD", testListNextSet(AB_addToRearC_ABC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_addToRearC_ABC_testListIterPrev0SetD", testListPrevSet(AB_addToRearC_ABC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_addToRearC_ABC_testListIterPrev1SetD", testListPrevSet(AB_addToRearC_ABC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev2SetD", testListPrevSet(AB_addToRearC_ABC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_addToRearC_ABC_testListIterPrev3SetD", testListPrevSet(AB_addToRearC_ABC(), ELEMENT_D, 3, 3, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_addToRearC_ABC");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO:[A,B] -> addAfter(C,A) -> [A,C,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> addAfter(C,A) -> [A,C,B]
	 * @return [A,C,B] after addAfter(C,A)
	 */
	private IndexedUnsortedList<Integer> AB_addAfterCA_ACB() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.addAfter(ELEMENT_C,ELEMENT_A); //the change
		return list; //return resulting state
	}
	
	private void test_AB_addAfterCA_ACB() {
		System.out.println("\nSCENARIO: [A,B] -> addAfter(C,A) -> [A,C,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_addAfterCA_ACB_testAddToFrontD", testAddToFront(AB_addAfterCA_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testAddToRearD", testAddToRear(AB_addAfterCA_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testAddAfterAD", testAddAfter(AB_addAfterCA_ACB(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testAddAfterBD", testAddAfter(AB_addAfterCA_ACB(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testAddAfterCD", testAddAfter(AB_addAfterCA_ACB(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testAddAfterDD", testAddAfter(AB_addAfterCA_ACB(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_addAfterCA_ACB_testAddAtIndexNeg1D", testAddAtIndex(AB_addAfterCA_ACB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testAddAtIndex0D", testAddAtIndex(AB_addAfterCA_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testAddAtIndex1D", testAddAtIndex(AB_addAfterCA_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testAddAtIndex2D", testAddAtIndex(AB_addAfterCA_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testAddAtIndex3D", testAddAtIndex(AB_addAfterCA_ACB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testAddAtIndex4D", testAddAtIndex(AB_addAfterCA_ACB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testAddD", testAdd(AB_addAfterCA_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testRemoveFirst", testRemoveFirst(AB_addAfterCA_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testRemoveLast", testRemoveLast(AB_addAfterCA_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testRemoveA", testRemoveElement(AB_addAfterCA_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testRemoveB", testRemoveElement(AB_addAfterCA_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testRemoveB", testRemoveElement(AB_addAfterCA_ACB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testRemoveC", testRemoveElement(AB_addAfterCA_ACB(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_addAfterCA_ACB_testRemoveNeg1", testRemoveIndex(AB_addAfterCA_ACB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testRemove0", testRemoveIndex(AB_addAfterCA_ACB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testRemove1", testRemoveIndex(AB_addAfterCA_ACB(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testRemove2", testRemoveIndex(AB_addAfterCA_ACB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testRemove3", testRemoveIndex(AB_addAfterCA_ACB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testFirst", testFirst(AB_addAfterCA_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testLast", testLast(AB_addAfterCA_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testContainsA", testContains(AB_addAfterCA_ACB(), ELEMENT_A, Result.True));
			printTest("AB_addAfterCA_ACB_testContainsB", testContains(AB_addAfterCA_ACB(), ELEMENT_B, Result.True));
			printTest("AB_addAfterCA_ACB_testContainsC", testContains(AB_addAfterCA_ACB(), ELEMENT_C, Result.True));
			printTest("AB_addAfterCA_ACB_testContainsD", testContains(AB_addAfterCA_ACB(), ELEMENT_D, Result.False));
			printTest("AB_addAfterCA_ACB_testIsEmpty", testIsEmpty(AB_addAfterCA_ACB(), Result.False));
			printTest("AB_addAfterCA_ACB_testSize", testSize(AB_addAfterCA_ACB(), 3));
			printTest("AB_addAfterCA_ACB_testToString", testToString(AB_addAfterCA_ACB(), Result.ValidString));
			printTest("AB_addAfterCA_ACB_testSetNeg1D", testSet(AB_addAfterCA_ACB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testSet0D", testSet(AB_addAfterCA_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testSet1D", testSet(AB_addAfterCA_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testSet2D", testSet(AB_addAfterCA_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testSet3D", testSet(AB_addAfterCA_ACB(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testGetNeg1", testGet(AB_addAfterCA_ACB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testGet0", testGet(AB_addAfterCA_ACB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testGet1", testGet(AB_addAfterCA_ACB(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testGet2", testGet(AB_addAfterCA_ACB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testGet3", testGet(AB_addAfterCA_ACB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testIndexOfA", testIndexOf(AB_addAfterCA_ACB(), ELEMENT_A, 0));
			printTest("AB_addAfterCA_ACB_testIndexOfB", testIndexOf(AB_addAfterCA_ACB(), ELEMENT_B, 2));
			printTest("AB_addAfterCA_ACB_testIndexOfC", testIndexOf(AB_addAfterCA_ACB(), ELEMENT_C, 1));
			printTest("AB_addAfterCA_ACB_testIndexOfD", testIndexOf(AB_addAfterCA_ACB(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_addAfterCA_ACB_testIter", testIter(AB_addAfterCA_ACB(), Result.NoException));
			printTest("AB_addAfterCA_ACB_testIterHasNext", testIterHasNext(AB_addAfterCA_ACB().iterator(), Result.True));
			printTest("AB_addAfterCA_ACB_testIterNext", testIterNext(AB_addAfterCA_ACB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testIterRemove", testIterRemove(AB_addAfterCA_ACB().iterator(), Result.IllegalState));
			printTest("AB_addAfterCA_ACB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_addAfterCA_ACB(), 1), Result.True));
			printTest("AB_addAfterCA_ACB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_addAfterCA_ACB(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_addAfterCA_ACB(), 1), Result.NoException));
			printTest("AB_addAfterCA_ACB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_addAfterCA_ACB(), 1)), Result.True));
			printTest("AB_addAfterCA_ACB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_addAfterCA_ACB(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_addAfterCA_ACB(), 1)), Result.IllegalState));
			printTest("AB_addAfterCA_ACB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_addAfterCA_ACB(), 2), Result.True));
			printTest("AB_addAfterCA_ACB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_addAfterCA_ACB(), 2), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_addAfterCA_ACB(), 2), Result.NoException));
			printTest("AB_addAfterCA_ACB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_addAfterCA_ACB(), 3)), Result.False));
			printTest("AB_addAfterCA_ACB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_addAfterCA_ACB(), 3)), null, Result.NoSuchElement));
			printTest("AB_addAfterCA_ACB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_addAfterCA_ACB(), 3)), Result.IllegalState));
			// ListIterator
			printTest("AB_addAfterCA_ACB_testListIter", testListIter(AB_addAfterCA_ACB(), Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIter", testListIter(AB_addAfterCA_ACB(), 0, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterHas0Prev", testListIterHasPrev(AB_addAfterCA_ACB(), 0, Result.False));
			printTest("AB_addAfterCA_ACB_testListIterHas1Prev", testListIterHasPrev(AB_addAfterCA_ACB(), 1, Result.True));
			printTest("AB_addAfterCA_ACB_testListIterHas2Prev", testListIterHasPrev(AB_addAfterCA_ACB(), 2, Result.True));
			printTest("AB_addAfterCA_ACB_testListIterHas3Prev", testListIterHasPrev(AB_addAfterCA_ACB(), 3, Result.True));
			printTest("AB_addAfterCA_ACB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_addAfterCA_ACB_testListIter1Prev1", testListIterPrev(AB_addAfterCA_ACB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testListIter2Prev2", testListIterPrev(AB_addAfterCA_ACB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testListIter2Prev1", testListIterPrev(AB_addAfterCA_ACB(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testListIter3Prev1", testListIterPrev(AB_addAfterCA_ACB(), 3, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testListIter3Prev2", testListIterPrev(AB_addAfterCA_ACB(), 3, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testListIter3Prev3", testListIterPrev(AB_addAfterCA_ACB(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCA_ACB_testListIterAddNeg1D", testListIterAdd(AB_addAfterCA_ACB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testListIterAdd0D", testListIterAdd(AB_addAfterCA_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterAdd1D", testListIterAdd(AB_addAfterCA_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterAdd2D", testListIterAdd(AB_addAfterCA_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterAdd3D", testListIterAdd(AB_addAfterCA_ACB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterAdd4D", testListIterAdd(AB_addAfterCA_ACB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testListIterNextIndex0", testListIterNextIndex(AB_addAfterCA_ACB(), 0, 0));
			printTest("AB_addAfterCA_ACB_testListIterNextIndex1", testListIterNextIndex(AB_addAfterCA_ACB(), 1, 1));
			printTest("AB_addAfterCA_ACB_testListIterNextIndex2", testListIterNextIndex(AB_addAfterCA_ACB(), 2, 2));
			printTest("AB_addAfterCA_ACB_testListIterNextIndex3", testListIterNextIndex(AB_addAfterCA_ACB(), 3, 3));
			printTest("AB_addAfterCA_ACB_testListIterPreviousIndex0", testListIterPrevIndex(AB_addAfterCA_ACB(), 0, -1));
			printTest("AB_addAfterCA_ACB_testListIterPreviousIndex1", testListIterPrevIndex(AB_addAfterCA_ACB(), 1, 0));
			printTest("AB_addAfterCA_ACB_testListIterPreviousIndex2", testListIterPrevIndex(AB_addAfterCA_ACB(), 2, 1));
			printTest("AB_addAfterCA_ACB_testListIterPreviousIndex3", testListIterPrevIndex(AB_addAfterCA_ACB(), 3, 2));
			printTest("AB_addAfterCA_ACB_testListIterNext0AddD", testListNextAdd(AB_addAfterCA_ACB(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterNext1AddD", testListNextAdd(AB_addAfterCA_ACB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterNext2AddD", testListNextAdd(AB_addAfterCA_ACB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterNext3AddD", testListNextAdd(AB_addAfterCA_ACB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterNext4AddD", testListNextAdd(AB_addAfterCA_ACB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_addAfterCA_ACB_testListIterPrev1Index0AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_addAfterCA_ACB_testListIterPrev0Index0AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev0Index1AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev1Index1AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev0Index2AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev1Index2AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev2Index2AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev0Index3AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev1Index3AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev2Index3AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev3Index3AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev0Index4AddD", testListPrevAdd(AB_addAfterCA_ACB(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_addAfterCA_ACB_testListIterNext0SetD", testListNextSet(AB_addAfterCA_ACB(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_addAfterCA_ACB_testListIterNext1SetD", testListNextSet(AB_addAfterCA_ACB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterNext2SetD", testListNextSet(AB_addAfterCA_ACB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterNext3SetD", testListNextSet(AB_addAfterCA_ACB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterNext4SetD", testListNextSet(AB_addAfterCA_ACB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_addAfterCA_ACB_testListIterPrev0SetD", testListPrevSet(AB_addAfterCA_ACB(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_addAfterCA_ACB_testListIterPrev1SetD", testListPrevSet(AB_addAfterCA_ACB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev2SetD", testListPrevSet(AB_addAfterCA_ACB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_addAfterCA_ACB_testListIterPrev3SetD", testListPrevSet(AB_addAfterCA_ACB(), ELEMENT_D, 3, 3, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_addAfterCA_ACB");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO:[A,B] -> addAfter(C,B) -> [A,B,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> addAfter(C,B) -> [A,B,C]
	 * @return [A,B,C] after addAfter(C,B)
	 */
	private IndexedUnsortedList<Integer> AB_addAfterCB_ABC() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.addAfter(ELEMENT_C,ELEMENT_B); //the change
		return list; //return resulting state
	}
	
	private void test_AB_addAfterCB_ABC() {
		System.out.println("\nSCENARIO: [A,B] -> addAfter(C,B) -> [A,B,C]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_addAfterCB_ABC_testAddToFrontD", testAddToFront(AB_addAfterCB_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testAddToRearD", testAddToRear(AB_addAfterCB_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testAddAfterAD", testAddAfter(AB_addAfterCB_ABC(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testAddAfterBD", testAddAfter(AB_addAfterCB_ABC(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testAddAfterCD", testAddAfter(AB_addAfterCB_ABC(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testAddAfterDD", testAddAfter(AB_addAfterCB_ABC(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_addAfterCB_ABC_testAddAtIndexNeg1D", testAddAtIndex(AB_addAfterCB_ABC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testAddAtIndex0D", testAddAtIndex(AB_addAfterCB_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testAddAtIndex1D", testAddAtIndex(AB_addAfterCB_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testAddAtIndex2D", testAddAtIndex(AB_addAfterCB_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testAddAtIndex3D", testAddAtIndex(AB_addAfterCB_ABC(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testAddAtIndex4D", testAddAtIndex(AB_addAfterCB_ABC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testAddD", testAdd(AB_addAfterCB_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testRemoveFirst", testRemoveFirst(AB_addAfterCB_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testRemoveLast", testRemoveLast(AB_addAfterCB_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testRemoveA", testRemoveElement(AB_addAfterCB_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testRemoveB", testRemoveElement(AB_addAfterCB_ABC(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testRemoveC", testRemoveElement(AB_addAfterCB_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testRemoveD", testRemoveElement(AB_addAfterCB_ABC(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_addAfterCB_ABC_testRemoveNeg1", testRemoveIndex(AB_addAfterCB_ABC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testRemove0", testRemoveIndex(AB_addAfterCB_ABC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testRemove1", testRemoveIndex(AB_addAfterCB_ABC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testRemove2", testRemoveIndex(AB_addAfterCB_ABC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testRemove3", testRemoveIndex(AB_addAfterCB_ABC(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testFirst", testFirst(AB_addAfterCB_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testLast", testLast(AB_addAfterCB_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testContainsA", testContains(AB_addAfterCB_ABC(), ELEMENT_A, Result.True));
			printTest("AB_addAfterCB_ABC_testContainsB", testContains(AB_addAfterCB_ABC(), ELEMENT_B, Result.True));
			printTest("AB_addAfterCB_ABC_testContainsC", testContains(AB_addAfterCB_ABC(), ELEMENT_C, Result.True));
			printTest("AB_addAfterCB_ABC_testContainsD", testContains(AB_addAfterCB_ABC(), ELEMENT_D, Result.False));
			printTest("AB_addAfterCB_ABC_testIsEmpty", testIsEmpty(AB_addAfterCB_ABC(), Result.False));
			printTest("AB_addAfterCB_ABC_testSize", testSize(AB_addAfterCB_ABC(), 3));
			printTest("AB_addAfterCB_ABC_testToString", testToString(AB_addAfterCB_ABC(), Result.ValidString));
			printTest("AB_addAfterCB_ABC_testSetNeg1D", testSet(AB_addAfterCB_ABC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testSet0D", testSet(AB_addAfterCB_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testSet1D", testSet(AB_addAfterCB_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testSet2D", testSet(AB_addAfterCB_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testSet3D", testSet(AB_addAfterCB_ABC(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testGetNeg1", testGet(AB_addAfterCB_ABC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testGet0", testGet(AB_addAfterCB_ABC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testGet1", testGet(AB_addAfterCB_ABC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testGet2", testGet(AB_addAfterCB_ABC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testGet3", testGet(AB_addAfterCB_ABC(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testIndexOfA", testIndexOf(AB_addAfterCB_ABC(), ELEMENT_A, 0));
			printTest("AB_addAfterCB_ABC_testIndexOfB", testIndexOf(AB_addAfterCB_ABC(), ELEMENT_B, 1));
			printTest("AB_addAfterCB_ABC_testIndexOfC", testIndexOf(AB_addAfterCB_ABC(), ELEMENT_C, 2));
			printTest("AB_addAfterCB_ABC_testIndexOfD", testIndexOf(AB_addAfterCB_ABC(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_addAfterCB_ABC_testIter", testIter(AB_addAfterCB_ABC(), Result.NoException));
			printTest("AB_addAfterCB_ABC_testIterHasNext", testIterHasNext(AB_addAfterCB_ABC().iterator(), Result.True));
			printTest("AB_addAfterCB_ABC_testIterNext", testIterNext(AB_addAfterCB_ABC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testIterRemove", testIterRemove(AB_addAfterCB_ABC().iterator(), Result.IllegalState));
			printTest("AB_addAfterCB_ABC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_addAfterCB_ABC(), 1), Result.True));
			printTest("AB_addAfterCB_ABC_iterNext_testIterNext", testIterNext(iterAfterNext(AB_addAfterCB_ABC(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_addAfterCB_ABC(), 1), Result.NoException));
			printTest("AB_addAfterCB_ABC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_addAfterCB_ABC(), 1)), Result.True));
			printTest("AB_addAfterCB_ABC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_addAfterCB_ABC(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_addAfterCB_ABC(), 1)), Result.IllegalState));
			printTest("AB_addAfterCB_ABC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_addAfterCB_ABC(), 2), Result.True));
			printTest("AB_addAfterCB_ABC_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_addAfterCB_ABC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_addAfterCB_ABC(), 2), Result.NoException));
			printTest("AB_addAfterCB_ABC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_addAfterCB_ABC(), 3)), Result.False));
			printTest("AB_addAfterCB_ABC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_addAfterCB_ABC(), 3)), null, Result.NoSuchElement));
			printTest("AB_addAfterCB_ABC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_addAfterCB_ABC(), 3)), Result.IllegalState));
			// ListIterator
			printTest("AB_addAfterCB_ABC_testListIter", testListIter(AB_addAfterCB_ABC(), Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIter", testListIter(AB_addAfterCB_ABC(), 0, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterHas0Prev", testListIterHasPrev(AB_addAfterCB_ABC(), 0, Result.False));
			printTest("AB_addAfterCB_ABC_testListIterHas1Prev", testListIterHasPrev(AB_addAfterCB_ABC(), 1, Result.True));
			printTest("AB_addAfterCB_ABC_testListIterHas2Prev", testListIterHasPrev(AB_addAfterCB_ABC(), 2, Result.True));
			printTest("AB_addAfterCB_ABC_testListIterHas3Prev", testListIterHasPrev(AB_addAfterCB_ABC(), 3, Result.True));
			printTest("AB_addAfterCB_ABC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_addAfterCB_ABC_testListIter1Prev1", testListIterPrev(AB_addAfterCB_ABC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testListIter2Prev2", testListIterPrev(AB_addAfterCB_ABC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testListIter2Prev1", testListIterPrev(AB_addAfterCB_ABC(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testListIter3Prev1", testListIterPrev(AB_addAfterCB_ABC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testListIter3Prev2", testListIterPrev(AB_addAfterCB_ABC(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testListIter3Prev3", testListIterPrev(AB_addAfterCB_ABC(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addAfterCB_ABC_testListIterAddNeg1D", testListIterAdd(AB_addAfterCB_ABC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testListIterAdd0D", testListIterAdd(AB_addAfterCB_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterAdd1D", testListIterAdd(AB_addAfterCB_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterAdd2D", testListIterAdd(AB_addAfterCB_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterAdd3D", testListIterAdd(AB_addAfterCB_ABC(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterAdd4D", testListIterAdd(AB_addAfterCB_ABC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testListIterNextIndex0", testListIterNextIndex(AB_addAfterCB_ABC(), 0, 0));
			printTest("AB_addAfterCB_ABC_testListIterNextIndex1", testListIterNextIndex(AB_addAfterCB_ABC(), 1, 1));
			printTest("AB_addAfterCB_ABC_testListIterNextIndex2", testListIterNextIndex(AB_addAfterCB_ABC(), 2, 2));
			printTest("AB_addAfterCB_ABC_testListIterNextIndex3", testListIterNextIndex(AB_addAfterCB_ABC(), 3, 3));
			printTest("AB_addAfterCB_ABC_testListIterPreviousIndex0", testListIterPrevIndex(AB_addAfterCB_ABC(), 0, -1));
			printTest("AB_addAfterCB_ABC_testListIterPreviousIndex1", testListIterPrevIndex(AB_addAfterCB_ABC(), 1, 0));
			printTest("AB_addAfterCB_ABC_testListIterPreviousIndex2", testListIterPrevIndex(AB_addAfterCB_ABC(), 2, 1));
			printTest("AB_addAfterCB_ABC_testListIterPreviousIndex3", testListIterPrevIndex(AB_addAfterCB_ABC(), 3, 2));
			printTest("AB_addAfterCB_ABC_testListIterNext0AddD", testListNextAdd(AB_addAfterCB_ABC(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterNext1AddD", testListNextAdd(AB_addAfterCB_ABC(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterNext2AddD", testListNextAdd(AB_addAfterCB_ABC(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterNext3AddD", testListNextAdd(AB_addAfterCB_ABC(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterNext4AddD", testListNextAdd(AB_addAfterCB_ABC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_addAfterCB_ABC_testListIterPrev1Index0AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_addAfterCB_ABC_testListIterPrev0Index0AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev0Index1AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev1Index1AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev0Index2AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev1Index2AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev2Index2AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev0Index3AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev1Index3AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev2Index3AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev3Index3AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev0Index4AddD", testListPrevAdd(AB_addAfterCB_ABC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_addAfterCB_ABC_testListIterNext0SetD", testListNextSet(AB_addAfterCB_ABC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_addAfterCB_ABC_testListIterNext1SetD", testListNextSet(AB_addAfterCB_ABC(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterNext2SetD", testListNextSet(AB_addAfterCB_ABC(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterNext3SetD", testListNextSet(AB_addAfterCB_ABC(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterNext4SetD", testListNextSet(AB_addAfterCB_ABC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_addAfterCB_ABC_testListIterPrev0SetD", testListPrevSet(AB_addAfterCB_ABC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_addAfterCB_ABC_testListIterPrev1SetD", testListPrevSet(AB_addAfterCB_ABC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev2SetD", testListPrevSet(AB_addAfterCB_ABC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_addAfterCB_ABC_testListIterPrev3SetD", testListPrevSet(AB_addAfterCB_ABC(), ELEMENT_D, 3, 3, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_addAfterCB_ABC");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO:[A,B] -> add(C) -> [A,B,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> add(C) -> [A,B,C]
	 * @return [A,B,C] after add(C)
	 */
	private IndexedUnsortedList<Integer> AB_addC_ABC() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.add(ELEMENT_C); //the change
		return list; //return resulting state
	}
	
	private void test_AB_addC_ABC() {
		System.out.println("\nSCENARIO: [A,B] -> add(C) -> [A,B,C]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_addC_ABC_testAddToFrontD", testAddToFront(AB_addC_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testAddToRearD", testAddToRear(AB_addC_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testAddAfterAD", testAddAfter(AB_addC_ABC(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testAddAfterBD", testAddAfter(AB_addC_ABC(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testAddAfterCD", testAddAfter(AB_addC_ABC(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testAddAfterDD", testAddAfter(AB_addC_ABC(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_addC_ABC_testAddAtIndexNeg1D", testAddAtIndex(AB_addC_ABC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testAddAtIndex0D", testAddAtIndex(AB_addC_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testAddAtIndex1D", testAddAtIndex(AB_addC_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testAddAtIndex2D", testAddAtIndex(AB_addC_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testAddAtIndex3D", testAddAtIndex(AB_addC_ABC(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testAddAtIndex3D", testAddAtIndex(AB_addC_ABC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testAddC", testAdd(AB_addC_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testRemoveFirst", testRemoveFirst(AB_addC_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addC_ABC_testRemoveLast", testRemoveLast(AB_addC_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addC_ABC_testRemoveA", testRemoveElement(AB_addC_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addC_ABC_testRemoveB", testRemoveElement(AB_addC_ABC(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addC_ABC_testRemoveC", testRemoveElement(AB_addC_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addC_ABC_testRemoveD", testRemoveElement(AB_addC_ABC(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_addC_ABC_testRemoveNeg1", testRemoveIndex(AB_addC_ABC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testRemove0", testRemoveIndex(AB_addC_ABC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addC_ABC_testRemove1", testRemoveIndex(AB_addC_ABC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addC_ABC_testRemove2", testRemoveIndex(AB_addC_ABC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addC_ABC_testRemove3", testRemoveIndex(AB_addC_ABC(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testFirst", testFirst(AB_addC_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addC_ABC_testLast", testLast(AB_addC_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addC_ABC_testContainsA", testContains(AB_addC_ABC(), ELEMENT_A, Result.True));
			printTest("AB_addC_ABC_testContainsB", testContains(AB_addC_ABC(), ELEMENT_B, Result.True));
			printTest("AB_addC_ABC_testContainsC", testContains(AB_addC_ABC(), ELEMENT_C, Result.True));
			printTest("AB_addC_ABC_testContainsD", testContains(AB_addC_ABC(), ELEMENT_D, Result.False));
			printTest("AB_addC_ABC_testIsEmpty", testIsEmpty(AB_addC_ABC(), Result.False));
			printTest("AB_addC_ABC_testSize", testSize(AB_addC_ABC(), 3));
			printTest("AB_addC_ABC_testToString", testToString(AB_addC_ABC(), Result.ValidString));
			printTest("AB_addC_ABC_testSetNeg1D", testSet(AB_addC_ABC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testSet0D", testSet(AB_addC_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testSet1D", testSet(AB_addC_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testSet2D", testSet(AB_addC_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testSet3D", testSet(AB_addC_ABC(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testGetNeg1", testGet(AB_addC_ABC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testGet0", testGet(AB_addC_ABC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addC_ABC_testGet1", testGet(AB_addC_ABC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addC_ABC_testGet2", testGet(AB_addC_ABC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addC_ABC_testGet3", testGet(AB_addC_ABC(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testIndexOfA", testIndexOf(AB_addC_ABC(), ELEMENT_A, 0));
			printTest("AB_addC_ABC_testIndexOfB", testIndexOf(AB_addC_ABC(), ELEMENT_B, 1));
			printTest("AB_addC_ABC_testIndexOfC", testIndexOf(AB_addC_ABC(), ELEMENT_C, 2));
			printTest("AB_addC_ABC_testIndexOfD", testIndexOf(AB_addC_ABC(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_addC_ABC_testIter", testIter(AB_addC_ABC(), Result.NoException));
			printTest("AB_addC_ABC_testIterHasNext", testIterHasNext(AB_addC_ABC().iterator(), Result.True));
			printTest("AB_addC_ABC_testIterNext", testIterNext(AB_addC_ABC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_addC_ABC_testIterRemove", testIterRemove(AB_addC_ABC().iterator(), Result.IllegalState));
			printTest("AB_addC_ABC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_addC_ABC(), 1), Result.True));
			printTest("AB_addC_ABC_iterNext_testIterNext", testIterNext(iterAfterNext(AB_addC_ABC(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addC_ABC_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_addC_ABC(), 1), Result.NoException));
			printTest("AB_addC_ABC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_addC_ABC(), 1)), Result.True));
			printTest("AB_addC_ABC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_addC_ABC(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("AB_addC_ABC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_addC_ABC(), 1)), Result.IllegalState));
			printTest("AB_addC_ABC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_addC_ABC(), 2), Result.True));
			printTest("AB_addC_ABC_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_addC_ABC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("AB_addC_ABC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_addC_ABC(), 2), Result.NoException));
			printTest("AB_addC_ABC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_addC_ABC(), 3)), Result.False));
			printTest("AB_addC_ABC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_addC_ABC(), 3)), null, Result.NoSuchElement));
			printTest("AB_addC_ABC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_addC_ABC(), 3)), Result.IllegalState));
			// ListIterator
			printTest("AB_addC_ABC_testListIter", testListIter(AB_addC_ABC(), Result.NoException));
			printTest("AB_addC_ABC_testListIter", testListIter(AB_addC_ABC(), 0, Result.NoException));
			printTest("AB_addC_ABC_testListIterHas0Prev", testListIterHasPrev(AB_addC_ABC(), 0, Result.False));
			printTest("AB_addC_ABC_testListIterHas1Prev", testListIterHasPrev(AB_addC_ABC(), 1, Result.True));
			printTest("AB_addC_ABC_testListIterHas2Prev", testListIterHasPrev(AB_addC_ABC(), 2, Result.True));
			printTest("AB_addC_ABC_testListIterHas3Prev", testListIterHasPrev(AB_addC_ABC(), 3, Result.True));
			printTest("AB_addC_ABC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_addC_ABC_testListIter1Prev1", testListIterPrev(AB_addC_ABC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addC_ABC_testListIter2Prev2", testListIterPrev(AB_addC_ABC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addC_ABC_testListIter2Prev1", testListIterPrev(AB_addC_ABC(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addC_ABC_testListIter3Prev1", testListIterPrev(AB_addC_ABC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_addC_ABC_testListIter3Prev2", testListIterPrev(AB_addC_ABC(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_addC_ABC_testListIter3Prev3", testListIterPrev(AB_addC_ABC(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("AB_addC_ABC_testListIterAddNeg1D", testListIterAdd(AB_addC_ABC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testListIterAdd0D", testListIterAdd(AB_addC_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testListIterAdd1D", testListIterAdd(AB_addC_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testListIterAdd2D", testListIterAdd(AB_addC_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testListIterAdd3D", testListIterAdd(AB_addC_ABC(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_addC_ABC_testListIterAdd4D", testListIterAdd(AB_addC_ABC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testListIterNextIndex0", testListIterNextIndex(AB_addC_ABC(), 0, 0));
			printTest("AB_addC_ABC_testListIterNextIndex1", testListIterNextIndex(AB_addC_ABC(), 1, 1));
			printTest("AB_addC_ABC_testListIterNextIndex2", testListIterNextIndex(AB_addC_ABC(), 2, 2));
			printTest("AB_addC_ABC_testListIterNextIndex3", testListIterNextIndex(AB_addC_ABC(), 3, 3));
			printTest("AB_addC_ABC_testListIterPreviousIndex0", testListIterPrevIndex(AB_addC_ABC(), 0, -1));
			printTest("AB_addC_ABC_testListIterPreviousIndex1", testListIterPrevIndex(AB_addC_ABC(), 1, 0));
			printTest("AB_addC_ABC_testListIterPreviousIndex2", testListIterPrevIndex(AB_addC_ABC(), 2, 1));
			printTest("AB_addC_ABC_testListIterPreviousIndex3", testListIterPrevIndex(AB_addC_ABC(), 3, 2));
			printTest("AB_addC_ABC_testListIterNext0AddD", testListNextAdd(AB_addC_ABC(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_addC_ABC_testListIterNext1AddD", testListNextAdd(AB_addC_ABC(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_addC_ABC_testListIterNext2AddD", testListNextAdd(AB_addC_ABC(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_addC_ABC_testListIterNext3AddD", testListNextAdd(AB_addC_ABC(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_addC_ABC_testListIterNext4AddD", testListNextAdd(AB_addC_ABC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_addC_ABC_testListIterPrev1Index0AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_addC_ABC_testListIterPrev0Index0AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev0Index1AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev1Index1AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev0Index2AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev1Index2AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev2Index2AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev0Index3AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev1Index3AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev2Index3AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev3Index3AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev0Index4AddD", testListPrevAdd(AB_addC_ABC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_addC_ABC_testListIterNext0SetD", testListNextSet(AB_addC_ABC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_addC_ABC_testListIterNext1SetD", testListNextSet(AB_addC_ABC(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_addC_ABC_testListIterNext2SetD", testListNextSet(AB_addC_ABC(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_addC_ABC_testListIterNext3SetD", testListNextSet(AB_addC_ABC(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_addC_ABC_testListIterNext4SetD", testListNextSet(AB_addC_ABC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_addC_ABC_testListIterPrev0SetD", testListPrevSet(AB_addC_ABC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_addC_ABC_testListIterPrev1SetD", testListPrevSet(AB_addC_ABC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev2SetD", testListPrevSet(AB_addC_ABC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_addC_ABC_testListIterPrev3SetD", testListPrevSet(AB_addC_ABC(), ELEMENT_D, 3, 3, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_addC_ABC");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO:[A,B] -> add(0,C) -> [C,A,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> add(0,C) -> [C,A,B]
	 * @return [C,A,B] after add(0,C)
	 */
	private IndexedUnsortedList<Integer> AB_add0C_CAB() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.add(0,ELEMENT_C); //the change
		return list; //return resulting state
	}
	
	private void test_AB_add0C_CAB() {
		System.out.println("\nSCENARIO: [A,B] -> add(0,C) -> [C,A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_add0C_CAB_testAddToFrontD", testAddToFront(AB_add0C_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testAddToRearD", testAddToRear(AB_add0C_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testAddAfterAD", testAddAfter(AB_add0C_CAB(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testAddAfterBD", testAddAfter(AB_add0C_CAB(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testAddAfterCD", testAddAfter(AB_add0C_CAB(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testAddAfterDD", testAddAfter(AB_add0C_CAB(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_add0C_CAB_testAddAtIndexNeg1D", testAddAtIndex(AB_add0C_CAB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testAddAtIndex0D", testAddAtIndex(AB_add0C_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testAddAtIndex1D", testAddAtIndex(AB_add0C_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testAddAtIndex2D", testAddAtIndex(AB_add0C_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testAddAtIndex3D", testAddAtIndex(AB_add0C_CAB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testAddAtIndex3D", testAddAtIndex(AB_add0C_CAB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testAddC", testAdd(AB_add0C_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testRemoveFirst", testRemoveFirst(AB_add0C_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add0C_CAB_testRemoveLast", testRemoveLast(AB_add0C_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add0C_CAB_testRemoveA", testRemoveElement(AB_add0C_CAB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add0C_CAB_testRemoveB", testRemoveElement(AB_add0C_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add0C_CAB_testRemoveC", testRemoveElement(AB_add0C_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add0C_CAB_testRemoveD", testRemoveElement(AB_add0C_CAB(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_add0C_CAB_testRemoveNeg1", testRemoveIndex(AB_add0C_CAB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testRemove0", testRemoveIndex(AB_add0C_CAB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add0C_CAB_testRemove1", testRemoveIndex(AB_add0C_CAB(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add0C_CAB_testRemove2", testRemoveIndex(AB_add0C_CAB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_add0C_CAB_testRemove3", testRemoveIndex(AB_add0C_CAB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testFirst", testFirst(AB_add0C_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add0C_CAB_testLast", testLast(AB_add0C_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add0C_CAB_testContainsA", testContains(AB_add0C_CAB(), ELEMENT_A, Result.True));
			printTest("AB_add0C_CAB_testContainsB", testContains(AB_add0C_CAB(), ELEMENT_B, Result.True));
			printTest("AB_add0C_CAB_testContainsC", testContains(AB_add0C_CAB(), ELEMENT_C, Result.True));
			printTest("AB_add0C_CAB_testContainsD", testContains(AB_add0C_CAB(), ELEMENT_D, Result.False));
			printTest("AB_add0C_CAB_testIsEmpty", testIsEmpty(AB_add0C_CAB(), Result.False));
			printTest("AB_add0C_CAB_testSize", testSize(AB_add0C_CAB(), 3));
			printTest("AB_add0C_CAB_testToString", testToString(AB_add0C_CAB(), Result.ValidString));
			printTest("AB_add0C_CAB_testSetNeg1D", testSet(AB_add0C_CAB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testSet0D", testSet(AB_add0C_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testSet1D", testSet(AB_add0C_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testSet2D", testSet(AB_add0C_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testSet3D", testSet(AB_add0C_CAB(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testGetNeg1", testGet(AB_add0C_CAB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testGet0", testGet(AB_add0C_CAB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add0C_CAB_testGet1", testGet(AB_add0C_CAB(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add0C_CAB_testGet2", testGet(AB_add0C_CAB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_add0C_CAB_testGet3", testGet(AB_add0C_CAB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testIndexOfA", testIndexOf(AB_add0C_CAB(), ELEMENT_A, 1));
			printTest("AB_add0C_CAB_testIndexOfB", testIndexOf(AB_add0C_CAB(), ELEMENT_B, 2));
			printTest("AB_add0C_CAB_testIndexOfC", testIndexOf(AB_add0C_CAB(), ELEMENT_C, 0));
			printTest("AB_add0C_CAB_testIndexOfD", testIndexOf(AB_add0C_CAB(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_add0C_CAB_testIter", testIter(AB_add0C_CAB(), Result.NoException));
			printTest("AB_add0C_CAB_testIterHasNext", testIterHasNext(AB_add0C_CAB().iterator(), Result.True));
			printTest("AB_add0C_CAB_testIterNext", testIterNext(AB_add0C_CAB().iterator(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add0C_CAB_testIterRemove", testIterRemove(AB_add0C_CAB().iterator(), Result.IllegalState));
			printTest("AB_add0C_CAB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_add0C_CAB(), 1), Result.True));
			printTest("AB_add0C_CAB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_add0C_CAB(), 1), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add0C_CAB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_add0C_CAB(), 1), Result.NoException));
			printTest("AB_add0C_CAB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_add0C_CAB(), 1)), Result.True));
			printTest("AB_add0C_CAB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_add0C_CAB(), 1)), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add0C_CAB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_add0C_CAB(), 1)), Result.IllegalState));
			printTest("AB_add0C_CAB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_add0C_CAB(), 2), Result.True));
			printTest("AB_add0C_CAB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_add0C_CAB(), 2), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add0C_CAB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_add0C_CAB(), 2), Result.NoException));
			printTest("AB_add0C_CAB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_add0C_CAB(), 3)), Result.False));
			printTest("AB_add0C_CAB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_add0C_CAB(), 3)), null, Result.NoSuchElement));
			printTest("AB_add0C_CAB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_add0C_CAB(), 3)), Result.IllegalState));
			// ListIterator
			printTest("AB_add0C_CAB_testListIter", testListIter(AB_add0C_CAB(), Result.NoException));
			printTest("AB_add0C_CAB_testListIter", testListIter(AB_add0C_CAB(), 0, Result.NoException));
			printTest("AB_add0C_CAB_testListIterHas0Prev", testListIterHasPrev(AB_add0C_CAB(), 0, Result.False));
			printTest("AB_add0C_CAB_testListIterHas1Prev", testListIterHasPrev(AB_add0C_CAB(), 1, Result.True));
			printTest("AB_add0C_CAB_testListIterHas2Prev", testListIterHasPrev(AB_add0C_CAB(), 2, Result.True));
			printTest("AB_add0C_CAB_testListIterHas3Prev", testListIterHasPrev(AB_add0C_CAB(), 3, Result.True));
			printTest("AB_add0C_CAB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_add0C_CAB_testListIter1Prev1", testListIterPrev(AB_add0C_CAB(), 1, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add0C_CAB_testListIter2Prev2", testListIterPrev(AB_add0C_CAB(), 2, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add0C_CAB_testListIter2Prev1", testListIterPrev(AB_add0C_CAB(), 2, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add0C_CAB_testListIter3Prev1", testListIterPrev(AB_add0C_CAB(), 3, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_add0C_CAB_testListIter3Prev2", testListIterPrev(AB_add0C_CAB(), 3, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add0C_CAB_testListIter3Prev3", testListIterPrev(AB_add0C_CAB(), 3, 3, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add0C_CAB_testListIterAddNeg1D", testListIterAdd(AB_add0C_CAB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testListIterAdd0D", testListIterAdd(AB_add0C_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testListIterAdd1D", testListIterAdd(AB_add0C_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testListIterAdd2D", testListIterAdd(AB_add0C_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testListIterAdd3D", testListIterAdd(AB_add0C_CAB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_add0C_CAB_testListIterAdd4D", testListIterAdd(AB_add0C_CAB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testListIterNextIndex0", testListIterNextIndex(AB_add0C_CAB(), 0, 0));
			printTest("AB_add0C_CAB_testListIterNextIndex1", testListIterNextIndex(AB_add0C_CAB(), 1, 1));
			printTest("AB_add0C_CAB_testListIterNextIndex2", testListIterNextIndex(AB_add0C_CAB(), 2, 2));
			printTest("AB_add0C_CAB_testListIterNextIndex3", testListIterNextIndex(AB_add0C_CAB(), 3, 3));
			printTest("AB_add0C_CAB_testListIterPreviousIndex0", testListIterPrevIndex(AB_add0C_CAB(), 0, -1));
			printTest("AB_add0C_CAB_testListIterPreviousIndex1", testListIterPrevIndex(AB_add0C_CAB(), 1, 0));
			printTest("AB_add0C_CAB_testListIterPreviousIndex2", testListIterPrevIndex(AB_add0C_CAB(), 2, 1));
			printTest("AB_add0C_CAB_testListIterPreviousIndex3", testListIterPrevIndex(AB_add0C_CAB(), 3, 2));
			printTest("AB_add0C_CAB_testListIterNext0AddD", testListNextAdd(AB_add0C_CAB(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_add0C_CAB_testListIterNext1AddD", testListNextAdd(AB_add0C_CAB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_add0C_CAB_testListIterNext2AddD", testListNextAdd(AB_add0C_CAB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_add0C_CAB_testListIterNext3AddD", testListNextAdd(AB_add0C_CAB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_add0C_CAB_testListIterNext4AddD", testListNextAdd(AB_add0C_CAB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_add0C_CAB_testListIterPrev1Index0AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_add0C_CAB_testListIterPrev0Index0AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev0Index1AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev1Index1AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev0Index2AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev1Index2AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev2Index2AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev0Index3AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev1Index3AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev2Index3AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev3Index3AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev0Index4AddD", testListPrevAdd(AB_add0C_CAB(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_add0C_CAB_testListIterNext0SetD", testListNextSet(AB_add0C_CAB(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_add0C_CAB_testListIterNext1SetD", testListNextSet(AB_add0C_CAB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_add0C_CAB_testListIterNext2SetD", testListNextSet(AB_add0C_CAB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_add0C_CAB_testListIterNext3SetD", testListNextSet(AB_add0C_CAB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_add0C_CAB_testListIterNext4SetD", testListNextSet(AB_add0C_CAB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_add0C_CAB_testListIterPrev0SetD", testListPrevSet(AB_add0C_CAB(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_add0C_CAB_testListIterPrev1SetD", testListPrevSet(AB_add0C_CAB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev2SetD", testListPrevSet(AB_add0C_CAB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_add0C_CAB_testListIterPrev3SetD", testListPrevSet(AB_add0C_CAB(), ELEMENT_D, 3, 3, Result.NoException));
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_add0C_CAB");
			e.printStackTrace();
		}
	}
	
	
	
	////////////////////////////////////////////////
	// XXX SCENARIO:[A,B] -> add(1,C) -> [A,C,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> add(1,C) -> [A,C,B]
	 * @return [A,C,B] after add(1,C)
	 */
	private IndexedUnsortedList<Integer> AB_add1C_ACB() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.add(1,ELEMENT_C); //the change
		return list; //return resulting state
	}
	
	private void test_AB_add1C_ACB() {
		System.out.println("\nSCENARIO: [A,B] -> add(1,C) -> [A,C,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_add1C_ACB_testAddToFrontD", testAddToFront(AB_add1C_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testAddToRearD", testAddToRear(AB_add1C_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testAddAfterAD", testAddAfter(AB_add1C_ACB(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testAddAfterBD", testAddAfter(AB_add1C_ACB(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testAddAfterCD", testAddAfter(AB_add1C_ACB(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testAddAfterDD", testAddAfter(AB_add1C_ACB(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_add1C_ACB_testAddAtIndexNeg1D", testAddAtIndex(AB_add1C_ACB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testAddAtIndex0D", testAddAtIndex(AB_add1C_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testAddAtIndex1D", testAddAtIndex(AB_add1C_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testAddAtIndex2D", testAddAtIndex(AB_add1C_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testAddAtIndex3D", testAddAtIndex(AB_add1C_ACB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testAddAtIndex4D", testAddAtIndex(AB_add1C_ACB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testAddD", testAdd(AB_add1C_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testRemoveFirst", testRemoveFirst(AB_add1C_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add1C_ACB_testRemoveLast", testRemoveLast(AB_add1C_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add1C_ACB_testRemoveA", testRemoveElement(AB_add1C_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add1C_ACB_testRemoveB", testRemoveElement(AB_add1C_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add1C_ACB_testRemoveB", testRemoveElement(AB_add1C_ACB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add1C_ACB_testRemoveC", testRemoveElement(AB_add1C_ACB(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_add1C_ACB_testRemoveNeg1", testRemoveIndex(AB_add1C_ACB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testRemove0", testRemoveIndex(AB_add1C_ACB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add1C_ACB_testRemove1", testRemoveIndex(AB_add1C_ACB(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add1C_ACB_testRemove2", testRemoveIndex(AB_add1C_ACB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_add1C_ACB_testRemove3", testRemoveIndex(AB_add1C_ACB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testFirst", testFirst(AB_add1C_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add1C_ACB_testLast", testLast(AB_add1C_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add1C_ACB_testContainsA", testContains(AB_add1C_ACB(), ELEMENT_A, Result.True));
			printTest("AB_add1C_ACB_testContainsB", testContains(AB_add1C_ACB(), ELEMENT_B, Result.True));
			printTest("AB_add1C_ACB_testContainsC", testContains(AB_add1C_ACB(), ELEMENT_C, Result.True));
			printTest("AB_add1C_ACB_testContainsD", testContains(AB_add1C_ACB(), ELEMENT_D, Result.False));
			printTest("AB_add1C_ACB_testIsEmpty", testIsEmpty(AB_add1C_ACB(), Result.False));
			printTest("AB_add1C_ACB_testSize", testSize(AB_add1C_ACB(), 3));
			printTest("AB_add1C_ACB_testToString", testToString(AB_add1C_ACB(), Result.ValidString));
			printTest("AB_add1C_ACB_testSetNeg1D", testSet(AB_add1C_ACB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testSet0D", testSet(AB_add1C_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testSet1D", testSet(AB_add1C_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testSet2D", testSet(AB_add1C_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testSet3D", testSet(AB_add1C_ACB(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testGetNeg1", testGet(AB_add1C_ACB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testGet0", testGet(AB_add1C_ACB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add1C_ACB_testGet1", testGet(AB_add1C_ACB(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add1C_ACB_testGet2", testGet(AB_add1C_ACB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_add1C_ACB_testGet3", testGet(AB_add1C_ACB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testIndexOfA", testIndexOf(AB_add1C_ACB(), ELEMENT_A, 0));
			printTest("AB_add1C_ACB_testIndexOfB", testIndexOf(AB_add1C_ACB(), ELEMENT_B, 2));
			printTest("AB_add1C_ACB_testIndexOfC", testIndexOf(AB_add1C_ACB(), ELEMENT_C, 1));
			printTest("AB_add1C_ACB_testIndexOfD", testIndexOf(AB_add1C_ACB(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_add1C_ACB_testIter", testIter(AB_add1C_ACB(), Result.NoException));
			printTest("AB_add1C_ACB_testIterHasNext", testIterHasNext(AB_add1C_ACB().iterator(), Result.True));
			printTest("AB_add1C_ACB_testIterNext", testIterNext(AB_add1C_ACB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add1C_ACB_testIterRemove", testIterRemove(AB_add1C_ACB().iterator(), Result.IllegalState));
			printTest("AB_add1C_ACB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_add1C_ACB(), 1), Result.True));
			printTest("AB_add1C_ACB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_add1C_ACB(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add1C_ACB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_add1C_ACB(), 1), Result.NoException));
			printTest("AB_add1C_ACB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_add1C_ACB(), 1)), Result.True));
			printTest("AB_add1C_ACB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_add1C_ACB(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add1C_ACB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_add1C_ACB(), 1)), Result.IllegalState));
			printTest("AB_add1C_ACB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_add1C_ACB(), 2), Result.True));
			printTest("AB_add1C_ACB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_add1C_ACB(), 2), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add1C_ACB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_add1C_ACB(), 2), Result.NoException));
			printTest("AB_add1C_ACB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_add1C_ACB(), 3)), Result.False));
			printTest("AB_add1C_ACB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_add1C_ACB(), 3)), null, Result.NoSuchElement));
			printTest("AB_add1C_ACB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_add1C_ACB(), 3)), Result.IllegalState));
			// ListIterator
			printTest("AB_add1C_ACB_testListIter", testListIter(AB_add1C_ACB(), Result.NoException));
			printTest("AB_add1C_ACB_testListIter", testListIter(AB_add1C_ACB(), 0, Result.NoException));
			printTest("AB_add1C_ACB_testListIterHas0Prev", testListIterHasPrev(AB_add1C_ACB(), 0, Result.False));
			printTest("AB_add1C_ACB_testListIterHas1Prev", testListIterHasPrev(AB_add1C_ACB(), 1, Result.True));
			printTest("AB_add1C_ACB_testListIterHas2Prev", testListIterHasPrev(AB_add1C_ACB(), 2, Result.True));
			printTest("AB_add1C_ACB_testListIterHas3Prev", testListIterHasPrev(AB_add1C_ACB(), 3, Result.True));
			printTest("AB_add1C_ACB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_add1C_ACB_testListIter1Prev1", testListIterPrev(AB_add1C_ACB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add1C_ACB_testListIter2Prev2", testListIterPrev(AB_add1C_ACB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add1C_ACB_testListIter2Prev1", testListIterPrev(AB_add1C_ACB(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add1C_ACB_testListIter3Prev1", testListIterPrev(AB_add1C_ACB(), 3, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_add1C_ACB_testListIter3Prev2", testListIterPrev(AB_add1C_ACB(), 3, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add1C_ACB_testListIter3Prev3", testListIterPrev(AB_add1C_ACB(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add1C_ACB_testListIterAddNeg1D", testListIterAdd(AB_add1C_ACB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testListIterAdd0D", testListIterAdd(AB_add1C_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testListIterAdd1D", testListIterAdd(AB_add1C_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testListIterAdd2D", testListIterAdd(AB_add1C_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testListIterAdd3D", testListIterAdd(AB_add1C_ACB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_add1C_ACB_testListIterAdd4D", testListIterAdd(AB_add1C_ACB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testListIterNextIndex0", testListIterNextIndex(AB_add1C_ACB(), 0, 0));
			printTest("AB_add1C_ACB_testListIterNextIndex1", testListIterNextIndex(AB_add1C_ACB(), 1, 1));
			printTest("AB_add1C_ACB_testListIterNextIndex2", testListIterNextIndex(AB_add1C_ACB(), 2, 2));
			printTest("AB_add1C_ACB_testListIterNextIndex3", testListIterNextIndex(AB_add1C_ACB(), 3, 3));
			printTest("AB_add1C_ACB_testListIterPreviousIndex0", testListIterPrevIndex(AB_add1C_ACB(), 0, -1));
			printTest("AB_add1C_ACB_testListIterPreviousIndex1", testListIterPrevIndex(AB_add1C_ACB(), 1, 0));
			printTest("AB_add1C_ACB_testListIterPreviousIndex2", testListIterPrevIndex(AB_add1C_ACB(), 2, 1));
			printTest("AB_add1C_ACB_testListIterPreviousIndex3", testListIterPrevIndex(AB_add1C_ACB(), 3, 2));
			printTest("AB_add1C_ACB_testListIterNext0AddD", testListNextAdd(AB_add1C_ACB(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_add1C_ACB_testListIterNext1AddD", testListNextAdd(AB_add1C_ACB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_add1C_ACB_testListIterNext2AddD", testListNextAdd(AB_add1C_ACB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_add1C_ACB_testListIterNext3AddD", testListNextAdd(AB_add1C_ACB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_add1C_ACB_testListIterNext4AddD", testListNextAdd(AB_add1C_ACB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_add1C_ACB_testListIterPrev1Index0AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_add1C_ACB_testListIterPrev0Index0AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev0Index1AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev1Index1AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev0Index2AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev1Index2AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev2Index2AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev0Index3AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev1Index3AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev2Index3AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev3Index3AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev0Index4AddD", testListPrevAdd(AB_add1C_ACB(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_add1C_ACB_testListIterNext0SetD", testListNextSet(AB_add1C_ACB(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_add1C_ACB_testListIterNext1SetD", testListNextSet(AB_add1C_ACB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_add1C_ACB_testListIterNext2SetD", testListNextSet(AB_add1C_ACB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_add1C_ACB_testListIterNext3SetD", testListNextSet(AB_add1C_ACB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_add1C_ACB_testListIterNext4SetD", testListNextSet(AB_add1C_ACB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_add1C_ACB_testListIterPrev0SetD", testListPrevSet(AB_add1C_ACB(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_add1C_ACB_testListIterPrev1SetD", testListPrevSet(AB_add1C_ACB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev2SetD", testListPrevSet(AB_add1C_ACB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_add1C_ACB_testListIterPrev3SetD", testListPrevSet(AB_add1C_ACB(), ELEMENT_D, 3, 3, Result.NoException));
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_add1C_ACB");
			e.printStackTrace();
		}
	}
	
	
	////////////////////////////////////////////////
	// XXX SCENARIO:[A,B] -> add(2,C) -> [A,B,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> add(2,C) -> [A,B,C]
	 * @return [A,B,C] after add(2,C)
	 */
	private IndexedUnsortedList<Integer> AB_add2C_ABC() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.add(2,ELEMENT_C); //the change
		return list; //return resulting state
	}
	
	private void test_AB_add2C_ABC() {
		System.out.println("\nSCENARIO: [A,B] -> add(2,C) -> [A,B,C]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_add2C_ABC_testAddToFrontD", testAddToFront(AB_add2C_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testAddToRearD", testAddToRear(AB_add2C_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testAddAfterAD", testAddAfter(AB_add2C_ABC(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testAddAfterBD", testAddAfter(AB_add2C_ABC(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testAddAfterCD", testAddAfter(AB_add2C_ABC(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testAddAfterDD", testAddAfter(AB_add2C_ABC(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_add2C_ABC_testAddAtIndexNeg1D", testAddAtIndex(AB_add2C_ABC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testAddAtIndex0D", testAddAtIndex(AB_add2C_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testAddAtIndex1D", testAddAtIndex(AB_add2C_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testAddAtIndex2D", testAddAtIndex(AB_add2C_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testAddAtIndex3D", testAddAtIndex(AB_add2C_ABC(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testAddAtIndex3D", testAddAtIndex(AB_add2C_ABC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testAddD", testAdd(AB_add2C_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testRemoveFirst", testRemoveFirst(AB_add2C_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add2C_ABC_testRemoveLast", testRemoveLast(AB_add2C_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add2C_ABC_testRemoveA", testRemoveElement(AB_add2C_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add2C_ABC_testRemoveB", testRemoveElement(AB_add2C_ABC(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add2C_ABC_testRemoveC", testRemoveElement(AB_add2C_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add2C_ABC_testRemoveD", testRemoveElement(AB_add2C_ABC(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_add2C_ABC_testRemoveNeg1", testRemoveIndex(AB_add2C_ABC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testRemove0", testRemoveIndex(AB_add2C_ABC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add2C_ABC_testRemove1", testRemoveIndex(AB_add2C_ABC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_add2C_ABC_testRemove2", testRemoveIndex(AB_add2C_ABC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add2C_ABC_testRemove3", testRemoveIndex(AB_add2C_ABC(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testFirst", testFirst(AB_add2C_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add2C_ABC_testLast", testLast(AB_add2C_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add2C_ABC_testContainsA", testContains(AB_add2C_ABC(), ELEMENT_A, Result.True));
			printTest("AB_add2C_ABC_testContainsB", testContains(AB_add2C_ABC(), ELEMENT_B, Result.True));
			printTest("AB_add2C_ABC_testContainsC", testContains(AB_add2C_ABC(), ELEMENT_C, Result.True));
			printTest("AB_add2C_ABC_testContainsD", testContains(AB_add2C_ABC(), ELEMENT_D, Result.False));
			printTest("AB_add2C_ABC_testIsEmpty", testIsEmpty(AB_add2C_ABC(), Result.False));
			printTest("AB_add2C_ABC_testSize", testSize(AB_add2C_ABC(), 3));
			printTest("AB_add2C_ABC_testToString", testToString(AB_add2C_ABC(), Result.ValidString));
			printTest("AB_add2C_ABC_testSetNeg1D", testSet(AB_add2C_ABC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testSet0D", testSet(AB_add2C_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testSet1D", testSet(AB_add2C_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testSet2D", testSet(AB_add2C_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testSet3D", testSet(AB_add2C_ABC(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testGetNeg1", testGet(AB_add2C_ABC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testGet0", testGet(AB_add2C_ABC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add2C_ABC_testGet1", testGet(AB_add2C_ABC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_add2C_ABC_testGet2", testGet(AB_add2C_ABC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add2C_ABC_testGet3", testGet(AB_add2C_ABC(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testIndexOfA", testIndexOf(AB_add2C_ABC(), ELEMENT_A, 0));
			printTest("AB_add2C_ABC_testIndexOfB", testIndexOf(AB_add2C_ABC(), ELEMENT_B, 1));
			printTest("AB_add2C_ABC_testIndexOfC", testIndexOf(AB_add2C_ABC(), ELEMENT_C, 2));
			printTest("AB_add2C_ABC_testIndexOfD", testIndexOf(AB_add2C_ABC(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_add2C_ABC_testIter", testIter(AB_add2C_ABC(), Result.NoException));
			printTest("AB_add2C_ABC_testIterHasNext", testIterHasNext(AB_add2C_ABC().iterator(), Result.True));
			printTest("AB_add2C_ABC_testIterNext", testIterNext(AB_add2C_ABC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_add2C_ABC_testIterRemove", testIterRemove(AB_add2C_ABC().iterator(), Result.IllegalState));
			printTest("AB_add2C_ABC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_add2C_ABC(), 1), Result.True));
			printTest("AB_add2C_ABC_iterNext_testIterNext", testIterNext(iterAfterNext(AB_add2C_ABC(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add2C_ABC_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_add2C_ABC(), 1), Result.NoException));
			printTest("AB_add2C_ABC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_add2C_ABC(), 1)), Result.True));
			printTest("AB_add2C_ABC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_add2C_ABC(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("AB_add2C_ABC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_add2C_ABC(), 1)), Result.IllegalState));
			printTest("AB_add2C_ABC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_add2C_ABC(), 2), Result.True));
			printTest("AB_add2C_ABC_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_add2C_ABC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("AB_add2C_ABC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_add2C_ABC(), 2), Result.NoException));
			printTest("AB_add2C_ABC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_add2C_ABC(), 3)), Result.False));
			printTest("AB_add2C_ABC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_add2C_ABC(), 3)), null, Result.NoSuchElement));
			printTest("AB_add2C_ABC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_add2C_ABC(), 3)), Result.IllegalState));
			// ListIterator
			printTest("AB_add2C_ABC_testListIter", testListIter(AB_add2C_ABC(), Result.NoException));
			printTest("AB_add2C_ABC_testListIter", testListIter(AB_add2C_ABC(), 0, Result.NoException));
			printTest("AB_add2C_ABC_testListIterHas0Prev", testListIterHasPrev(AB_add2C_ABC(), 0, Result.False));
			printTest("AB_add2C_ABC_testListIterHas1Prev", testListIterHasPrev(AB_add2C_ABC(), 1, Result.True));
			printTest("AB_add2C_ABC_testListIterHas2Prev", testListIterHasPrev(AB_add2C_ABC(), 2, Result.True));
			printTest("AB_add2C_ABC_testListIterHas3Prev", testListIterHasPrev(AB_add2C_ABC(), 3, Result.True));
			printTest("AB_add2C_ABC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_add2C_ABC_testListIter1Prev1", testListIterPrev(AB_add2C_ABC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add2C_ABC_testListIter2Prev2", testListIterPrev(AB_add2C_ABC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add2C_ABC_testListIter2Prev1", testListIterPrev(AB_add2C_ABC(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_add2C_ABC_testListIter3Prev1", testListIterPrev(AB_add2C_ABC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_add2C_ABC_testListIter3Prev2", testListIterPrev(AB_add2C_ABC(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_add2C_ABC_testListIter3Prev3", testListIterPrev(AB_add2C_ABC(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("AB_add2C_ABC_testListIterAddNeg1D", testListIterAdd(AB_add2C_ABC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testListIterAdd0D", testListIterAdd(AB_add2C_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testListIterAdd1D", testListIterAdd(AB_add2C_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testListIterAdd2D", testListIterAdd(AB_add2C_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testListIterAdd3D", testListIterAdd(AB_add2C_ABC(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_add2C_ABC_testListIterAdd4D", testListIterAdd(AB_add2C_ABC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testListIterNextIndex0", testListIterNextIndex(AB_add2C_ABC(), 0, 0));
			printTest("AB_add2C_ABC_testListIterNextIndex1", testListIterNextIndex(AB_add2C_ABC(), 1, 1));
			printTest("AB_add2C_ABC_testListIterNextIndex2", testListIterNextIndex(AB_add2C_ABC(), 2, 2));
			printTest("AB_add2C_ABC_testListIterNextIndex3", testListIterNextIndex(AB_add2C_ABC(), 3, 3));
			printTest("AB_add2C_ABC_testListIterPreviousIndex0", testListIterPrevIndex(AB_add2C_ABC(), 0, -1));
			printTest("AB_add2C_ABC_testListIterPreviousIndex1", testListIterPrevIndex(AB_add2C_ABC(), 1, 0));
			printTest("AB_add2C_ABC_testListIterPreviousIndex2", testListIterPrevIndex(AB_add2C_ABC(), 2, 1));
			printTest("AB_add2C_ABC_testListIterPreviousIndex3", testListIterPrevIndex(AB_add2C_ABC(), 3, 2));
			printTest("AB_add2C_ABC_testListIterNext0AddD", testListNextAdd(AB_add2C_ABC(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_add2C_ABC_testListIterNext1AddD", testListNextAdd(AB_add2C_ABC(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_add2C_ABC_testListIterNext2AddD", testListNextAdd(AB_add2C_ABC(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_add2C_ABC_testListIterNext3AddD", testListNextAdd(AB_add2C_ABC(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_add2C_ABC_testListIterNext4AddD", testListNextAdd(AB_add2C_ABC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_add2C_ABC_testListIterPrev1Index0AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_add2C_ABC_testListIterPrev0Index0AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev0Index1AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev1Index1AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev0Index2AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev1Index2AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev2Index2AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev0Index3AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev1Index3AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev2Index3AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev3Index3AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev0Index4AddD", testListPrevAdd(AB_add2C_ABC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_add2C_ABC_testListIterNext0SetD", testListNextSet(AB_add2C_ABC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_add2C_ABC_testListIterNext1SetD", testListNextSet(AB_add2C_ABC(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_add2C_ABC_testListIterNext2SetD", testListNextSet(AB_add2C_ABC(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_add2C_ABC_testListIterNext3SetD", testListNextSet(AB_add2C_ABC(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_add2C_ABC_testListIterNext4SetD", testListNextSet(AB_add2C_ABC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_add2C_ABC_testListIterPrev0SetD", testListPrevSet(AB_add2C_ABC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_add2C_ABC_testListIterPrev1SetD", testListPrevSet(AB_add2C_ABC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev2SetD", testListPrevSet(AB_add2C_ABC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_add2C_ABC_testListIterPrev3SetD", testListPrevSet(AB_add2C_ABC(), ELEMENT_D, 3, 3, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_add2C_ABC");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> removeFirst( ) -> [B]
	////////////////////////////////////////////////
	
	/** Scenario: [A] -> removeFirst( ) -> [B]
	 * @return [B] after removeFirst( )
	 */
	private IndexedUnsortedList<Integer> AB_removeFirst_B() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.removeFirst(); //the change
		return list; //return resulting state
	}
	
	private void test_AB_removeFirst_B() {
		System.out.println("\nSCENARIO: [A,B] -> removeFirst() -> [B]\n");
		try {
			printTest("AB_removeFirst_B_testAddToFrontA", testAddToFront(AB_removeFirst_B(), ELEMENT_A, Result.NoException));
			printTest("AB_removeFirst_B_testAddToRearA", testAddToRear(AB_removeFirst_B(), ELEMENT_A, Result.NoException));
			printTest("AB_removeFirst_B_testAddAfterAB", testAddAfter(AB_removeFirst_B(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("AB_removeFirst_B_testAddAfterCB", testAddAfter(AB_removeFirst_B(), ELEMENT_C, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_removeFirst_B_testAddAtIndexNeg1A", testAddAtIndex(AB_removeFirst_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_removeFirst_B_testAddAtIndex0A", testAddAtIndex(AB_removeFirst_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_removeFirst_B_testAddAtIndex1A", testAddAtIndex(AB_removeFirst_B(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_removeFirst_B_testAddB", testAdd(AB_removeFirst_B(), ELEMENT_A, Result.NoException));
			printTest("AB_removeFirst_B_testRemoveFirst", testRemoveFirst(AB_removeFirst_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeFirst_B_testRemoveLast", testRemoveLast(AB_removeFirst_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeFirst_B_testRemoveA", testRemoveElement(AB_removeFirst_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeFirst_B_testRemoveB", testRemoveElement(AB_removeFirst_B(), ELEMENT_A, Result.NoSuchElement));
			printTest("AB_removeFirst_B_testRemoveNeg1", testRemoveIndex(AB_removeFirst_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_removeFirst_B_testRemove0", testRemoveIndex(AB_removeFirst_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeFirst_B_testRemove1", testRemoveIndex(AB_removeFirst_B(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_removeFirst_B_testFirst", testFirst(AB_removeFirst_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeFirst_B_testLast", testLast(AB_removeFirst_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeFirst_B_testContainsA", testContains(AB_removeFirst_B(), ELEMENT_B, Result.True));
			printTest("AB_removeFirst_B_testContainsB", testContains(AB_removeFirst_B(), ELEMENT_A, Result.False));
			printTest("AB_removeFirst_B_testIsEmpty", testIsEmpty(AB_removeFirst_B(), Result.False));
			printTest("AB_removeFirst_B_testSize", testSize(AB_removeFirst_B(), 1));
			printTest("AB_removeFirst_B_testToString", testToString(AB_removeFirst_B(), Result.ValidString));			
			printTest("AB_removeFirst_B_testSetNeg1A", testSet(AB_removeFirst_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_removeFirst_B_testSet0A", testSet(AB_removeFirst_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_removeFirst_B_testGetNeg1", testGet(AB_removeFirst_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_removeFirst_B_testGet0", testGet(AB_removeFirst_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeFirst_B_testIndexOfA", testIndexOf(AB_removeFirst_B(), ELEMENT_A, -1));
			printTest("AB_removeFirst_B_testIndexOfB", testIndexOf(AB_removeFirst_B(), ELEMENT_B, 0));
			// Iterator
			printTest("AB_removeFirst_B_testIter", testIter(AB_removeFirst_B(), Result.NoException));
			printTest("AB_removeFirst_B_testIterHasNext", testIterHasNext(AB_removeFirst_B().iterator(), Result.True));
			printTest("AB_removeFirst_B_testIterNext", testIterNext(AB_removeFirst_B().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeFirst_B_testIterRemove", testIterRemove(AB_removeFirst_B().iterator(), Result.IllegalState));
			printTest("AB_removeFirst_B_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_removeFirst_B(), 1), Result.False));
			printTest("AB_removeFirst_B_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_removeFirst_B(), 1), null, Result.NoSuchElement));
			printTest("AB_removeFirst_B_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_removeFirst_B(), 1), Result.NoException));
			printTest("AB_removeFirst_B_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_removeFirst_B(), 1)), Result.False));
			printTest("AB_removeFirst_B_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_removeFirst_B(), 1)), null, Result.NoSuchElement));
			printTest("AB_removeFirst_B_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_removeFirst_B(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_removeFirst_B_testListIter", testListIter(AB_removeFirst_B(), Result.NoException));
			printTest("AB_removeFirst_B_testListIter", testListIter(AB_removeFirst_B(), 0, Result.NoException));
			printTest("AB_removeFirst_B_testListIterHasPrev", testListIterHasPrev(AB_removeFirst_B(), 0, Result.False));
			printTest("AB_removeFirst_B_testListIterHasPrev", testListIterHasPrev(AB_removeFirst_B(), 1, Result.True));
			printTest("AB_removeFirst_B_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_removeFirst_B_testListIter1Prev1", testListIterPrev(AB_removeFirst_B(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeFirst_B_testListIterAddNeg1B", testListIterAdd(AB_removeFirst_B(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeFirst_B_testListIterAdd0B", testListIterAdd(AB_removeFirst_B(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_removeFirst_B_testListIterAdd1B", testListIterAdd(AB_removeFirst_B(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_removeFirst_B_testListIterAdd2B", testListIterAdd(AB_removeFirst_B(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeFirst_B_testListIterNextIndex0", testListIterNextIndex(AB_removeFirst_B(), 0, 0));
			printTest("AB_removeFirst_B_testListIterNextIndex1", testListIterNextIndex(AB_removeFirst_B(), 1, 1));
			printTest("AB_removeFirst_B_testListIterPreviousIndex0", testListIterPrevIndex(AB_removeFirst_B(), 0, -1));
			printTest("AB_removeFirst_B_testListIterPreviousIndex1", testListIterPrevIndex(AB_removeFirst_B(), 1, 0));
			printTest("AB_removeFirst_B_testListIterNext0AddB", testListNextAdd(AB_removeFirst_B(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_removeFirst_B_testListIterNext1AddB", testListNextAdd(AB_removeFirst_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_removeFirst_B_testListIterNext2AddB", testListNextAdd(AB_removeFirst_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_removeFirst_B_testListIterPrev1Index0AddB", testListPrevAdd(AB_removeFirst_B(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_removeFirst_B_testListIterPrev0Index0AddB", testListPrevAdd(AB_removeFirst_B(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_removeFirst_B_testListIterPrev0Index1AddB", testListPrevAdd(AB_removeFirst_B(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_removeFirst_B_testListIterPrev1Index1AddB", testListPrevAdd(AB_removeFirst_B(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_removeFirst_B_testListIterPrev0Index2AddB", testListPrevAdd(AB_removeFirst_B(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_removeFirst_B_testListIterNext0SetB", testListNextSet(AB_removeFirst_B(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_removeFirst_B_testListIterNext1SetB", testListNextSet(AB_removeFirst_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_removeFirst_B_testListIterNext2SetB", testListNextSet(AB_removeFirst_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_removeFirst_B_testListIterPrev0SetB", testListPrevSet(AB_removeFirst_B(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_removeFirst_B_testListIterPrev1SetB", testListPrevSet(AB_removeFirst_B(), ELEMENT_B, 1, 1, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_removeFirst_B");
			e.printStackTrace();
		}
	}

	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> removeLast( ) -> [A]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> removeLast( ) -> [A]
	 * @return [B] after removeLast( )
	 */
	private IndexedUnsortedList<Integer> AB_removeLast_A() {
		// It's a good idea to get the "starting state" from a previous
		// scenario's builder method. That way, you only add on the next
		// change and more advanced scenarios can build on previously
		// tested scenarios.
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.removeLast(); //the change
		return list; //return resulting state
	}
	
	private void test_AB_removeLast_A() {
		System.out.println("\nSCENARIO: [A,B] -> removeLast() -> [A]\n");
		try {
			printTest("AB_removeLast_A_testAddToFrontB", testAddToFront(AB_removeLast_A(), ELEMENT_B, Result.NoException));
			printTest("AB_removeLast_A_testAddToRearB", testAddToRear(AB_removeLast_A(), ELEMENT_B, Result.NoException));
			printTest("AB_removeLast_A_testAddAfterCB", testAddAfter(AB_removeLast_A(), ELEMENT_C, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_removeLast_A_testAddAfterAB", testAddAfter(AB_removeLast_A(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("AB_removeLast_A_testAddAtIndexNeg1B", testAddAtIndex(AB_removeLast_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeLast_A_testAddAtIndex0B", testAddAtIndex(AB_removeLast_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_removeLast_A_testAddAtIndex1B", testAddAtIndex(AB_removeLast_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_removeLast_A_testAddB", testAdd(AB_removeLast_A(), ELEMENT_B, Result.NoException));
			printTest("AB_removeLast_A_testRemoveFirst", testRemoveFirst(AB_removeLast_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeLast_A_testRemoveLast", testRemoveLast(AB_removeLast_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeLast_A_testRemoveA", testRemoveElement(AB_removeLast_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeLast_A_testRemoveB", testRemoveElement(AB_removeLast_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("AB_removeLast_A_testRemoveNeg1", testRemoveIndex(AB_removeLast_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_removeLast_A_testRemove0", testRemoveIndex(AB_removeLast_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeLast_A_testRemove1", testRemoveIndex(AB_removeLast_A(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_removeLast_A_testFirst", testFirst(AB_removeLast_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeLast_A_testLast", testLast(AB_removeLast_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeLast_A_testContainsA", testContains(AB_removeLast_A(), ELEMENT_A, Result.True));
			printTest("AB_removeLast_A_testContainsB", testContains(AB_removeLast_A(), ELEMENT_B, Result.False));
			printTest("AB_removeLast_A_testIsEmpty", testIsEmpty(AB_removeLast_A(), Result.False));
			printTest("AB_removeLast_A_testSize", testSize(AB_removeLast_A(), 1));
			printTest("AB_removeLast_A_testToString", testToString(AB_removeLast_A(), Result.ValidString));			
			printTest("AB_removeLast_A_testSetNeg1B", testSet(AB_removeLast_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeLast_A_testSet0B", testSet(AB_removeLast_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_removeLast_A_testGetNeg1", testGet(AB_removeLast_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_removeLast_A_testGet0", testGet(AB_removeLast_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeLast_A_testIndexOfA", testIndexOf(AB_removeLast_A(), ELEMENT_A, 0));
			printTest("AB_removeLast_A_testIndexOfB", testIndexOf(AB_removeLast_A(), ELEMENT_B, -1));
			// Iterator
			printTest("AB_removeLast_A_testIter", testIter(AB_removeLast_A(), Result.NoException));
			printTest("AB_removeLast_A_testIterHasNext", testIterHasNext(AB_removeLast_A().iterator(), Result.True));
			printTest("AB_removeLast_A_testIterNext", testIterNext(AB_removeLast_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeLast_A_testIterRemove", testIterRemove(AB_removeLast_A().iterator(), Result.IllegalState));
			printTest("AB_removeLast_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_removeLast_A(), 1), Result.False));
			printTest("AB_removeLast_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_removeLast_A(), 1), null, Result.NoSuchElement));
			printTest("AB_removeLast_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_removeLast_A(), 1), Result.NoException));
			printTest("AB_removeLast_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_removeLast_A(), 1)), Result.False));
			printTest("AB_removeLast_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_removeLast_A(), 1)), null, Result.NoSuchElement));
			printTest("AB_removeLast_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_removeLast_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_removeLast_A_testListIter", testListIter(AB_removeLast_A(), Result.NoException));
			printTest("AB_removeLast_A_testListIter", testListIter(AB_removeLast_A(), 0, Result.NoException));
			printTest("AB_removeLast_A_testListIterHasPrev", testListIterHasPrev(AB_removeLast_A(), 0, Result.False));
			printTest("AB_removeLast_A_testListIterHasPrev", testListIterHasPrev(AB_removeLast_A(), 1, Result.True));
			printTest("AB_removeLast_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_removeLast_A_testListIter1Prev1", testListIterPrev(AB_removeLast_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeLast_A_testListIterAddNeg1B", testListIterAdd(AB_removeLast_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeLast_A_testListIterAdd0B", testListIterAdd(AB_removeLast_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_removeLast_A_testListIterAdd1B", testListIterAdd(AB_removeLast_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_removeLast_A_testListIterAdd2B", testListIterAdd(AB_removeLast_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeLast_A_testListIterNextIndex0", testListIterNextIndex(AB_removeLast_A(), 0, 0));
			printTest("AB_removeLast_A_testListIterNextIndex1", testListIterNextIndex(AB_removeLast_A(), 1, 1));
			printTest("AB_removeLast_A_testListIterPreviousIndex0", testListIterPrevIndex(AB_removeLast_A(), 0, -1));
			printTest("AB_removeLast_A_testListIterPreviousIndex1", testListIterPrevIndex(AB_removeLast_A(), 1, 0));
			printTest("AB_removeLast_A_testListIterNext0AddB", testListNextAdd(AB_removeLast_A(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_removeLast_A_testListIterNext1AddB", testListNextAdd(AB_removeLast_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_removeLast_A_testListIterNext2AddB", testListNextAdd(AB_removeLast_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_removeLast_A_testListIterPrev1Index0AddB", testListPrevAdd(AB_removeLast_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_removeLast_A_testListIterPrev0Index0AddB", testListPrevAdd(AB_removeLast_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_removeLast_A_testListIterPrev0Index1AddB", testListPrevAdd(AB_removeLast_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_removeLast_A_testListIterPrev1Index1AddB", testListPrevAdd(AB_removeLast_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_removeLast_A_testListIterPrev0Index2AddB", testListPrevAdd(AB_removeLast_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_removeLast_A_testListIterNext0SetB", testListNextSet(AB_removeLast_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_removeLast_A_testListIterNext1SetB", testListNextSet(AB_removeLast_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_removeLast_A_testListIterNext2SetB", testListNextSet(AB_removeLast_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_removeLast_A_testListIterPrev0SetB", testListPrevSet(AB_removeLast_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_removeLast_A_testListIterPrev1SetB", testListPrevSet(AB_removeLast_A(), ELEMENT_B, 1, 1, Result.NoException));
		
	
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_removeLast_A");
			e.printStackTrace();
		}
	}

	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> remove(A) -> [B]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> remove(A) -> [B]
	 * @return [A,B] after remove(A)
	 */
	private IndexedUnsortedList<Integer> AB_removeA_B() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.remove(ELEMENT_A); //the change
		return list; //return resulting state
	}
	
	private void test_AB_removeA_B() {
		System.out.println("\nSCENARIO: [A,B] -> remove(A) -> [B]\n");
		try {
			printTest("AB_removeA_B_testAddToFrontA", testAddToFront(AB_removeA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_removeA_B_testAddToRearA", testAddToRear(AB_removeA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_removeA_B_testAddAfterBA", testAddAfter(AB_removeA_B(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("AB_removeA_B_testAddAfterCA", testAddAfter(AB_removeA_B(), ELEMENT_C, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_removeA_B_testAddAtIndexNeg1A", testAddAtIndex(AB_removeA_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_removeA_B_testAddAtIndex0A", testAddAtIndex(AB_removeA_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_removeA_B_testAddAtIndex1A", testAddAtIndex(AB_removeA_B(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_removeA_B_testAddA", testAdd(AB_removeA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_removeA_B_testRemoveFirst", testRemoveFirst(AB_removeA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeA_B_testRemoveLast", testRemoveLast(AB_removeA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeA_B_testRemoveA", testRemoveElement(AB_removeA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeA_B_testRemoveB", testRemoveElement(AB_removeA_B(), ELEMENT_A, Result.NoSuchElement));
			printTest("AB_removeA_B_testRemoveNeg1", testRemoveIndex(AB_removeA_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_removeA_B_testRemove0", testRemoveIndex(AB_removeA_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeA_B_testRemove1", testRemoveIndex(AB_removeA_B(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_removeA_B_testFirst", testFirst(AB_removeA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeA_B_testLast", testLast(AB_removeA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeA_B_testContainsA", testContains(AB_removeA_B(), ELEMENT_B, Result.True));
			printTest("AB_removeA_B_testContainsB", testContains(AB_removeA_B(), ELEMENT_A, Result.False));
			printTest("AB_removeA_B_testIsEmpty", testIsEmpty(AB_removeA_B(), Result.False));
			printTest("AB_removeA_B_testSize", testSize(AB_removeA_B(), 1));
			printTest("AB_removeA_B_testToString", testToString(AB_removeA_B(), Result.ValidString));			
			printTest("AB_removeA_B_testSetNeg1A", testSet(AB_removeA_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_removeA_B_testSet0A", testSet(AB_removeA_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_removeA_B_testGetNeg1", testGet(AB_removeA_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_removeA_B_testGet0", testGet(AB_removeA_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeA_B_testIndexOfA", testIndexOf(AB_removeA_B(), ELEMENT_A, -1));
			printTest("AB_removeA_B_testIndexOfB", testIndexOf(AB_removeA_B(), ELEMENT_B, 0));
			// Iterator
			printTest("AB_removeA_B_testIter", testIter(AB_removeA_B(), Result.NoException));
			printTest("AB_removeA_B_testIterHasNext", testIterHasNext(AB_removeA_B().iterator(), Result.True));
			printTest("AB_removeA_B_testIterNext", testIterNext(AB_removeA_B().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeA_B_testIterRemove", testIterRemove(AB_removeA_B().iterator(), Result.IllegalState));
			printTest("AB_removeA_B_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_removeA_B(), 1), Result.False));
			printTest("AB_removeA_B_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_removeA_B(), 1), null, Result.NoSuchElement));
			printTest("AB_removeA_B_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_removeA_B(), 1), Result.NoException));
			printTest("AB_removeA_B_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_removeA_B(), 1)), Result.False));
			printTest("AB_removeA_B_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_removeA_B(), 1)), null, Result.NoSuchElement));
			printTest("AB_removeA_B_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_removeA_B(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_removeA_B_testListIter", testListIter(AB_removeA_B(), Result.NoException));
			printTest("AB_removeA_B_testListIter", testListIter(AB_removeA_B(), 0, Result.NoException));
			printTest("AB_removeA_B_testListIterHasPrev", testListIterHasPrev(AB_removeA_B(), 0, Result.False));
			printTest("AB_removeA_B_testListIterHasPrev", testListIterHasPrev(AB_removeA_B(), 1, Result.True));
			printTest("AB_removeA_B_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_removeA_B_testListIter1Prev1", testListIterPrev(AB_removeA_B(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_removeA_B_testListIterAddNeg1B", testListIterAdd(AB_removeA_B(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeA_B_testListIterAdd0B", testListIterAdd(AB_removeA_B(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_removeA_B_testListIterAdd1B", testListIterAdd(AB_removeA_B(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_removeA_B_testListIterAdd2B", testListIterAdd(AB_removeA_B(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeA_B_testListIterNextIndex0", testListIterNextIndex(AB_removeA_B(), 0, 0));
			printTest("AB_removeA_B_testListIterNextIndex1", testListIterNextIndex(AB_removeA_B(), 1, 1));
			printTest("AB_removeA_B_testListIterPreviousIndex0", testListIterPrevIndex(AB_removeA_B(), 0, -1));
			printTest("AB_removeA_B_testListIterPreviousIndex1", testListIterPrevIndex(AB_removeA_B(), 1, 0));
			printTest("AB_removeA_B_testListIterNext0AddB", testListNextAdd(AB_removeA_B(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_removeA_B_testListIterNext1AddB", testListNextAdd(AB_removeA_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_removeA_B_testListIterNext2AddB", testListNextAdd(AB_removeA_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_removeA_B_testListIterPrev1Index0AddB", testListPrevAdd(AB_removeA_B(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_removeA_B_testListIterPrev0Index0AddB", testListPrevAdd(AB_removeA_B(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_removeA_B_testListIterPrev0Index1AddB", testListPrevAdd(AB_removeA_B(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_removeA_B_testListIterPrev1Index1AddB", testListPrevAdd(AB_removeA_B(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_removeA_B_testListIterPrev0Index2AddB", testListPrevAdd(AB_removeA_B(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_removeA_B_testListIterNext0SetB", testListNextSet(AB_removeA_B(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_removeA_B_testListIterNext1SetB", testListNextSet(AB_removeA_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_removeA_B_testListIterNext2SetB", testListNextSet(AB_removeA_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_removeA_B_testListIterPrev0SetB", testListPrevSet(AB_removeA_B(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_removeA_B_testListIterPrev1SetB", testListPrevSet(AB_removeA_B(), ELEMENT_B, 1, 1, Result.NoException));
		
	
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_removeA_B");
			e.printStackTrace();
		}
	}


	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> remove(B) -> [A]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> remove(B) -> [A]
	 * @return [B] after remove(B)
	 */
	private IndexedUnsortedList<Integer> AB_removeB_A() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.remove(ELEMENT_B); //the change
		return list; //return resulting state
	}
	
	private void test_AB_removeB_A() {
		System.out.println("\nSCENARIO: [A,B] -> remove(B) -> [A]\n");
		try {
			printTest("AB_removeB_A_testAddToFrontB", testAddToFront(AB_removeB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_removeB_A_testAddToRearB", testAddToRear(AB_removeB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_removeB_A_testAddAfterAB", testAddAfter(AB_removeB_A(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("AB_removeB_A_testAddAfterCB", testAddAfter(AB_removeB_A(), ELEMENT_C, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_removeB_A_testAddAtIndexNeg1B", testAddAtIndex(AB_removeB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeB_A_testAddAtIndex0B", testAddAtIndex(AB_removeB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_removeB_A_testAddAtIndex1B", testAddAtIndex(AB_removeB_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_removeB_A_testAddB", testAdd(AB_removeB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_removeB_A_testRemoveFirst", testRemoveFirst(AB_removeB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeB_A_testRemoveLast", testRemoveLast(AB_removeB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeB_A_testRemoveA", testRemoveElement(AB_removeB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeB_A_testRemoveB", testRemoveElement(AB_removeB_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("AB_removeB_A_testRemoveNeg1", testRemoveIndex(AB_removeB_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_removeB_A_testRemove0", testRemoveIndex(AB_removeB_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeB_A_testRemove1", testRemoveIndex(AB_removeB_A(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_removeB_A_testFirst", testFirst(AB_removeB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeB_A_testLast", testLast(AB_removeB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeB_A_testContainsA", testContains(AB_removeB_A(), ELEMENT_A, Result.True));
			printTest("AB_removeB_A_testContainsB", testContains(AB_removeB_A(), ELEMENT_B, Result.False));
			printTest("AB_removeB_A_testIsEmpty", testIsEmpty(AB_removeB_A(), Result.False));
			printTest("AB_removeB_A_testSize", testSize(AB_removeB_A(), 1));
			printTest("AB_removeB_A_testToString", testToString(AB_removeB_A(), Result.ValidString));			
			printTest("AB_removeB_A_testSetNeg1B", testSet(AB_removeB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeB_A_testSet0B", testSet(AB_removeB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_removeB_A_testGetNeg1", testGet(AB_removeB_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_removeB_A_testGet0", testGet(AB_removeB_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeB_A_testIndexOfA", testIndexOf(AB_removeB_A(), ELEMENT_A, 0));
			printTest("AB_removeB_A_testIndexOfB", testIndexOf(AB_removeB_A(), ELEMENT_B, -1));
			// Iterator
			printTest("AB_removeB_A_testIter", testIter(AB_removeB_A(), Result.NoException));
			printTest("AB_removeB_A_testIterHasNext", testIterHasNext(AB_removeB_A().iterator(), Result.True));
			printTest("AB_removeB_A_testIterNext", testIterNext(AB_removeB_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeB_A_testIterRemove", testIterRemove(AB_removeB_A().iterator(), Result.IllegalState));
			printTest("AB_removeB_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_removeB_A(), 1), Result.False));
			printTest("AB_removeB_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_removeB_A(), 1), null, Result.NoSuchElement));
			printTest("AB_removeB_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_removeB_A(), 1), Result.NoException));
			printTest("AB_removeB_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_removeB_A(), 1)), Result.False));
			printTest("AB_removeB_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_removeB_A(), 1)), null, Result.NoSuchElement));
			printTest("AB_removeB_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_removeB_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_removeB_A_testListIter", testListIter(AB_removeB_A(), Result.NoException));
			printTest("AB_removeB_A_testListIter", testListIter(AB_removeB_A(), 0, Result.NoException));
			printTest("AB_removeB_A_testListIterHasPrev", testListIterHasPrev(AB_removeB_A(), 0, Result.False));
			printTest("AB_removeB_A_testListIterHasPrev", testListIterHasPrev(AB_removeB_A(), 1, Result.True));
			printTest("AB_removeB_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_removeB_A_testListIter1Prev1", testListIterPrev(AB_removeB_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_removeB_A_testListIterAddNeg1B", testListIterAdd(AB_removeB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeB_A_testListIterAdd0B", testListIterAdd(AB_removeB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_removeB_A_testListIterAdd1B", testListIterAdd(AB_removeB_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_removeB_A_testListIterAdd2B", testListIterAdd(AB_removeB_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_removeB_A_testListIterNextIndex0", testListIterNextIndex(AB_removeB_A(), 0, 0));
			printTest("AB_removeB_A_testListIterNextIndex1", testListIterNextIndex(AB_removeB_A(), 1, 1));
			printTest("AB_removeB_A_testListIterPreviousIndex0", testListIterPrevIndex(AB_removeB_A(), 0, -1));
			printTest("AB_removeB_A_testListIterPreviousIndex1", testListIterPrevIndex(AB_removeB_A(), 1, 0));
			printTest("AB_removeB_A_testListIterNext0AddB", testListNextAdd(AB_removeB_A(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_removeB_A_testListIterNext1AddB", testListNextAdd(AB_removeB_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_removeB_A_testListIterNext2AddB", testListNextAdd(AB_removeB_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_removeB_A_testListIterPrev1Index0AddB", testListPrevAdd(AB_removeB_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_removeB_A_testListIterPrev0Index0AddB", testListPrevAdd(AB_removeB_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_removeB_A_testListIterPrev0Index1AddB", testListPrevAdd(AB_removeB_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_removeB_A_testListIterPrev1Index1AddB", testListPrevAdd(AB_removeB_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_removeB_A_testListIterPrev0Index2AddB", testListPrevAdd(AB_removeB_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_removeB_A_testListIterNext0SetB", testListNextSet(AB_removeB_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_removeB_A_testListIterNext1SetB", testListNextSet(AB_removeB_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_removeB_A_testListIterNext2SetB", testListNextSet(AB_removeB_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_removeB_A_testListIterPrev0SetB", testListPrevSet(AB_removeB_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_removeB_A_testListIterPrev1SetB", testListPrevSet(AB_removeB_A(), ELEMENT_B, 1, 1, Result.NoException));
		
	
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_removeA_B");
			e.printStackTrace();
		}
	}

	

	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> remove(0) -> [B]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> remove(0) -> [B]
	 * @return [B] after remove(0)
	 */
	private IndexedUnsortedList<Integer> AB_remove0_B() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.remove(0); //the change
		return list; //return resulting state
	}
	
	private void test_AB_remove0_B() {
		System.out.println("\nSCENARIO: [A,B] -> remove(0) -> [B]\n");
		try {
			printTest("AB_remove0_B_testAddToFrontA", testAddToFront(AB_remove0_B(), ELEMENT_A, Result.NoException));
			printTest("AB_remove0_B_testAddToRearA", testAddToRear(AB_remove0_B(), ELEMENT_A, Result.NoException));
			printTest("AB_remove0_B_testAddAfterBA", testAddAfter(AB_remove0_B(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("AB_remove0_B_testAddAfterCA", testAddAfter(AB_remove0_B(), ELEMENT_C, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_remove0_B_testAddAtIndexNeg1A", testAddAtIndex(AB_remove0_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_remove0_B_testAddAtIndex0A", testAddAtIndex(AB_remove0_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_remove0_B_testAddAtIndex1A", testAddAtIndex(AB_remove0_B(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_remove0_B_testAddB", testAdd(AB_remove0_B(), ELEMENT_A, Result.NoException));
			printTest("AB_remove0_B_testRemoveFirst", testRemoveFirst(AB_remove0_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_remove0_B_testRemoveLast", testRemoveLast(AB_remove0_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_remove0_B_testRemoveA", testRemoveElement(AB_remove0_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_remove0_B_testRemoveB", testRemoveElement(AB_remove0_B(), ELEMENT_A, Result.NoSuchElement));
			printTest("AB_remove0_B_testRemoveNeg1", testRemoveIndex(AB_remove0_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_remove0_B_testRemove0", testRemoveIndex(AB_remove0_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_remove0_B_testRemove1", testRemoveIndex(AB_remove0_B(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_remove0_B_testFirst", testFirst(AB_remove0_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_remove0_B_testLast", testLast(AB_remove0_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_remove0_B_testContainsA", testContains(AB_remove0_B(), ELEMENT_B, Result.True));
			printTest("AB_remove0_B_testContainsB", testContains(AB_remove0_B(), ELEMENT_A, Result.False));
			printTest("AB_remove0_B_testIsEmpty", testIsEmpty(AB_remove0_B(), Result.False));
			printTest("AB_remove0_B_testSize", testSize(AB_remove0_B(), 1));
			printTest("AB_remove0_B_testToString", testToString(AB_remove0_B(), Result.ValidString));			
			printTest("AB_remove0_B_testSetNeg1A", testSet(AB_remove0_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_remove0_B_testSet0A", testSet(AB_remove0_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_remove0_B_testGetNeg1", testGet(AB_remove0_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_remove0_B_testGet0", testGet(AB_remove0_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_remove0_B_testIndexOfA", testIndexOf(AB_remove0_B(), ELEMENT_B, 0));
			printTest("AB_remove0_B_testIndexOfB", testIndexOf(AB_remove0_B(), ELEMENT_A, -1));
			// Iterator
			printTest("AB_remove0_B_testIter", testIter(AB_remove0_B(), Result.NoException));
			printTest("AB_remove0_B_testIterHasNext", testIterHasNext(AB_remove0_B().iterator(), Result.True));
			printTest("AB_remove0_B_testIterNext", testIterNext(AB_remove0_B().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_remove0_B_testIterRemove", testIterRemove(AB_remove0_B().iterator(), Result.IllegalState));
			printTest("AB_remove0_B_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_remove0_B(), 1), Result.False));
			printTest("AB_remove0_B_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_remove0_B(), 1), null, Result.NoSuchElement));
			printTest("AB_remove0_B_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_remove0_B(), 1), Result.NoException));
			printTest("AB_remove0_B_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_remove0_B(), 1)), Result.False));
			printTest("AB_remove0_B_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_remove0_B(), 1)), null, Result.NoSuchElement));
			printTest("AB_remove0_B_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_remove0_B(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_remove0_B_testListIter", testListIter(AB_remove0_B(), Result.NoException));
			printTest("AB_remove0_B_testListIter", testListIter(AB_remove0_B(), 0, Result.NoException));
			printTest("AB_remove0_B_testListIterHasPrev", testListIterHasPrev(AB_remove0_B(), 0, Result.False));
			printTest("AB_remove0_B_testListIterHasPrev", testListIterHasPrev(AB_remove0_B(), 1, Result.True));
			printTest("AB_remove0_B_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_remove0_B_testListIter1Prev1", testListIterPrev(AB_remove0_B(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_remove0_B_testListIterAddNeg1B", testListIterAdd(AB_remove0_B(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_remove0_B_testListIterAdd0B", testListIterAdd(AB_remove0_B(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_remove0_B_testListIterAdd1B", testListIterAdd(AB_remove0_B(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_remove0_B_testListIterAdd2B", testListIterAdd(AB_remove0_B(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_remove0_B_testListIterNextIndex0", testListIterNextIndex(AB_remove0_B(), 0, 0));
			printTest("AB_remove0_B_testListIterNextIndex1", testListIterNextIndex(AB_remove0_B(), 1, 1));
			printTest("AB_remove0_B_testListIterPreviousIndex0", testListIterPrevIndex(AB_remove0_B(), 0, -1));
			printTest("AB_remove0_B_testListIterPreviousIndex1", testListIterPrevIndex(AB_remove0_B(), 1, 0));
			printTest("AB_remove0_B_testListIterNext0AddB", testListNextAdd(AB_remove0_B(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_remove0_B_testListIterNext1AddB", testListNextAdd(AB_remove0_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_remove0_B_testListIterNext2AddB", testListNextAdd(AB_remove0_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_remove0_B_testListIterPrev1Index0AddB", testListPrevAdd(AB_remove0_B(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_remove0_B_testListIterPrev0Index0AddB", testListPrevAdd(AB_remove0_B(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_remove0_B_testListIterPrev0Index1AddB", testListPrevAdd(AB_remove0_B(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_remove0_B_testListIterPrev1Index1AddB", testListPrevAdd(AB_remove0_B(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_remove0_B_testListIterPrev0Index2AddB", testListPrevAdd(AB_remove0_B(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_remove0_B_testListIterNext0SetB", testListNextSet(AB_remove0_B(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_remove0_B_testListIterNext1SetB", testListNextSet(AB_remove0_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_remove0_B_testListIterNext2SetB", testListNextSet(AB_remove0_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_remove0_B_testListIterPrev0SetB", testListPrevSet(AB_remove0_B(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_remove0_B_testListIterPrev1SetB", testListPrevSet(AB_remove0_B(), ELEMENT_B, 1, 1, Result.NoException));
		
	
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_remove0_B");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> remove(1) -> [A]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> remove(1) -> [A]
	 * @return [A] after remove(1)
	 */
	private IndexedUnsortedList<Integer> AB_remove1_A() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.remove(1); //the change
		return list; //return resulting state
	}
	
	private void test_AB_remove1_A() {
		System.out.println("\nSCENARIO: [A,B] -> remove(1) -> [A]\n");
		try {
			printTest("AB_remove1_A_testAddToFrontB", testAddToFront(AB_remove1_A(), ELEMENT_B, Result.NoException));
			printTest("AB_remove1_A_testAddToRearB", testAddToRear(AB_remove1_A(), ELEMENT_B, Result.NoException));
			printTest("AB_remove1_A_testAddAfterAB", testAddAfter(AB_remove1_A(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("AB_remove1_A_testAddAfterCB", testAddAfter(AB_remove1_A(), ELEMENT_C, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_remove1_A_testAddAtIndexNeg1B", testAddAtIndex(AB_remove1_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_remove1_A_testAddAtIndex0B", testAddAtIndex(AB_remove1_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_remove1_A_testAddAtIndex1B", testAddAtIndex(AB_remove1_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_remove1_A_testAddB", testAdd(AB_remove1_A(), ELEMENT_B, Result.NoException));
			printTest("AB_remove1_A_testRemoveFirst", testRemoveFirst(AB_remove1_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_remove1_A_testRemoveLast", testRemoveLast(AB_remove1_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_remove1_A_testRemoveA", testRemoveElement(AB_remove1_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_remove1_A_testRemoveB", testRemoveElement(AB_remove1_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("AB_remove1_A_testRemoveNeg1", testRemoveIndex(AB_remove1_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_remove1_A_testRemove0", testRemoveIndex(AB_remove1_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_remove1_A_testRemove1", testRemoveIndex(AB_remove1_A(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_remove1_A_testFirst", testFirst(AB_remove1_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_remove1_A_testLast", testLast(AB_remove1_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_remove1_A_testContainsA", testContains(AB_remove1_A(), ELEMENT_A, Result.True));
			printTest("AB_remove1_A_testContainsB", testContains(AB_remove1_A(), ELEMENT_B, Result.False));
			printTest("AB_remove1_A_testIsEmpty", testIsEmpty(AB_remove1_A(), Result.False));
			printTest("AB_remove1_A_testSize", testSize(AB_remove1_A(), 1));
			printTest("AB_remove1_A_testToString", testToString(AB_remove1_A(), Result.ValidString));			
			printTest("AB_remove1_A_testSetNeg1B", testSet(AB_remove1_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_remove1_A_testSet0B", testSet(AB_remove1_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_remove1_A_testGetNeg1", testGet(AB_remove1_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_remove1_A_testGet0", testGet(AB_remove1_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_remove1_A_testIndexOfA", testIndexOf(AB_remove1_A(), ELEMENT_A, 0));
			printTest("AB_remove1_A_testIndexOfB", testIndexOf(AB_remove1_A(), ELEMENT_B, -1));
			// Iterator
			printTest("AB_remove1_A_testIter", testIter(AB_remove1_A(), Result.NoException));
			printTest("AB_remove1_A_testIterHasNext", testIterHasNext(AB_remove1_A().iterator(), Result.True));
			printTest("AB_remove1_A_testIterNext", testIterNext(AB_remove1_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_remove1_A_testIterRemove", testIterRemove(AB_remove1_A().iterator(), Result.IllegalState));
			printTest("AB_remove1_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_remove1_A(), 1), Result.False));
			printTest("AB_remove1_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_remove1_A(), 1), null, Result.NoSuchElement));
			printTest("AB_remove1_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_remove1_A(), 1), Result.NoException));
			printTest("AB_remove1_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_remove1_A(), 1)), Result.False));
			printTest("AB_remove1_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_remove1_A(), 1)), null, Result.NoSuchElement));
			printTest("AB_remove1_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_remove1_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_remove1_A_testListIter", testListIter(AB_remove1_A(), Result.NoException));
			printTest("AB_remove1_A_testListIter", testListIter(AB_remove1_A(), 0, Result.NoException));
			printTest("AB_remove1_A_testListIterHasPrev", testListIterHasPrev(AB_remove1_A(), 0, Result.False));
			printTest("AB_remove1_A_testListIterHasPrev", testListIterHasPrev(AB_remove1_A(), 1, Result.True));
			printTest("AB_remove1_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_remove1_A_testListIter1Prev1", testListIterPrev(AB_remove1_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_remove1_A_testListIterAddNeg1B", testListIterAdd(AB_remove1_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_remove1_A_testListIterAdd0B", testListIterAdd(AB_remove1_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_remove1_A_testListIterAdd1B", testListIterAdd(AB_remove1_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_remove1_A_testListIterAdd2B", testListIterAdd(AB_remove1_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_remove1_A_testListIterNextIndex0", testListIterNextIndex(AB_remove1_A(), 0, 0));
			printTest("AB_remove1_A_testListIterNextIndex1", testListIterNextIndex(AB_remove1_A(), 1, 1));
			printTest("AB_remove1_A_testListIterPreviousIndex0", testListIterPrevIndex(AB_remove1_A(), 0, -1));
			printTest("AB_remove1_A_testListIterPreviousIndex1", testListIterPrevIndex(AB_remove1_A(), 1, 0));
			printTest("AB_remove1_A_testListIterNext0AddB", testListNextAdd(AB_remove1_A(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_remove1_A_testListIterNext1AddB", testListNextAdd(AB_remove1_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_remove1_A_testListIterNext2AddB", testListNextAdd(AB_remove1_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_remove1_A_testListIterPrev1Index0AddB", testListPrevAdd(AB_remove1_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_remove1_A_testListIterPrev0Index0AddB", testListPrevAdd(AB_remove1_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_remove1_A_testListIterPrev0Index1AddB", testListPrevAdd(AB_remove1_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_remove1_A_testListIterPrev1Index1AddB", testListPrevAdd(AB_remove1_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_remove1_A_testListIterPrev0Index2AddB", testListPrevAdd(AB_remove1_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_remove1_A_testListIterNext0SetB", testListNextSet(AB_remove1_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_remove1_A_testListIterNext1SetB", testListNextSet(AB_remove1_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_remove1_A_testListIterNext2SetB", testListNextSet(AB_remove1_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_remove1_A_testListIterPrev0SetB", testListPrevSet(AB_remove1_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_remove1_A_testListIterPrev1SetB", testListPrevSet(AB_remove1_A(), ELEMENT_B, 1, 1, Result.NoException));
		
	
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_remove1_A");
			e.printStackTrace();
		}
	}


	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> set(0,C) -> [C,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> set(0,C) -> [C,B]
	 * @return [C,B] after set(0,C)
	 */
	private IndexedUnsortedList<Integer> AB_set0C_CB() {
		// It's a good idea to get the "starting state" from a previous
		// scenario's builder method. That way, you only add on the next
		// change and more advanced scenarios can build on previously
		// tested scenarios.
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.set(0,ELEMENT_C); //the change
		return list; //return resulting state
	}
	
	private void test_AB_set0C_CB() {
		System.out.println("\nSCENARIO: [A,B] -> set(0,C) -> [C,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_set0C_CB_testAddToFrontA", testAddToFront(AB_set0C_CB(), ELEMENT_A, Result.NoException));
			printTest("AB_set0C_CB_testAddToRearA", testAddToRear(AB_set0C_CB(), ELEMENT_A, Result.NoException));
			printTest("AB_set0C_CB_testAddAfterBA", testAddAfter(AB_set0C_CB(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("AB_set0C_CB_testAddAfterCA", testAddAfter(AB_set0C_CB(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("AB_set0C_CB_testAddAfterDA", testAddAfter(AB_set0C_CB(), ELEMENT_D, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_set0C_CB_testAddAtIndexNeg1A", testAddAtIndex(AB_set0C_CB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testAddAtIndex0A", testAddAtIndex(AB_set0C_CB(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_set0C_CB_testAddAtIndex1A", testAddAtIndex(AB_set0C_CB(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_set0C_CB_testAddAtIndex2A", testAddAtIndex(AB_set0C_CB(), 2, ELEMENT_A, Result.NoException));
			printTest("AB_set0C_CB_testAddAtIndex3A", testAddAtIndex(AB_set0C_CB(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testAddC", testAdd(AB_set0C_CB(), ELEMENT_C, Result.NoException));
			printTest("AB_set0C_CB_testRemoveFirst", testRemoveFirst(AB_set0C_CB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_set0C_CB_testRemoveLast", testRemoveLast(AB_set0C_CB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_set0C_CB_testRemoveA", testRemoveElement(AB_set0C_CB(), ELEMENT_A, Result.NoSuchElement));
			printTest("AB_set0C_CB_testRemoveB", testRemoveElement(AB_set0C_CB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_set0C_CB_testRemoveC", testRemoveElement(AB_set0C_CB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_set0C_CB_testRemoveNeg1", testRemoveIndex(AB_set0C_CB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testRemove0", testRemoveIndex(AB_set0C_CB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_set0C_CB_testRemove1", testRemoveIndex(AB_set0C_CB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_set0C_CB_testRemove2", testRemoveIndex(AB_set0C_CB(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testFirst", testFirst(AB_set0C_CB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_set0C_CB_testLast", testLast(AB_set0C_CB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_set0C_CB_testContainsA", testContains(AB_set0C_CB(), ELEMENT_A, Result.False));
			printTest("AB_set0C_CB_testContainsB", testContains(AB_set0C_CB(), ELEMENT_B, Result.True));
			printTest("AB_set0C_CB_testContainsC", testContains(AB_set0C_CB(), ELEMENT_C, Result.True));
			printTest("AB_set0C_CB_testIsEmpty", testIsEmpty(AB_set0C_CB(), Result.False));
			printTest("AB_set0C_CB_testSize", testSize(AB_set0C_CB(), 2));
			printTest("AB_set0C_CB_testToString", testToString(AB_set0C_CB(), Result.ValidString));
			printTest("AB_set0C_CB_testSetNeg1A", testSet(AB_set0C_CB(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testSet0A", testSet(AB_set0C_CB(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_set0C_CB_testSet1A", testSet(AB_set0C_CB(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_set0C_CB_testSet2A", testSet(AB_set0C_CB(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testGetNeg1", testGet(AB_set0C_CB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testGet0", testGet(AB_set0C_CB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_set0C_CB_testGet1", testGet(AB_set0C_CB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_set0C_CB_testGet2", testGet(AB_set0C_CB(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testIndexOfA", testIndexOf(AB_set0C_CB(), ELEMENT_A, -1));
			printTest("AB_set0C_CB_testIndexOfB", testIndexOf(AB_set0C_CB(), ELEMENT_B, 1));
			printTest("AB_set0C_CB_testIndexOfC", testIndexOf(AB_set0C_CB(), ELEMENT_C, 0));
			// Iterator
			printTest("AB_set0C_CB_testIter", testIter(AB_set0C_CB(), Result.NoException));
			printTest("AB_set0C_CB_testIterHasNext", testIterHasNext(AB_set0C_CB().iterator(), Result.True));
			printTest("AB_set0C_CB_testIterNext", testIterNext(AB_set0C_CB().iterator(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_set0C_CB_testIterRemove", testIterRemove(AB_set0C_CB().iterator(), Result.IllegalState));
			printTest("AB_set0C_CB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_set0C_CB(), 1), Result.True));
			printTest("AB_set0C_CB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_set0C_CB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("AB_set0C_CB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_set0C_CB(), 1), Result.NoException));
			printTest("AB_set0C_CB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_set0C_CB(), 1)), Result.True));
			printTest("AB_set0C_CB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_set0C_CB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("AB_set0C_CB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_set0C_CB(), 1)), Result.IllegalState));
			printTest("AB_set0C_CB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_set0C_CB(), 2), Result.False));
			printTest("AB_set0C_CB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_set0C_CB(), 2), null, Result.NoSuchElement));
			printTest("AB_set0C_CB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_set0C_CB(), 2), Result.NoException));
			printTest("AB_set0C_CB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_set0C_CB(), 2)), Result.False));
			printTest("AB_set0C_CB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_set0C_CB(), 2)), null, Result.NoSuchElement));
			printTest("AB_set0C_CB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_set0C_CB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("AB_set0C_CB_testListIter", testListIter(AB_set0C_CB(), Result.NoException));
			printTest("AB_set0C_CB_testListIter", testListIter(AB_set0C_CB(), 0, Result.NoException));
			printTest("AB_set0C_CB_testListIterHas0Prev", testListIterHasPrev(AB_set0C_CB(), 0, Result.False));
			printTest("AB_set0C_CB_testListIterHas1Prev", testListIterHasPrev(AB_set0C_CB(), 1, Result.True));
			printTest("AB_set0C_CB_testListIterHas2Prev", testListIterHasPrev(AB_set0C_CB(), 2, Result.True));
			printTest("AB_set0C_CB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_set0C_CB_testListIter1Prev1", testListIterPrev(AB_set0C_CB(), 1, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_set0C_CB_testListIter2Prev2", testListIterPrev(AB_set0C_CB(), 2, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_set0C_CB_testListIter2Prev1", testListIterPrev(AB_set0C_CB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_set0C_CB_testListIterAddNeg1C", testListIterAdd(AB_set0C_CB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testListIterAdd0C", testListIterAdd(AB_set0C_CB(), 0, ELEMENT_C, Result.NoException));
			printTest("AB_set0C_CB_testListIterAdd1C", testListIterAdd(AB_set0C_CB(), 1, ELEMENT_C, Result.NoException));
			printTest("AB_set0C_CB_testListIterAdd2C", testListIterAdd(AB_set0C_CB(), 2, ELEMENT_C, Result.NoException));
			printTest("AB_set0C_CB_testListIterAdd3C", testListIterAdd(AB_set0C_CB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testListIterNextIndex0", testListIterNextIndex(AB_set0C_CB(), 0, 0));
			printTest("AB_set0C_CB_testListIterNextIndex1", testListIterNextIndex(AB_set0C_CB(), 1, 1));
			printTest("AB_set0C_CB_testListIterNextIndex2", testListIterNextIndex(AB_set0C_CB(), 2, 2));
			printTest("AB_set0C_CB_testListIterPreviousIndex0", testListIterPrevIndex(AB_set0C_CB(), 0, -1));
			printTest("AB_set0C_CB_testListIterPreviousIndex1", testListIterPrevIndex(AB_set0C_CB(), 1, 0));
			printTest("AB_set0C_CB_testListIterPreviousIndex2", testListIterPrevIndex(AB_set0C_CB(), 2, 1));
			printTest("AB_set0C_CB_testListIterNext0AddC", testListNextAdd(AB_set0C_CB(), ELEMENT_C, 0, Result.NoException));
			printTest("AB_set0C_CB_testListIterNext1AddC", testListNextAdd(AB_set0C_CB(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_set0C_CB_testListIterNext2AddC", testListNextAdd(AB_set0C_CB(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_set0C_CB_testListIterNext3AddC", testListNextAdd(AB_set0C_CB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_set0C_CB_testListIterPrev1Index0AddC", testListPrevAdd(AB_set0C_CB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("AB_set0C_CB_testListIterPrev0Index0AddC", testListPrevAdd(AB_set0C_CB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("AB_set0C_CB_testListIterPrev0Index1AddC", testListPrevAdd(AB_set0C_CB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("AB_set0C_CB_testListIterPrev1Index1AddC", testListPrevAdd(AB_set0C_CB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_set0C_CB_testListIterPrev0Index2AddC", testListPrevAdd(AB_set0C_CB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("AB_set0C_CB_testListIterPrev1Index2AddC", testListPrevAdd(AB_set0C_CB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("AB_set0C_CB_testListIterPrev2Index2AddC", testListPrevAdd(AB_set0C_CB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("AB_set0C_CB_testListIterPrev0Index3AddC", testListPrevAdd(AB_set0C_CB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("AB_set0C_CB_testListIterNext0SetC", testListNextSet(AB_set0C_CB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("AB_set0C_CB_testListIterNext1SetC", testListNextSet(AB_set0C_CB(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_set0C_CB_testListIterNext2SetC", testListNextSet(AB_set0C_CB(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_set0C_CB_testListIterNext3SetC", testListNextSet(AB_set0C_CB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_set0C_CB_testListIterPrev0SetC", testListPrevSet(AB_set0C_CB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("AB_set0C_CB_testListIterPrev1SetC", testListPrevSet(AB_set0C_CB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_set0C_CB_testListIterPrev2SetC", testListPrevSet(AB_set0C_CB(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_set0C_CB");
			e.printStackTrace();
		
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> set(1,C) -> [A,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B] -> set(1,C) -> [A,C] 
	 * @return [A,C] after set(1,C)
	 */
	private IndexedUnsortedList<Integer> AB_set1C_AC() {
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); //starting state 
		list.set(1,ELEMENT_C); //the change
		return list; //return resulting state
	}

	/** Run all tests on scenario: [A,B,C] -> set(1,C) -> [A,C] */
	private void test_AB_set1C_AC() {
		System.out.println("\nSCENARIO: [A,B,C] -> set(1,C) -> [A,C]\n");
		try {
			printTest("AB_set1C_AC_testAddToFrontB", testAddToFront(AB_set1C_AC(), ELEMENT_B, Result.NoException));
			printTest("AB_set1C_AC_testAddToRearB", testAddToRear(AB_set1C_AC(), ELEMENT_B, Result.NoException));
			printTest("AB_set1C_AC_testAddAfterAB", testAddAfter(AB_set1C_AC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("AB_set1C_AC_testAddAfterBB", testAddAfter(AB_set1C_AC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_set1C_AC_testAddAfterCB", testAddAfter(AB_set1C_AC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("AB_set1C_AC_testAddAtIndexNeg1B", testAddAtIndex(AB_set1C_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testAddAtIndex0B", testAddAtIndex(AB_set1C_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_set1C_AC_testAddAtIndex1B", testAddAtIndex(AB_set1C_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_set1C_AC_testAddAtIndex2B", testAddAtIndex(AB_set1C_AC(), 2, ELEMENT_B, Result.NoException));
			printTest("AB_set1C_AC_testAddAtIndex3B", testAddAtIndex(AB_set1C_AC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testAddB", testAdd(AB_set1C_AC(), ELEMENT_B, Result.NoException));
			printTest("AB_set1C_AC_testRemoveFirst", testRemoveFirst(AB_set1C_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_set1C_AC_testRemoveLast", testRemoveLast(AB_set1C_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_set1C_AC_testRemoveA", testRemoveElement(AB_set1C_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_set1C_AC_testRemoveB", testRemoveElement(AB_set1C_AC(), ELEMENT_B, Result.NoSuchElement));
			printTest("AB_set1C_AC_testRemoveC", testRemoveElement(AB_set1C_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_set1C_AC_testRemoveNeg1", testRemoveIndex(AB_set1C_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testRemove0", testRemoveIndex(AB_set1C_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_set1C_AC_testRemove1", testRemoveIndex(AB_set1C_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_set1C_AC_testRemove2", testRemoveIndex(AB_set1C_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testFirst", testFirst(AB_set1C_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_set1C_AC_testLast", testLast(AB_set1C_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_set1C_AC_testContainsA", testContains(AB_set1C_AC(), ELEMENT_A, Result.True));
			printTest("AB_set1C_AC_testContainsB", testContains(AB_set1C_AC(), ELEMENT_B, Result.False));
			printTest("AB_set1C_AC_testContainsC", testContains(AB_set1C_AC(), ELEMENT_C, Result.True));
			printTest("AB_set1C_AC_testIsEmpty", testIsEmpty(AB_set1C_AC(), Result.False));
			printTest("AB_set1C_AC_testSize", testSize(AB_set1C_AC(), 2));
			printTest("AB_set1C_AC_testToString", testToString(AB_set1C_AC(), Result.ValidString));
			printTest("AB_set1C_AC_testSetNeg1B", testSet(AB_set1C_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testSet0B", testSet(AB_set1C_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_set1C_AC_testSet1B", testSet(AB_set1C_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_set1C_AC_testSet2B", testSet(AB_set1C_AC(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testGetNeg1", testGet(AB_set1C_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testGet0", testGet(AB_set1C_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_set1C_AC_testGet1", testGet(AB_set1C_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_set1C_AC_testGet2", testGet(AB_set1C_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testIndexOfA", testIndexOf(AB_set1C_AC(), ELEMENT_A, 0));
			printTest("AB_set1C_AC_testIndexOfB", testIndexOf(AB_set1C_AC(), ELEMENT_B, -1));
			printTest("AB_set1C_AC_testIndexOfC", testIndexOf(AB_set1C_AC(), ELEMENT_C, 1));
			// Iterator
			printTest("AB_set1C_AC_testIter", testIter(AB_set1C_AC(), Result.NoException));
			printTest("AB_set1C_AC_testIterHasNext", testIterHasNext(AB_set1C_AC().iterator(), Result.True));
			printTest("AB_set1C_AC_testIterNext", testIterNext(AB_set1C_AC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_set1C_AC_testIterRemove", testIterRemove(AB_set1C_AC().iterator(), Result.IllegalState));
			printTest("AB_set1C_AC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_set1C_AC(), 1), Result.True));
			printTest("AB_set1C_AC_iterNext_testIterNext", testIterNext(iterAfterNext(AB_set1C_AC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("AB_set1C_AC_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_set1C_AC(), 1), Result.NoException));
			printTest("AB_set1C_AC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_set1C_AC(), 1)), Result.True));
			printTest("AB_set1C_AC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_set1C_AC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("AB_set1C_AC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_set1C_AC(), 1)), Result.IllegalState));
			printTest("AB_set1C_AC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_set1C_AC(), 2), Result.False));
			printTest("AB_set1C_AC_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_set1C_AC(), 2), null, Result.NoSuchElement));
			printTest("AB_set1C_AC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_set1C_AC(), 2), Result.NoException));
			printTest("AB_set1C_AC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_set1C_AC(), 2)), Result.False));
			printTest("AB_set1C_AC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_set1C_AC(), 2)), null, Result.NoSuchElement));
			printTest("AB_set1C_AC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_set1C_AC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("AB_set1C_AC_testListIter", testListIter(AB_set1C_AC(), Result.NoException));
			printTest("AB_set1C_AC_testListIter", testListIter(AB_set1C_AC(), 0, Result.NoException));
			printTest("AB_set1C_AC_testListIterHas0Prev", testListIterHasPrev(AB_set1C_AC(), 0, Result.False));
			printTest("AB_set1C_AC_testListIterHas1Prev", testListIterHasPrev(AB_set1C_AC(), 1, Result.True));
			printTest("AB_set1C_AC_testListIterHas2Prev", testListIterHasPrev(AB_set1C_AC(), 2, Result.True));
			printTest("AB_set1C_AC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_set1C_AC_testListIter1Prev1", testListIterPrev(AB_set1C_AC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_set1C_AC_testListIter2Prev2", testListIterPrev(AB_set1C_AC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_set1C_AC_testListIter2Prev1", testListIterPrev(AB_set1C_AC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_set1C_AC_testListIterAddNeg1C", testListIterAdd(AB_set1C_AC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testListIterAdd0C", testListIterAdd(AB_set1C_AC(), 0, ELEMENT_C, Result.NoException));
			printTest("AB_set1C_AC_testListIterAdd1C", testListIterAdd(AB_set1C_AC(), 1, ELEMENT_C, Result.NoException));
			printTest("AB_set1C_AC_testListIterAdd2C", testListIterAdd(AB_set1C_AC(), 2, ELEMENT_C, Result.NoException));
			printTest("AB_set1C_AC_testListIterAdd3C", testListIterAdd(AB_set1C_AC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testListIterNextIndex0", testListIterNextIndex(AB_set1C_AC(), 0, 0));
			printTest("AB_set1C_AC_testListIterNextIndex1", testListIterNextIndex(AB_set1C_AC(), 1, 1));
			printTest("AB_set1C_AC_testListIterNextIndex2", testListIterNextIndex(AB_set1C_AC(), 2, 2));
			printTest("AB_set1C_AC_testListIterPreviousIndex0", testListIterPrevIndex(AB_set1C_AC(), 0, -1));
			printTest("AB_set1C_AC_testListIterPreviousIndex1", testListIterPrevIndex(AB_set1C_AC(), 1, 0));
			printTest("AB_set1C_AC_testListIterPreviousIndex2", testListIterPrevIndex(AB_set1C_AC(), 2, 1));
			printTest("AB_set1C_AC_testListIterNext0AddC", testListNextAdd(AB_set1C_AC(), ELEMENT_C, 0, Result.NoException));
			printTest("AB_set1C_AC_testListIterNext1AddC", testListNextAdd(AB_set1C_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_set1C_AC_testListIterNext2AddC", testListNextAdd(AB_set1C_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_set1C_AC_testListIterNext3AddC", testListNextAdd(AB_set1C_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_set1C_AC_testListIterPrev1Index0AddC", testListPrevAdd(AB_set1C_AC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("AB_set1C_AC_testListIterPrev0Index0AddC", testListPrevAdd(AB_set1C_AC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("AB_set1C_AC_testListIterPrev0Index1AddC", testListPrevAdd(AB_set1C_AC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("AB_set1C_AC_testListIterPrev1Index1AddC", testListPrevAdd(AB_set1C_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_set1C_AC_testListIterPrev0Index2AddC", testListPrevAdd(AB_set1C_AC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("AB_set1C_AC_testListIterPrev1Index2AddC", testListPrevAdd(AB_set1C_AC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("AB_set1C_AC_testListIterPrev2Index2AddC", testListPrevAdd(AB_set1C_AC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("AB_set1C_AC_testListIterPrev0Index3AddC", testListPrevAdd(AB_set1C_AC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("AB_set1C_AC_testListIterNext0SetC", testListNextSet(AB_set1C_AC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("AB_set1C_AC_testListIterNext1SetC", testListNextSet(AB_set1C_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_set1C_AC_testListIterNext2SetC", testListNextSet(AB_set1C_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_set1C_AC_testListIterNext3SetC", testListNextSet(AB_set1C_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_set1C_AC_testListIterPrev0SetC", testListPrevSet(AB_set1C_AC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("AB_set1C_AC_testListIterPrev1SetC", testListPrevSet(AB_set1C_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_set1C_AC_testListIterPrev2SetC", testListPrevSet(AB_set1C_AC(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_set1C_AC");
			e.printStackTrace();
		}
	}

	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> removeFirst( ) -> [B,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> removeFirst( ) -> [B,C] 
	 * @return [B,C] after removeFirst( )
	 */
	private IndexedUnsortedList<Integer> ABC_removeFirst_BC() {
		//once a builder method resulting in list [A,B,C] is available,
		//the following 4 statements leading up to remove(1) can be
		//replaced as shown in the previous examples
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.removeFirst();
		return list;
	}

	/** Run all tests on scenario: [A,B,C] -> removeFirst() -> [B,C] */
	private void test_ABC_removeFirst_BC() {
		System.out.println("\nSCENARIO: [A,B,C] -> removeFirst() -> [B,C]\n");
		try {
			printTest("ABC_removeFirst_BC_testAddToFrontA", testAddToFront(ABC_removeFirst_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_removeFirst_BC_testAddToRearA", testAddToRear(ABC_removeFirst_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_removeFirst_BC_testAddAfterAA", testAddAfter(ABC_removeFirst_BC(), ELEMENT_A, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_removeFirst_BC_testAddAfterBA", testAddAfter(ABC_removeFirst_BC(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("ABC_removeFirst_BC_testAddAfterCA", testAddAfter(ABC_removeFirst_BC(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("ABC_removeFirst_BC_testAddAtIndexNeg1A", testAddAtIndex(ABC_removeFirst_BC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testAddAtIndex0A", testAddAtIndex(ABC_removeFirst_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_removeFirst_BC_testAddAtIndex1A", testAddAtIndex(ABC_removeFirst_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_removeFirst_BC_testAddAtIndex2A", testAddAtIndex(ABC_removeFirst_BC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_removeFirst_BC_testAddAtIndex3A", testAddAtIndex(ABC_removeFirst_BC(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testAddA", testAdd(ABC_removeFirst_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_removeFirst_BC_testRemoveFirst", testRemoveFirst(ABC_removeFirst_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testRemoveLast", testRemoveLast(ABC_removeFirst_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testRemoveA", testRemoveElement(ABC_removeFirst_BC(), ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_removeFirst_BC_testRemoveB", testRemoveElement(ABC_removeFirst_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testRemoveC", testRemoveElement(ABC_removeFirst_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testRemoveNeg1", testRemoveIndex(ABC_removeFirst_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testRemove0", testRemoveIndex(ABC_removeFirst_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testRemove1", testRemoveIndex(ABC_removeFirst_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testRemove2", testRemoveIndex(ABC_removeFirst_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testFirst", testFirst(ABC_removeFirst_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testLast", testLast(ABC_removeFirst_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testContainsA", testContains(ABC_removeFirst_BC(), ELEMENT_A, Result.False));
			printTest("ABC_removeFirst_BC_testContainsB", testContains(ABC_removeFirst_BC(), ELEMENT_B, Result.True));
			printTest("ABC_removeFirst_BC_testContainsC", testContains(ABC_removeFirst_BC(), ELEMENT_C, Result.True));
			printTest("ABC_removeFirst_BC_testIsEmpty", testIsEmpty(ABC_removeFirst_BC(), Result.False));
			printTest("ABC_removeFirst_BC_testSize", testSize(ABC_removeFirst_BC(), 2));
			printTest("ABC_removeFirst_BC_testToString", testToString(ABC_removeFirst_BC(), Result.ValidString));
			printTest("ABC_removeFirst_BC_testSetNeg1A", testSet(ABC_removeFirst_BC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testSet0A", testSet(ABC_removeFirst_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_removeFirst_BC_testSet1A", testSet(ABC_removeFirst_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_removeFirst_BC_testSet2A", testSet(ABC_removeFirst_BC(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testGetNeg1", testGet(ABC_removeFirst_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testGet0", testGet(ABC_removeFirst_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testGet1", testGet(ABC_removeFirst_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testGet2", testGet(ABC_removeFirst_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testIndexOfA", testIndexOf(ABC_removeFirst_BC(), ELEMENT_A, -1));
			printTest("ABC_removeFirst_BC_testIndexOfB", testIndexOf(ABC_removeFirst_BC(), ELEMENT_B, 0));
			printTest("ABC_removeFirst_BC_testIndexOfC", testIndexOf(ABC_removeFirst_BC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_removeFirst_BC_testIter", testIter(ABC_removeFirst_BC(), Result.NoException));
			printTest("ABC_removeFirst_BC_testIterHasNext", testIterHasNext(ABC_removeFirst_BC().iterator(), Result.True));
			printTest("ABC_removeFirst_BC_testIterNext", testIterNext(ABC_removeFirst_BC().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testIterRemove", testIterRemove(ABC_removeFirst_BC().iterator(), Result.IllegalState));
			printTest("ABC_removeFirst_BC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_removeFirst_BC(), 1), Result.True));
			printTest("ABC_removeFirst_BC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_removeFirst_BC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_removeFirst_BC(), 1), Result.NoException));
			printTest("ABC_removeFirst_BC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_removeFirst_BC(), 1)), Result.True));
			printTest("ABC_removeFirst_BC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_removeFirst_BC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_removeFirst_BC(), 1)), Result.IllegalState));
			printTest("ABC_removeFirst_BC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_removeFirst_BC(), 2), Result.False));
			printTest("ABC_removeFirst_BC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_removeFirst_BC(), 2), null, Result.NoSuchElement));
			printTest("ABC_removeFirst_BC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_removeFirst_BC(), 2), Result.NoException));
			printTest("ABC_removeFirst_BC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_removeFirst_BC(), 2)), Result.False));
			printTest("ABC_removeFirst_BC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_removeFirst_BC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_removeFirst_BC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_removeFirst_BC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_removeFirst_BC_testListIter", testListIter(ABC_removeFirst_BC(), Result.NoException));
			printTest("ABC_removeFirst_BC_testListIter", testListIter(ABC_removeFirst_BC(), 0, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterHas0Prev", testListIterHasPrev(ABC_removeFirst_BC(), 0, Result.False));
			printTest("ABC_removeFirst_BC_testListIterHas1Prev", testListIterHasPrev(ABC_removeFirst_BC(), 1, Result.True));
			printTest("ABC_removeFirst_BC_testListIterHas2Prev", testListIterHasPrev(ABC_removeFirst_BC(), 2, Result.True));
			printTest("ABC_removeFirst_BC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_removeFirst_BC_testListIter1Prev1", testListIterPrev(ABC_removeFirst_BC(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testListIter2Prev2", testListIterPrev(ABC_removeFirst_BC(), 2, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testListIter2Prev1", testListIterPrev(ABC_removeFirst_BC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeFirst_BC_testListIterAddNeg1C", testListIterAdd(ABC_removeFirst_BC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testListIterAdd0C", testListIterAdd(ABC_removeFirst_BC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterAdd1C", testListIterAdd(ABC_removeFirst_BC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterAdd2C", testListIterAdd(ABC_removeFirst_BC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterAdd3C", testListIterAdd(ABC_removeFirst_BC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testListIterNextIndex0", testListIterNextIndex(ABC_removeFirst_BC(), 0, 0));
			printTest("ABC_removeFirst_BC_testListIterNextIndex1", testListIterNextIndex(ABC_removeFirst_BC(), 1, 1));
			printTest("ABC_removeFirst_BC_testListIterNextIndex2", testListIterNextIndex(ABC_removeFirst_BC(), 2, 2));
			printTest("ABC_removeFirst_BC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_removeFirst_BC(), 0, -1));
			printTest("ABC_removeFirst_BC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_removeFirst_BC(), 1, 0));
			printTest("ABC_removeFirst_BC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_removeFirst_BC(), 2, 1));
			printTest("ABC_removeFirst_BC_testListIterNext0AddC", testListNextAdd(ABC_removeFirst_BC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterNext1AddC", testListNextAdd(ABC_removeFirst_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterNext2AddC", testListNextAdd(ABC_removeFirst_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterNext3AddC", testListNextAdd(ABC_removeFirst_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_removeFirst_BC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_removeFirst_BC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_removeFirst_BC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_removeFirst_BC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_removeFirst_BC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_removeFirst_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_removeFirst_BC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_removeFirst_BC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_removeFirst_BC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_removeFirst_BC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_removeFirst_BC_testListIterNext0SetC", testListNextSet(ABC_removeFirst_BC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_removeFirst_BC_testListIterNext1SetC", testListNextSet(ABC_removeFirst_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterNext2SetC", testListNextSet(ABC_removeFirst_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterNext3SetC", testListNextSet(ABC_removeFirst_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_removeFirst_BC_testListIterPrev0SetC", testListPrevSet(ABC_removeFirst_BC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_removeFirst_BC_testListIterPrev1SetC", testListPrevSet(ABC_removeFirst_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_removeFirst_BC_testListIterPrev2SetC", testListPrevSet(ABC_removeFirst_BC(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_removeFirst_BC");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> removeLast() -> [A,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> removeLast() -> [A,B]
	 * @return [A.B] after removeLast()
	 */
	private IndexedUnsortedList<Integer> ABC_removeLast_AB() {
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.removeLast();
		return list;
	}
	
	/** Run all tests on scenario: [A,B,C] -> removeLast() -> [A,B] */
	private void test_ABC_removeLast_AB() {
		System.out.println("\nSCENARIO: [A,B,C] -> removeLast() -> [A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_removeLast_AB_testAddToFrontC", testAddToFront(ABC_removeLast_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testAddToRearC", testAddToRear(ABC_removeLast_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testAddAfterAC", testAddAfter(ABC_removeLast_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testAddAfterBC", testAddAfter(ABC_removeLast_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testAddAfterDC", testAddAfter(ABC_removeLast_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_removeLast_AB_testAddAtIndexNeg1C", testAddAtIndex(ABC_removeLast_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testAddAtIndex0C", testAddAtIndex(ABC_removeLast_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testAddAtIndex1C", testAddAtIndex(ABC_removeLast_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testAddAtIndex2C", testAddAtIndex(ABC_removeLast_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testAddAtIndex3C", testAddAtIndex(ABC_removeLast_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testAddC", testAdd(ABC_removeLast_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testRemoveFirst", testRemoveFirst(ABC_removeLast_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testRemoveLast", testRemoveLast(ABC_removeLast_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testRemoveA", testRemoveElement(ABC_removeLast_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testRemoveB", testRemoveElement(ABC_removeLast_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testRemoveC", testRemoveElement(ABC_removeLast_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_removeLast_AB_testRemoveNeg1", testRemoveIndex(ABC_removeLast_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testRemove0", testRemoveIndex(ABC_removeLast_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testRemove1", testRemoveIndex(ABC_removeLast_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testRemove2", testRemoveIndex(ABC_removeLast_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testFirst", testFirst(ABC_removeLast_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testLast", testLast(ABC_removeLast_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testContainsA", testContains(ABC_removeLast_AB(), ELEMENT_A, Result.True));
			printTest("ABC_removeLast_AB_testContainsB", testContains(ABC_removeLast_AB(), ELEMENT_B, Result.True));
			printTest("ABC_removeLast_AB_testContainsC", testContains(ABC_removeLast_AB(), ELEMENT_C, Result.False));
			printTest("ABC_removeLast_AB_testIsEmpty", testIsEmpty(ABC_removeLast_AB(), Result.False));
			printTest("ABC_removeLast_AB_testSize", testSize(ABC_removeLast_AB(), 2));
			printTest("ABC_removeLast_AB_testToString", testToString(ABC_removeLast_AB(), Result.ValidString));
			printTest("ABC_removeLast_AB_testSetNeg1C", testSet(ABC_removeLast_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testSet0C", testSet(ABC_removeLast_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testSet1C", testSet(ABC_removeLast_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testSet2C", testSet(ABC_removeLast_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testGetNeg1", testGet(ABC_removeLast_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testGet0", testGet(ABC_removeLast_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testGet1", testGet(ABC_removeLast_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testGet2", testGet(ABC_removeLast_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testIndexOfA", testIndexOf(ABC_removeLast_AB(), ELEMENT_A, 0));
			printTest("ABC_removeLast_AB_testIndexOfB", testIndexOf(ABC_removeLast_AB(), ELEMENT_B, 1));
			printTest("ABC_removeLast_AB_testIndexOfC", testIndexOf(ABC_removeLast_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("ABC_removeLast_AB_testIter", testIter(ABC_removeLast_AB(), Result.NoException));
			printTest("ABC_removeLast_AB_testIterHasNext", testIterHasNext(ABC_removeLast_AB().iterator(), Result.True));
			printTest("ABC_removeLast_AB_testIterNext", testIterNext(ABC_removeLast_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testIterRemove", testIterRemove(ABC_removeLast_AB().iterator(), Result.IllegalState));
			printTest("ABC_removeLast_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_removeLast_AB(), 1), Result.True));
			printTest("ABC_removeLast_AB_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_removeLast_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeLast_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_removeLast_AB(), 1), Result.NoException));
			printTest("ABC_removeLast_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_removeLast_AB(), 1)), Result.True));
			printTest("ABC_removeLast_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_removeLast_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeLast_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_removeLast_AB(), 1)), Result.IllegalState));
			printTest("ABC_removeLast_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_removeLast_AB(), 2), Result.False));
			printTest("ABC_removeLast_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_removeLast_AB(), 2), null, Result.NoSuchElement));
			printTest("ABC_removeLast_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_removeLast_AB(), 2), Result.NoException));
			printTest("ABC_removeLast_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_removeLast_AB(), 2)), Result.False));
			printTest("ABC_removeLast_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_removeLast_AB(), 2)), null, Result.NoSuchElement));
			printTest("ABC_removeLast_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_removeLast_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_removeLast_AB_testListIter", testListIter(ABC_removeLast_AB(), Result.NoException));
			printTest("ABC_removeLast_AB_testListIter", testListIter(ABC_removeLast_AB(), 0, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterHas0Prev", testListIterHasPrev(ABC_removeLast_AB(), 0, Result.False));
			printTest("ABC_removeLast_AB_testListIterHas1Prev", testListIterHasPrev(ABC_removeLast_AB(), 1, Result.True));
			printTest("ABC_removeLast_AB_testListIterHas2Prev", testListIterHasPrev(ABC_removeLast_AB(), 2, Result.True));
			printTest("ABC_removeLast_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_removeLast_AB_testListIter1Prev1", testListIterPrev(ABC_removeLast_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testListIter2Prev2", testListIterPrev(ABC_removeLast_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testListIter2Prev1", testListIterPrev(ABC_removeLast_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeLast_AB_testListIterAddNeg1C", testListIterAdd(ABC_removeLast_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testListIterAdd0C", testListIterAdd(ABC_removeLast_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterAdd1C", testListIterAdd(ABC_removeLast_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterAdd2C", testListIterAdd(ABC_removeLast_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterAdd3C", testListIterAdd(ABC_removeLast_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testListIterNextIndex0", testListIterNextIndex(ABC_removeLast_AB(), 0, 0));
			printTest("ABC_removeLast_AB_testListIterNextIndex1", testListIterNextIndex(ABC_removeLast_AB(), 1, 1));
			printTest("ABC_removeLast_AB_testListIterNextIndex2", testListIterNextIndex(ABC_removeLast_AB(), 2, 2));
			printTest("ABC_removeLast_AB_testListIterPreviousIndex0", testListIterPrevIndex(ABC_removeLast_AB(), 0, -1));
			printTest("ABC_removeLast_AB_testListIterPreviousIndex1", testListIterPrevIndex(ABC_removeLast_AB(), 1, 0));
			printTest("ABC_removeLast_AB_testListIterPreviousIndex2", testListIterPrevIndex(ABC_removeLast_AB(), 2, 1));
			printTest("ABC_removeLast_AB_testListIterNext0AddC", testListNextAdd(ABC_removeLast_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterNext1AddC", testListNextAdd(ABC_removeLast_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterNext2AddC", testListNextAdd(ABC_removeLast_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterNext3AddC", testListNextAdd(ABC_removeLast_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_removeLast_AB_testListIterPrev1Index0AddC", testListPrevAdd(ABC_removeLast_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_removeLast_AB_testListIterPrev0Index0AddC", testListPrevAdd(ABC_removeLast_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterPrev0Index1AddC", testListPrevAdd(ABC_removeLast_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterPrev1Index1AddC", testListPrevAdd(ABC_removeLast_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterPrev0Index2AddC", testListPrevAdd(ABC_removeLast_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterPrev1Index2AddC", testListPrevAdd(ABC_removeLast_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterPrev2Index2AddC", testListPrevAdd(ABC_removeLast_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterPrev0Index3AddC", testListPrevAdd(ABC_removeLast_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_removeLast_AB_testListIterNext0SetC", testListNextSet(ABC_removeLast_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_removeLast_AB_testListIterNext1SetC", testListNextSet(ABC_removeLast_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterNext2SetC", testListNextSet(ABC_removeLast_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterNext3SetC", testListNextSet(ABC_removeLast_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_removeLast_AB_testListIterPrev0SetC", testListPrevSet(ABC_removeLast_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_removeLast_AB_testListIterPrev1SetC", testListPrevSet(ABC_removeLast_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_removeLast_AB_testListIterPrev2SetC", testListPrevSet(ABC_removeLast_AB(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_removeLast_AB");
			e.printStackTrace();
		}
	}


	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> remove(A) -> [B,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> remove(A) -> [B,C] 
	 * @return [B,C] after remove(A)
	 */
	private IndexedUnsortedList<Integer> ABC_removeA_BC() {
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.remove(ELEMENT_A);
		return list;
	}

	/** Run all tests on scenario: [A,B,C] -> remove(A) -> [B,C] */
	private void test_ABC_removeA_BC() {
		System.out.println("\nSCENARIO: [A,B,C] -> remove(A) -> [B,C]\n");
		try {
			printTest("ABC_removeA_BC_testAddToFrontA", testAddToFront(ABC_removeA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_removeA_BC_testAddToRearA", testAddToRear(ABC_removeA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_removeA_BC_testAddAfterAA", testAddAfter(ABC_removeA_BC(), ELEMENT_A, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_removeA_BC_testAddAfterBA", testAddAfter(ABC_removeA_BC(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("ABC_removeA_BC_testAddAfterCA", testAddAfter(ABC_removeA_BC(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("ABC_removeA_BC_testAddAtIndexNeg1A", testAddAtIndex(ABC_removeA_BC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testAddAtIndex0A", testAddAtIndex(ABC_removeA_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_removeA_BC_testAddAtIndex1A", testAddAtIndex(ABC_removeA_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_removeA_BC_testAddAtIndex2A", testAddAtIndex(ABC_removeA_BC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_removeA_BC_testAddAtIndex3A", testAddAtIndex(ABC_removeA_BC(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testAddA", testAdd(ABC_removeA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_removeA_BC_testRemoveFirst", testRemoveFirst(ABC_removeA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeA_BC_testRemoveLast", testRemoveLast(ABC_removeA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeA_BC_testRemoveA", testRemoveElement(ABC_removeA_BC(), ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_removeA_BC_testRemoveB", testRemoveElement(ABC_removeA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeA_BC_testRemoveC", testRemoveElement(ABC_removeA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeA_BC_testRemoveNeg1", testRemoveIndex(ABC_removeA_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testRemove0", testRemoveIndex(ABC_removeA_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeA_BC_testRemove1", testRemoveIndex(ABC_removeA_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeA_BC_testRemove2", testRemoveIndex(ABC_removeA_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testFirst", testFirst(ABC_removeA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeA_BC_testLast", testLast(ABC_removeA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeA_BC_testContainsA", testContains(ABC_removeA_BC(), ELEMENT_A, Result.False));
			printTest("ABC_removeA_BC_testContainsB", testContains(ABC_removeA_BC(), ELEMENT_B, Result.True));
			printTest("ABC_removeA_BC_testContainsC", testContains(ABC_removeA_BC(), ELEMENT_C, Result.True));
			printTest("ABC_removeA_BC_testIsEmpty", testIsEmpty(ABC_removeA_BC(), Result.False));
			printTest("ABC_removeA_BC_testSize", testSize(ABC_removeA_BC(), 2));
			printTest("ABC_removeA_BC_testToString", testToString(ABC_removeA_BC(), Result.ValidString));
			printTest("ABC_removeA_BC_testSetNeg1A", testSet(ABC_removeA_BC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testSet0A", testSet(ABC_removeA_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_removeA_BC_testSet1A", testSet(ABC_removeA_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_removeA_BC_testSet2A", testSet(ABC_removeA_BC(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testGetNeg1", testGet(ABC_removeA_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testGet0", testGet(ABC_removeA_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeA_BC_testGet1", testGet(ABC_removeA_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeA_BC_testGet2", testGet(ABC_removeA_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testIndexOfA", testIndexOf(ABC_removeA_BC(), ELEMENT_A, -1));
			printTest("ABC_removeA_BC_testIndexOfB", testIndexOf(ABC_removeA_BC(), ELEMENT_B, 0));
			printTest("ABC_removeA_BC_testIndexOfC", testIndexOf(ABC_removeA_BC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_removeA_BC_testIter", testIter(ABC_removeA_BC(), Result.NoException));
			printTest("ABC_removeA_BC_testIterHasNext", testIterHasNext(ABC_removeA_BC().iterator(), Result.True));
			printTest("ABC_removeA_BC_testIterNext", testIterNext(ABC_removeA_BC().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeA_BC_testIterRemove", testIterRemove(ABC_removeA_BC().iterator(), Result.IllegalState));
			printTest("ABC_removeA_BC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_removeA_BC(), 1), Result.True));
			printTest("ABC_removeA_BC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_removeA_BC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeA_BC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_removeA_BC(), 1), Result.NoException));
			printTest("ABC_removeA_BC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_removeA_BC(), 1)), Result.True));
			printTest("ABC_removeA_BC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_removeA_BC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeA_BC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_removeA_BC(), 1)), Result.IllegalState));
			printTest("ABC_removeA_BC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_removeA_BC(), 2), Result.False));
			printTest("ABC_removeA_BC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_removeA_BC(), 2), null, Result.NoSuchElement));
			printTest("ABC_removeA_BC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_removeA_BC(), 2), Result.NoException));
			printTest("ABC_removeA_BC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_removeA_BC(), 2)), Result.False));
			printTest("ABC_removeA_BC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_removeA_BC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_removeA_BC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_removeA_BC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_removeA_BC_testListIter", testListIter(ABC_removeA_BC(), Result.NoException));
			printTest("ABC_removeA_BC_testListIter", testListIter(ABC_removeA_BC(), 0, Result.NoException));
			printTest("ABC_removeA_BC_testListIterHas0Prev", testListIterHasPrev(ABC_removeA_BC(), 0, Result.False));
			printTest("ABC_removeA_BC_testListIterHas1Prev", testListIterHasPrev(ABC_removeA_BC(), 1, Result.True));
			printTest("ABC_removeA_BC_testListIterHas2Prev", testListIterHasPrev(ABC_removeA_BC(), 2, Result.True));
			printTest("ABC_removeA_BC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_removeA_BC_testListIter1Prev1", testListIterPrev(ABC_removeA_BC(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeA_BC_testListIter2Prev2", testListIterPrev(ABC_removeA_BC(), 2, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeA_BC_testListIter2Prev1", testListIterPrev(ABC_removeA_BC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeA_BC_testListIterAddNeg1C", testListIterAdd(ABC_removeA_BC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testListIterAdd0C", testListIterAdd(ABC_removeA_BC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_removeA_BC_testListIterAdd1C", testListIterAdd(ABC_removeA_BC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_removeA_BC_testListIterAdd2C", testListIterAdd(ABC_removeA_BC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_removeA_BC_testListIterAdd3C", testListIterAdd(ABC_removeA_BC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testListIterNextIndex0", testListIterNextIndex(ABC_removeA_BC(), 0, 0));
			printTest("ABC_removeA_BC_testListIterNextIndex1", testListIterNextIndex(ABC_removeA_BC(), 1, 1));
			printTest("ABC_removeA_BC_testListIterNextIndex2", testListIterNextIndex(ABC_removeA_BC(), 2, 2));
			printTest("ABC_removeA_BC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_removeA_BC(), 0, -1));
			printTest("ABC_removeA_BC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_removeA_BC(), 1, 0));
			printTest("ABC_removeA_BC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_removeA_BC(), 2, 1));
			printTest("ABC_removeA_BC_testListIterNext0AddC", testListNextAdd(ABC_removeA_BC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_removeA_BC_testListIterNext1AddC", testListNextAdd(ABC_removeA_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_removeA_BC_testListIterNext2AddC", testListNextAdd(ABC_removeA_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_removeA_BC_testListIterNext3AddC", testListNextAdd(ABC_removeA_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_removeA_BC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_removeA_BC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_removeA_BC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_removeA_BC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_removeA_BC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_removeA_BC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_removeA_BC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_removeA_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_removeA_BC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_removeA_BC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_removeA_BC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_removeA_BC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_removeA_BC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_removeA_BC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_removeA_BC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_removeA_BC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_removeA_BC_testListIterNext0SetC", testListNextSet(ABC_removeA_BC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_removeA_BC_testListIterNext1SetC", testListNextSet(ABC_removeA_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_removeA_BC_testListIterNext2SetC", testListNextSet(ABC_removeA_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_removeA_BC_testListIterNext3SetC", testListNextSet(ABC_removeA_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_removeA_BC_testListIterPrev0SetC", testListPrevSet(ABC_removeA_BC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_removeA_BC_testListIterPrev1SetC", testListPrevSet(ABC_removeA_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_removeA_BC_testListIterPrev2SetC", testListPrevSet(ABC_removeA_BC(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_removeA_BC");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> remove(B) -> [A,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> remove(B) -> [A,C] 
	 * @return [A,C] after remove(B)
	 */
	private IndexedUnsortedList<Integer> ABC_removeB_AC() {
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.remove(ELEMENT_B);
		return list;
	}
	
	/** Run all tests on scenario: [A,B,C] -> remove(B) -> [A,C] */
	private void test_ABC_removeB_AC() {
		System.out.println("\nSCENARIO: [A,B,C] -> remove(B) -> [A,C]\n");
		try {
			printTest("ABC_removeB_AC_testAddToFrontB", testAddToFront(ABC_removeB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_removeB_AC_testAddToRearB", testAddToRear(ABC_removeB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_removeB_AC_testAddAfterAB", testAddAfter(ABC_removeB_AC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("ABC_removeB_AC_testAddAfterBB", testAddAfter(ABC_removeB_AC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_removeB_AC_testAddAfterCB", testAddAfter(ABC_removeB_AC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("ABC_removeB_AC_testAddAtIndexNeg1B", testAddAtIndex(ABC_removeB_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testAddAtIndex0B", testAddAtIndex(ABC_removeB_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_removeB_AC_testAddAtIndex1B", testAddAtIndex(ABC_removeB_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_removeB_AC_testAddAtIndex2B", testAddAtIndex(ABC_removeB_AC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_removeB_AC_testAddAtIndex3B", testAddAtIndex(ABC_removeB_AC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testAddD", testAdd(ABC_removeB_AC(), ELEMENT_D, Result.NoException));
			printTest("ABC_removeB_AC_testRemoveFirst", testRemoveFirst(ABC_removeB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeB_AC_testRemoveLast", testRemoveLast(ABC_removeB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeB_AC_testRemoveA", testRemoveElement(ABC_removeB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeB_AC_testRemoveB", testRemoveElement(ABC_removeB_AC(), ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_removeB_AC_testRemoveC", testRemoveElement(ABC_removeB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeB_AC_testRemoveNeg1", testRemoveIndex(ABC_removeB_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testRemove0", testRemoveIndex(ABC_removeB_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeB_AC_testRemove1", testRemoveIndex(ABC_removeB_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeB_AC_testRemove2", testRemoveIndex(ABC_removeB_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testFirst", testFirst(ABC_removeB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeB_AC_testLast", testLast(ABC_removeB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeB_AC_testContainsA", testContains(ABC_removeB_AC(), ELEMENT_A, Result.True));
			printTest("ABC_removeB_AC_testContainsB", testContains(ABC_removeB_AC(), ELEMENT_B, Result.False));
			printTest("ABC_removeB_AC_testContainsC", testContains(ABC_removeB_AC(), ELEMENT_C, Result.True));
			printTest("ABC_removeB_AC_testIsEmpty", testIsEmpty(ABC_removeB_AC(), Result.False));
			printTest("ABC_removeB_AC_testSize", testSize(ABC_removeB_AC(), 2));
			printTest("ABC_removeB_AC_testToString", testToString(ABC_removeB_AC(), Result.ValidString));
			printTest("ABC_removeB_AC_testSetNeg1B", testSet(ABC_removeB_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testSet0B", testSet(ABC_removeB_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_removeB_AC_testSet1B", testSet(ABC_removeB_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_removeB_AC_testSet2B", testSet(ABC_removeB_AC(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testGetNeg1", testGet(ABC_removeB_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testGet0", testGet(ABC_removeB_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeB_AC_testGet1", testGet(ABC_removeB_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeB_AC_testGet2", testGet(ABC_removeB_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testIndexOfA", testIndexOf(ABC_removeB_AC(), ELEMENT_A, 0));
			printTest("ABC_removeB_AC_testIndexOfB", testIndexOf(ABC_removeB_AC(), ELEMENT_B, -1));
			printTest("ABC_removeB_AC_testIndexOfC", testIndexOf(ABC_removeB_AC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_removeB_AC_testIter", testIter(ABC_removeB_AC(), Result.NoException));
			printTest("ABC_removeB_AC_testIterHasNext", testIterHasNext(ABC_removeB_AC().iterator(), Result.True));
			printTest("ABC_removeB_AC_testIterNext", testIterNext(ABC_removeB_AC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeB_AC_testIterRemove", testIterRemove(ABC_removeB_AC().iterator(), Result.IllegalState));
			printTest("ABC_removeB_AC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_removeB_AC(), 1), Result.True));
			printTest("ABC_removeB_AC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_removeB_AC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeB_AC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_removeB_AC(), 1), Result.NoException));
			printTest("ABC_removeB_AC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_removeB_AC(), 1)), Result.True));
			printTest("ABC_removeB_AC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_removeB_AC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeB_AC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_removeB_AC(), 1)), Result.IllegalState));
			printTest("ABC_removeB_AC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_removeB_AC(), 2), Result.False));
			printTest("ABC_removeB_AC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_removeB_AC(), 2), null, Result.NoSuchElement));
			printTest("ABC_removeB_AC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_removeB_AC(), 2), Result.NoException));
			printTest("ABC_removeB_AC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_removeB_AC(), 2)), Result.False));
			printTest("ABC_removeB_AC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_removeB_AC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_removeB_AC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_removeB_AC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_removeB_AC_testListIter", testListIter(ABC_removeB_AC(), Result.NoException));
			printTest("ABC_removeB_AC_testListIter", testListIter(ABC_removeB_AC(), 0, Result.NoException));
			printTest("ABC_removeB_AC_testListIterHas0Prev", testListIterHasPrev(ABC_removeB_AC(), 0, Result.False));
			printTest("ABC_removeB_AC_testListIterHas1Prev", testListIterHasPrev(ABC_removeB_AC(), 1, Result.True));
			printTest("ABC_removeB_AC_testListIterHas2Prev", testListIterHasPrev(ABC_removeB_AC(), 2, Result.True));
			printTest("ABC_removeB_AC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_removeB_AC_testListIter1Prev1", testListIterPrev(ABC_removeB_AC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeB_AC_testListIter2Prev2", testListIterPrev(ABC_removeB_AC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeB_AC_testListIter2Prev1", testListIterPrev(ABC_removeB_AC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_removeB_AC_testListIterAddNeg1C", testListIterAdd(ABC_removeB_AC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testListIterAdd0C", testListIterAdd(ABC_removeB_AC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_removeB_AC_testListIterAdd1C", testListIterAdd(ABC_removeB_AC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_removeB_AC_testListIterAdd2C", testListIterAdd(ABC_removeB_AC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_removeB_AC_testListIterAdd3C", testListIterAdd(ABC_removeB_AC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testListIterNextIndex0", testListIterNextIndex(ABC_removeB_AC(), 0, 0));
			printTest("ABC_removeB_AC_testListIterNextIndex1", testListIterNextIndex(ABC_removeB_AC(), 1, 1));
			printTest("ABC_removeB_AC_testListIterNextIndex2", testListIterNextIndex(ABC_removeB_AC(), 2, 2));
			printTest("ABC_removeB_AC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_removeB_AC(), 0, -1));
			printTest("ABC_removeB_AC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_removeB_AC(), 1, 0));
			printTest("ABC_removeB_AC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_removeB_AC(), 2, 1));
			printTest("ABC_removeB_AC_testListIterNext0AddC", testListNextAdd(ABC_removeB_AC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_removeB_AC_testListIterNext1AddC", testListNextAdd(ABC_removeB_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_removeB_AC_testListIterNext2AddC", testListNextAdd(ABC_removeB_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_removeB_AC_testListIterNext3AddC", testListNextAdd(ABC_removeB_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_removeB_AC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_removeB_AC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_removeB_AC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_removeB_AC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_removeB_AC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_removeB_AC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_removeB_AC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_removeB_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_removeB_AC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_removeB_AC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_removeB_AC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_removeB_AC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_removeB_AC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_removeB_AC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_removeB_AC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_removeB_AC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_removeB_AC_testListIterNext0SetC", testListNextSet(ABC_removeB_AC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_removeB_AC_testListIterNext1SetC", testListNextSet(ABC_removeB_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_removeB_AC_testListIterNext2SetC", testListNextSet(ABC_removeB_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_removeB_AC_testListIterNext3SetC", testListNextSet(ABC_removeB_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_removeB_AC_testListIterPrev0SetC", testListPrevSet(ABC_removeB_AC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_removeB_AC_testListIterPrev1SetC", testListPrevSet(ABC_removeB_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_removeB_AC_testListIterPrev2SetC", testListPrevSet(ABC_removeB_AC(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_removeB_AC");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> remove(C) -> [A,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> remove(C) -> [A,B]
	 * @return [A.B] after remove(C)
	 */
	private IndexedUnsortedList<Integer> ABC_removeC_AB() {
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.remove(ELEMENT_C);
		return list;
	}
	
	/** Run all tests on scenario: [A,B,C] -> remove(C) -> [A,B] */
	private void test_ABC_removeC_AB() {
		System.out.println("\nSCENARIO: [A,B,C] -> remove(C) -> [A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_removeC_AB_testAddToFrontC", testAddToFront(ABC_removeC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testAddToRearC", testAddToRear(ABC_removeC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testAddAfterAC", testAddAfter(ABC_removeC_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testAddAfterBC", testAddAfter(ABC_removeC_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testAddAfterDC", testAddAfter(ABC_removeC_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_removeC_AB_testAddAtIndexNeg1C", testAddAtIndex(ABC_removeC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testAddAtIndex0C", testAddAtIndex(ABC_removeC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testAddAtIndex1C", testAddAtIndex(ABC_removeC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testAddAtIndex2C", testAddAtIndex(ABC_removeC_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testAddAtIndex3C", testAddAtIndex(ABC_removeC_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testAddC", testAdd(ABC_removeC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testRemoveFirst", testRemoveFirst(ABC_removeC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeC_AB_testRemoveLast", testRemoveLast(ABC_removeC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeC_AB_testRemoveA", testRemoveElement(ABC_removeC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeC_AB_testRemoveB", testRemoveElement(ABC_removeC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeC_AB_testRemoveC", testRemoveElement(ABC_removeC_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_removeC_AB_testRemoveNeg1", testRemoveIndex(ABC_removeC_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testRemove0", testRemoveIndex(ABC_removeC_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeC_AB_testRemove1", testRemoveIndex(ABC_removeC_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeC_AB_testRemove2", testRemoveIndex(ABC_removeC_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testFirst", testFirst(ABC_removeC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeC_AB_testLast", testLast(ABC_removeC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeC_AB_testContainsA", testContains(ABC_removeC_AB(), ELEMENT_A, Result.True));
			printTest("ABC_removeC_AB_testContainsB", testContains(ABC_removeC_AB(), ELEMENT_B, Result.True));
			printTest("ABC_removeC_AB_testContainsC", testContains(ABC_removeC_AB(), ELEMENT_C, Result.False));
			printTest("ABC_removeC_AB_testIsEmpty", testIsEmpty(ABC_removeC_AB(), Result.False));
			printTest("ABC_removeC_AB_testSize", testSize(ABC_removeC_AB(), 2));
			printTest("ABC_removeC_AB_testToString", testToString(ABC_removeC_AB(), Result.ValidString));
			printTest("ABC_removeC_AB_", testSet(ABC_removeC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testSet0C", testSet(ABC_removeC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testSet1C", testSet(ABC_removeC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testSet2C", testSet(ABC_removeC_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testGetNeg1", testGet(ABC_removeC_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testGet0", testGet(ABC_removeC_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeC_AB_testGet1", testGet(ABC_removeC_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeC_AB_testGet2", testGet(ABC_removeC_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testIndexOfA", testIndexOf(ABC_removeC_AB(), ELEMENT_A, 0));
			printTest("ABC_removeC_AB_testIndexOfB", testIndexOf(ABC_removeC_AB(), ELEMENT_B, 1));
			printTest("ABC_removeC_AB_testIndexOfC", testIndexOf(ABC_removeC_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("ABC_removeC_AB_testIter", testIter(ABC_removeC_AB(), Result.NoException));
			printTest("ABC_removeC_AB_testIterHasNext", testIterHasNext(ABC_removeC_AB().iterator(), Result.True));
			printTest("ABC_removeC_AB_testIterNext", testIterNext(ABC_removeC_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeC_AB_testIterRemove", testIterRemove(ABC_removeC_AB().iterator(), Result.IllegalState));
			printTest("ABC_removeC_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_removeC_AB(), 1), Result.True));
			printTest("ABC_removeC_AB_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_removeC_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeC_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_removeC_AB(), 1), Result.NoException));
			printTest("ABC_removeC_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_removeC_AB(), 1)), Result.True));
			printTest("ABC_removeC_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_removeC_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeC_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_removeC_AB(), 1)), Result.IllegalState));
			printTest("ABC_removeC_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_removeC_AB(), 2), Result.False));
			printTest("ABC_removeC_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_removeC_AB(), 2), null, Result.NoSuchElement));
			printTest("ABC_removeC_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_removeC_AB(), 2), Result.NoException));
			printTest("ABC_removeC_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_removeC_AB(), 2)), Result.False));
			printTest("ABC_removeC_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_removeC_AB(), 2)), null, Result.NoSuchElement));
			printTest("ABC_removeC_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_removeC_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_removeC_AB_testListIter", testListIter(ABC_removeC_AB(), Result.NoException));
			printTest("ABC_removeC_AB_testListIter", testListIter(ABC_removeC_AB(), 0, Result.NoException));
			printTest("ABC_removeC_AB_testListIterHas0Prev", testListIterHasPrev(ABC_removeC_AB(), 0, Result.False));
			printTest("ABC_removeC_AB_testListIterHas1Prev", testListIterHasPrev(ABC_removeC_AB(), 1, Result.True));
			printTest("ABC_removeC_AB_testListIterHas2Prev", testListIterHasPrev(ABC_removeC_AB(), 2, Result.True));
			printTest("ABC_removeC_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_removeC_AB_testListIter1Prev1", testListIterPrev(ABC_removeC_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeC_AB_testListIter2Prev2", testListIterPrev(ABC_removeC_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_removeC_AB_testListIter2Prev1", testListIterPrev(ABC_removeC_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_removeC_AB_testListIterAddNeg1C", testListIterAdd(ABC_removeC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testListIterAdd0C", testListIterAdd(ABC_removeC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testListIterAdd1C", testListIterAdd(ABC_removeC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testListIterAdd2C", testListIterAdd(ABC_removeC_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_removeC_AB_testListIterAdd3C", testListIterAdd(ABC_removeC_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testListIterNextIndex0", testListIterNextIndex(ABC_removeC_AB(), 0, 0));
			printTest("ABC_removeC_AB_testListIterNextIndex1", testListIterNextIndex(ABC_removeC_AB(), 1, 1));
			printTest("ABC_removeC_AB_testListIterNextIndex2", testListIterNextIndex(ABC_removeC_AB(), 2, 2));
			printTest("ABC_removeC_AB_testListIterPreviousIndex0", testListIterPrevIndex(ABC_removeC_AB(), 0, -1));
			printTest("ABC_removeC_AB_testListIterPreviousIndex1", testListIterPrevIndex(ABC_removeC_AB(), 1, 0));
			printTest("ABC_removeC_AB_testListIterPreviousIndex2", testListIterPrevIndex(ABC_removeC_AB(), 2, 1));
			printTest("ABC_removeC_AB_testListIterNext0AddC", testListNextAdd(ABC_removeC_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_removeC_AB_testListIterNext1AddC", testListNextAdd(ABC_removeC_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_removeC_AB_testListIterNext2AddC", testListNextAdd(ABC_removeC_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_removeC_AB_testListIterNext3AddC", testListNextAdd(ABC_removeC_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_removeC_AB_testListIterPrev1Index0AddC", testListPrevAdd(ABC_removeC_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_removeC_AB_testListIterPrev0Index0AddC", testListPrevAdd(ABC_removeC_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_removeC_AB_testListIterPrev0Index1AddC", testListPrevAdd(ABC_removeC_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_removeC_AB_testListIterPrev1Index1AddC", testListPrevAdd(ABC_removeC_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_removeC_AB_testListIterPrev0Index2AddC", testListPrevAdd(ABC_removeC_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_removeC_AB_testListIterPrev1Index2AddC", testListPrevAdd(ABC_removeC_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_removeC_AB_testListIterPrev2Index2AddC", testListPrevAdd(ABC_removeC_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_removeC_AB_testListIterPrev0Index3AddC", testListPrevAdd(ABC_removeC_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_removeC_AB_testListIterNext0SetC", testListNextSet(ABC_removeC_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_removeC_AB_testListIterNext1SetC", testListNextSet(ABC_removeC_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_removeC_AB_testListIterNext2SetC", testListNextSet(ABC_removeC_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_removeC_AB_testListIterNext3SetC", testListNextSet(ABC_removeC_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_removeC_AB_testListIterPrev0SetC", testListPrevSet(ABC_removeC_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_removeC_AB_testListIterPrev1SetC", testListPrevSet(ABC_removeC_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_removeC_AB_testListIterPrev2SetC", testListPrevSet(ABC_removeC_AB(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_removeC_AB");
			e.printStackTrace();
		}
	}


	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> remove(0) -> [B,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> remove(0) -> [B,C] 
	 * @return [B,C] after remove(0)
	 */
	private IndexedUnsortedList<Integer> ABC_remove0_BC() {
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.remove(0);
		return list;
	}

	/** Run all tests on scenario: [A,B,C] -> remove(0) -> [B,C] */
	private void test_ABC_remove0_BC() {
		System.out.println("\nSCENARIO: [A,B,C] -> remove(0) -> [B,C]\n");
		try {
			printTest("ABC_remove0_BC_testAddToFrontA", testAddToFront(ABC_remove0_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_remove0_BC_testAddToRearA", testAddToRear(ABC_remove0_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_remove0_BC_testAddAfterAA", testAddAfter(ABC_remove0_BC(), ELEMENT_A, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_remove0_BC_testAddAfterBA", testAddAfter(ABC_remove0_BC(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("ABC_remove0_BC_testAddAfterCA", testAddAfter(ABC_remove0_BC(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("ABC_remove0_BC_testAddAtIndexNeg1A", testAddAtIndex(ABC_remove0_BC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testAddAtIndex0A", testAddAtIndex(ABC_remove0_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_remove0_BC_testAddAtIndex1A", testAddAtIndex(ABC_remove0_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_remove0_BC_testAddAtIndex2A", testAddAtIndex(ABC_remove0_BC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_remove0_BC_testAddAtIndex3A", testAddAtIndex(ABC_remove0_BC(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testAddA", testAdd(ABC_remove0_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_remove0_BC_testRemoveFirst", testRemoveFirst(ABC_remove0_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove0_BC_testRemoveLast", testRemoveLast(ABC_remove0_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove0_BC_testRemoveA", testRemoveElement(ABC_remove0_BC(), ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_remove0_BC_testRemoveB", testRemoveElement(ABC_remove0_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove0_BC_testRemoveC", testRemoveElement(ABC_remove0_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove0_BC_testRemoveNeg1", testRemoveIndex(ABC_remove0_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testRemove0", testRemoveIndex(ABC_remove0_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove0_BC_testRemove1", testRemoveIndex(ABC_remove0_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove0_BC_testRemove2", testRemoveIndex(ABC_remove0_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testFirst", testFirst(ABC_remove0_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove0_BC_testLast", testLast(ABC_remove0_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove0_BC_testContainsA", testContains(ABC_remove0_BC(), ELEMENT_A, Result.False));
			printTest("ABC_remove0_BC_testContainsB", testContains(ABC_remove0_BC(), ELEMENT_B, Result.True));
			printTest("ABC_remove0_BC_testContainsC", testContains(ABC_remove0_BC(), ELEMENT_C, Result.True));
			printTest("ABC_remove0_BC_testIsEmpty", testIsEmpty(ABC_remove0_BC(), Result.False));
			printTest("ABC_remove0_BC_testSize", testSize(ABC_remove0_BC(), 2));
			printTest("ABC_remove0_BC_testToString", testToString(ABC_remove0_BC(), Result.ValidString));
			printTest("ABC_remove0_BC_testSetNeg1A", testSet(ABC_remove0_BC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testSet0A", testSet(ABC_remove0_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_remove0_BC_testSet1A", testSet(ABC_remove0_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_remove0_BC_testSet2A", testSet(ABC_remove0_BC(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testGetNeg1", testGet(ABC_remove0_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testGet0", testGet(ABC_remove0_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove0_BC_testGet1", testGet(ABC_remove0_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove0_BC_testGet2", testGet(ABC_remove0_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testIndexOfA", testIndexOf(ABC_remove0_BC(), ELEMENT_A, -1));
			printTest("ABC_remove0_BC_testIndexOfB", testIndexOf(ABC_remove0_BC(), ELEMENT_B, 0));
			printTest("ABC_remove0_BC_testIndexOfC", testIndexOf(ABC_remove0_BC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_remove0_BC_testIter", testIter(ABC_remove0_BC(), Result.NoException));
			printTest("ABC_remove0_BC_testIterHasNext", testIterHasNext(ABC_remove0_BC().iterator(), Result.True));
			printTest("ABC_remove0_BC_testIterNext", testIterNext(ABC_remove0_BC().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove0_BC_testIterRemove", testIterRemove(ABC_remove0_BC().iterator(), Result.IllegalState));
			printTest("ABC_remove0_BC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_remove0_BC(), 1), Result.True));
			printTest("ABC_remove0_BC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_remove0_BC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove0_BC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_remove0_BC(), 1), Result.NoException));
			printTest("ABC_remove0_BC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_remove0_BC(), 1)), Result.True));
			printTest("ABC_remove0_BC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_remove0_BC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove0_BC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_remove0_BC(), 1)), Result.IllegalState));
			printTest("ABC_remove0_BC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_remove0_BC(), 2), Result.False));
			printTest("ABC_remove0_BC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_remove0_BC(), 2), null, Result.NoSuchElement));
			printTest("ABC_remove0_BC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_remove0_BC(), 2), Result.NoException));
			printTest("ABC_remove0_BC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_remove0_BC(), 2)), Result.False));
			printTest("ABC_remove0_BC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_remove0_BC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_remove0_BC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_remove0_BC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_remove0_BC_testListIter", testListIter(ABC_remove0_BC(), Result.NoException));
			printTest("ABC_remove0_BC_testListIter", testListIter(ABC_remove0_BC(), 0, Result.NoException));
			printTest("ABC_remove0_BC_testListIterHas0Prev", testListIterHasPrev(ABC_remove0_BC(), 0, Result.False));
			printTest("ABC_remove0_BC_testListIterHas1Prev", testListIterHasPrev(ABC_remove0_BC(), 1, Result.True));
			printTest("ABC_remove0_BC_testListIterHas2Prev", testListIterHasPrev(ABC_remove0_BC(), 2, Result.True));
			printTest("ABC_remove0_BC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_remove0_BC_testListIter1Prev1", testListIterPrev(ABC_remove0_BC(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove0_BC_testListIter2Prev2", testListIterPrev(ABC_remove0_BC(), 2, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove0_BC_testListIter2Prev1", testListIterPrev(ABC_remove0_BC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove0_BC_testListIterAddNeg1C", testListIterAdd(ABC_remove0_BC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testListIterAdd0C", testListIterAdd(ABC_remove0_BC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_remove0_BC_testListIterAdd1C", testListIterAdd(ABC_remove0_BC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_remove0_BC_testListIterAdd2C", testListIterAdd(ABC_remove0_BC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_remove0_BC_testListIterAdd3C", testListIterAdd(ABC_remove0_BC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testListIterNextIndex0", testListIterNextIndex(ABC_remove0_BC(), 0, 0));
			printTest("ABC_remove0_BC_testListIterNextIndex1", testListIterNextIndex(ABC_remove0_BC(), 1, 1));
			printTest("ABC_remove0_BC_testListIterNextIndex2", testListIterNextIndex(ABC_remove0_BC(), 2, 2));
			printTest("ABC_remove0_BC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_remove0_BC(), 0, -1));
			printTest("ABC_remove0_BC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_remove0_BC(), 1, 0));
			printTest("ABC_remove0_BC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_remove0_BC(), 2, 1));
			printTest("ABC_remove0_BC_testListIterNext0AddC", testListNextAdd(ABC_remove0_BC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_remove0_BC_testListIterNext1AddC", testListNextAdd(ABC_remove0_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_remove0_BC_testListIterNext2AddC", testListNextAdd(ABC_remove0_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_remove0_BC_testListIterNext3AddC", testListNextAdd(ABC_remove0_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_remove0_BC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_remove0_BC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_remove0_BC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_remove0_BC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_remove0_BC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_remove0_BC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_remove0_BC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_remove0_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_remove0_BC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_remove0_BC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_remove0_BC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_remove0_BC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_remove0_BC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_remove0_BC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_remove0_BC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_remove0_BC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_remove0_BC_testListIterNext0SetC", testListNextSet(ABC_remove0_BC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_remove0_BC_testListIterNext1SetC", testListNextSet(ABC_remove0_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_remove0_BC_testListIterNext2SetC", testListNextSet(ABC_remove0_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_remove0_BC_testListIterNext3SetC", testListNextSet(ABC_remove0_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_remove0_BC_testListIterPrev0SetC", testListPrevSet(ABC_remove0_BC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_remove0_BC_testListIterPrev1SetC", testListPrevSet(ABC_remove0_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_remove0_BC_testListIterPrev2SetC", testListPrevSet(ABC_remove0_BC(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_remove0_BC");
			e.printStackTrace();
		}
	}



	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> remove(1) -> [A,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> remove(1) -> [A,C] 
	 * @return [A,C] after remove(1)
	 */
	private IndexedUnsortedList<Integer> ABC_remove1_AC() {
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.remove(1);
		return list;
	}

	/** Run all tests on scenario: [A,B,C] -> remove(1) -> [A,C] */
	private void test_ABC_remove1_AC() {
		System.out.println("\nSCENARIO: [A,B,C] -> remove(1) -> [A,C]\n");
		try {
			printTest("ABC_remove1_AC_testAddToFrontB", testAddToFront(ABC_remove1_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_remove1_AC_testAddToRearB", testAddToRear(ABC_remove1_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_remove1_AC_testAddAfterAB", testAddAfter(ABC_remove1_AC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("ABC_remove1_AC_testAddAfterBB", testAddAfter(ABC_remove1_AC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_remove1_AC_testAddAfterCB", testAddAfter(ABC_remove1_AC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("ABC_remove1_AC_testAddAtIndexNeg1B", testAddAtIndex(ABC_remove1_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testAddAtIndex0B", testAddAtIndex(ABC_remove1_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_remove1_AC_testAddAtIndex1B", testAddAtIndex(ABC_remove1_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_remove1_AC_testAddAtIndex2B", testAddAtIndex(ABC_remove1_AC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_remove1_AC_testAddAtIndex3B", testAddAtIndex(ABC_remove1_AC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testAddD", testAdd(ABC_remove1_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_remove1_AC_testRemoveFirst", testRemoveFirst(ABC_remove1_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove1_AC_testRemoveLast", testRemoveLast(ABC_remove1_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove1_AC_testRemoveA", testRemoveElement(ABC_remove1_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove1_AC_testRemoveB", testRemoveElement(ABC_remove1_AC(), ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_remove1_AC_testRemoveC", testRemoveElement(ABC_remove1_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove1_AC_testRemoveNeg1", testRemoveIndex(ABC_remove1_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testRemove0", testRemoveIndex(ABC_remove1_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove1_AC_testRemove1", testRemoveIndex(ABC_remove1_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove1_AC_testRemove2", testRemoveIndex(ABC_remove1_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testFirst", testFirst(ABC_remove1_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove1_AC_testLast", testLast(ABC_remove1_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove1_AC_testContainsA", testContains(ABC_remove1_AC(), ELEMENT_A, Result.True));
			printTest("ABC_remove1_AC_testContainsB", testContains(ABC_remove1_AC(), ELEMENT_B, Result.False));
			printTest("ABC_remove1_AC_testContainsC", testContains(ABC_remove1_AC(), ELEMENT_C, Result.True));
			printTest("ABC_remove1_AC_testIsEmpty", testIsEmpty(ABC_remove1_AC(), Result.False));
			printTest("ABC_remove1_AC_testSize", testSize(ABC_remove1_AC(), 2));
			printTest("ABC_remove1_AC_testToString", testToString(ABC_remove1_AC(), Result.ValidString));
			printTest("ABC_remove1_AC_testSetNeg1B", testSet(ABC_remove1_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testSet0B", testSet(ABC_remove1_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_remove1_AC_testSet1B", testSet(ABC_remove1_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_remove1_AC_testSet2B", testSet(ABC_remove1_AC(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testGetNeg1", testGet(ABC_remove1_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testGet0", testGet(ABC_remove1_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove1_AC_testGet1", testGet(ABC_remove1_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove1_AC_testGet2", testGet(ABC_remove1_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testIndexOfA", testIndexOf(ABC_remove1_AC(), ELEMENT_A, 0));
			printTest("ABC_remove1_AC_testIndexOfB", testIndexOf(ABC_remove1_AC(), ELEMENT_B, -1));
			printTest("ABC_remove1_AC_testIndexOfC", testIndexOf(ABC_remove1_AC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_remove1_AC_testIter", testIter(ABC_remove1_AC(), Result.NoException));
			printTest("ABC_remove1_AC_testIterHasNext", testIterHasNext(ABC_remove1_AC().iterator(), Result.True));
			printTest("ABC_remove1_AC_testIterNext", testIterNext(ABC_remove1_AC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove1_AC_testIterRemove", testIterRemove(ABC_remove1_AC().iterator(), Result.IllegalState));
			printTest("ABC_remove1_AC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_remove1_AC(), 1), Result.True));
			printTest("ABC_remove1_AC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_remove1_AC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove1_AC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_remove1_AC(), 1), Result.NoException));
			printTest("ABC_remove1_AC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_remove1_AC(), 1)), Result.True));
			printTest("ABC_remove1_AC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_remove1_AC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove1_AC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_remove1_AC(), 1)), Result.IllegalState));
			printTest("ABC_remove1_AC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_remove1_AC(), 2), Result.False));
			printTest("ABC_remove1_AC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_remove1_AC(), 2), null, Result.NoSuchElement));
			printTest("ABC_remove1_AC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_remove1_AC(), 2), Result.NoException));
			printTest("ABC_remove1_AC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_remove1_AC(), 2)), Result.False));
			printTest("ABC_remove1_AC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_remove1_AC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_remove1_AC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_remove1_AC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_remove1_AC_testListIter", testListIter(ABC_remove1_AC(), Result.NoException));
			printTest("ABC_remove1_AC_testListIter", testListIter(ABC_remove1_AC(), 0, Result.NoException));
			printTest("ABC_remove1_AC_testListIterHas0Prev", testListIterHasPrev(ABC_remove1_AC(), 0, Result.False));
			printTest("ABC_remove1_AC_testListIterHas1Prev", testListIterHasPrev(ABC_remove1_AC(), 1, Result.True));
			printTest("ABC_remove1_AC_testListIterHas2Prev", testListIterHasPrev(ABC_remove1_AC(), 2, Result.True));
			printTest("ABC_remove1_AC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_remove1_AC_testListIter1Prev1", testListIterPrev(ABC_remove1_AC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove1_AC_testListIter2Prev2", testListIterPrev(ABC_remove1_AC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove1_AC_testListIter2Prev1", testListIterPrev(ABC_remove1_AC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_remove1_AC_testListIterAddNeg1C", testListIterAdd(ABC_remove1_AC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testListIterAdd0C", testListIterAdd(ABC_remove1_AC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_remove1_AC_testListIterAdd1C", testListIterAdd(ABC_remove1_AC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_remove1_AC_testListIterAdd2C", testListIterAdd(ABC_remove1_AC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_remove1_AC_testListIterAdd3C", testListIterAdd(ABC_remove1_AC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testListIterNextIndex0", testListIterNextIndex(ABC_remove1_AC(), 0, 0));
			printTest("ABC_remove1_AC_testListIterNextIndex1", testListIterNextIndex(ABC_remove1_AC(), 1, 1));
			printTest("ABC_remove1_AC_testListIterNextIndex2", testListIterNextIndex(ABC_remove1_AC(), 2, 2));
			printTest("ABC_remove1_AC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_remove1_AC(), 0, -1));
			printTest("ABC_remove1_AC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_remove1_AC(), 1, 0));
			printTest("ABC_remove1_AC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_remove1_AC(), 2, 1));
			printTest("ABC_remove1_AC_testListIterNext0AddC", testListNextAdd(ABC_remove1_AC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_remove1_AC_testListIterNext1AddC", testListNextAdd(ABC_remove1_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_remove1_AC_testListIterNext2AddC", testListNextAdd(ABC_remove1_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_remove1_AC_testListIterNext3AddC", testListNextAdd(ABC_remove1_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_remove1_AC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_remove1_AC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_remove1_AC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_remove1_AC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_remove1_AC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_remove1_AC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_remove1_AC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_remove1_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_remove1_AC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_remove1_AC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_remove1_AC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_remove1_AC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_remove1_AC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_remove1_AC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_remove1_AC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_remove1_AC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_remove1_AC_testListIterNext0SetC", testListNextSet(ABC_remove1_AC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_remove1_AC_testListIterNext1SetC", testListNextSet(ABC_remove1_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_remove1_AC_testListIterNext2SetC", testListNextSet(ABC_remove1_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_remove1_AC_testListIterNext3SetC", testListNextSet(ABC_remove1_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_remove1_AC_testListIterPrev0SetC", testListPrevSet(ABC_remove1_AC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_remove1_AC_testListIterPrev1SetC", testListPrevSet(ABC_remove1_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_remove1_AC_testListIterPrev2SetC", testListPrevSet(ABC_remove1_AC(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_remove1_AC");
			e.printStackTrace();
		}
	}
	

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> remove(2) -> [A,B]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> remove(2) -> [A,B]
	 * @return [A.B] after remove(2)
	 */
	private IndexedUnsortedList<Integer> ABC_remove2_AB() {
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.remove(2);
		return list;
	}
	
	/** Run all tests on scenario: [A,B,C] -> remove(2) -> [A,B] */
	private void test_ABC_remove2_AB() {
		System.out.println("\nSCENARIO: [A,B,C] -> removeLast() -> [A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_remove2_AB_testAddToFrontC", testAddToFront(ABC_remove2_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testAddToRearC", testAddToRear(ABC_remove2_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testAddAfterAC", testAddAfter(ABC_remove2_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testAddAfterBC", testAddAfter(ABC_remove2_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testAddAfterDC", testAddAfter(ABC_remove2_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_remove2_AB_testAddAtIndexNeg1C", testAddAtIndex(ABC_remove2_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testAddAtIndex0C", testAddAtIndex(ABC_remove2_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testAddAtIndex1C", testAddAtIndex(ABC_remove2_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testAddAtIndex2C", testAddAtIndex(ABC_remove2_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testAddAtIndex3C", testAddAtIndex(ABC_remove2_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testAddC", testAdd(ABC_remove2_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testRemoveFirst", testRemoveFirst(ABC_remove2_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove2_AB_testRemoveLast", testRemoveLast(ABC_remove2_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove2_AB_testRemoveA", testRemoveElement(ABC_remove2_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove2_AB_testRemoveB", testRemoveElement(ABC_remove2_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove2_AB_testRemoveC", testRemoveElement(ABC_remove2_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_remove2_AB_testRemoveNeg1", testRemoveIndex(ABC_remove2_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testRemove0", testRemoveIndex(ABC_remove2_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove2_AB_testRemove1", testRemoveIndex(ABC_remove2_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove2_AB_testRemove2", testRemoveIndex(ABC_remove2_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testFirst", testFirst(ABC_remove2_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove2_AB_testLast", testLast(ABC_remove2_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove2_AB_testContainsA", testContains(ABC_remove2_AB(), ELEMENT_A, Result.True));
			printTest("ABC_remove2_AB_testContainsB", testContains(ABC_remove2_AB(), ELEMENT_B, Result.True));
			printTest("ABC_remove2_AB_testContainsC", testContains(ABC_remove2_AB(), ELEMENT_C, Result.False));
			printTest("ABC_remove2_AB_testIsEmpty", testIsEmpty(ABC_remove2_AB(), Result.False));
			printTest("ABC_remove2_AB_testSize", testSize(ABC_remove2_AB(), 2));
			printTest("ABC_remove2_AB_testToString", testToString(ABC_remove2_AB(), Result.ValidString));
			printTest("ABC_remove2_AB_", testSet(ABC_remove2_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testSet0C", testSet(ABC_remove2_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testSet1C", testSet(ABC_remove2_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testSet2C", testSet(ABC_remove2_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testGetNeg1", testGet(ABC_remove2_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testGet0", testGet(ABC_remove2_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove2_AB_testGet1", testGet(ABC_remove2_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove2_AB_testGet2", testGet(ABC_remove2_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testIndexOfA", testIndexOf(ABC_remove2_AB(), ELEMENT_A, 0));
			printTest("ABC_remove2_AB_testIndexOfB", testIndexOf(ABC_remove2_AB(), ELEMENT_B, 1));
			printTest("ABC_remove2_AB_testIndexOfC", testIndexOf(ABC_remove2_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("ABC_remove2_AB_testIter", testIter(ABC_remove2_AB(), Result.NoException));
			printTest("ABC_remove2_AB_testIterHasNext", testIterHasNext(ABC_remove2_AB().iterator(), Result.True));
			printTest("ABC_remove2_AB_testIterNext", testIterNext(ABC_remove2_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove2_AB_testIterRemove", testIterRemove(ABC_remove2_AB().iterator(), Result.IllegalState));
			printTest("ABC_remove2_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_remove2_AB(), 1), Result.True));
			printTest("ABC_remove2_AB_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_remove2_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove2_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_remove2_AB(), 1), Result.NoException));
			printTest("ABC_remove2_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_remove2_AB(), 1)), Result.True));
			printTest("ABC_remove2_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_remove2_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove2_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_remove2_AB(), 1)), Result.IllegalState));
			printTest("ABC_remove2_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_remove2_AB(), 2), Result.False));
			printTest("ABC_remove2_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_remove2_AB(), 2), null, Result.NoSuchElement));
			printTest("ABC_remove2_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_remove2_AB(), 2), Result.NoException));
			printTest("ABC_remove2_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_remove2_AB(), 2)), Result.False));
			printTest("ABC_remove2_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_remove2_AB(), 2)), null, Result.NoSuchElement));
			printTest("ABC_remove2_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_remove2_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_remove2_AB_testListIter", testListIter(ABC_remove2_AB(), Result.NoException));
			printTest("ABC_remove2_AB_testListIter", testListIter(ABC_remove2_AB(), 0, Result.NoException));
			printTest("ABC_remove2_AB_testListIterHas0Prev", testListIterHasPrev(ABC_remove2_AB(), 0, Result.False));
			printTest("ABC_remove2_AB_testListIterHas1Prev", testListIterHasPrev(ABC_remove2_AB(), 1, Result.True));
			printTest("ABC_remove2_AB_testListIterHas2Prev", testListIterHasPrev(ABC_remove2_AB(), 2, Result.True));
			printTest("ABC_remove2_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_remove2_AB_testListIter1Prev1", testListIterPrev(ABC_remove2_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove2_AB_testListIter2Prev2", testListIterPrev(ABC_remove2_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_remove2_AB_testListIter2Prev1", testListIterPrev(ABC_remove2_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_remove2_AB_testListIterAddNeg1C", testListIterAdd(ABC_remove2_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testListIterAdd0C", testListIterAdd(ABC_remove2_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testListIterAdd1C", testListIterAdd(ABC_remove2_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testListIterAdd2C", testListIterAdd(ABC_remove2_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_remove2_AB_testListIterAdd3C", testListIterAdd(ABC_remove2_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testListIterNextIndex0", testListIterNextIndex(ABC_remove2_AB(), 0, 0));
			printTest("ABC_remove2_AB_testListIterNextIndex1", testListIterNextIndex(ABC_remove2_AB(), 1, 1));
			printTest("ABC_remove2_AB_testListIterNextIndex2", testListIterNextIndex(ABC_remove2_AB(), 2, 2));
			printTest("ABC_remove2_AB_testListIterPreviousIndex0", testListIterPrevIndex(ABC_remove2_AB(), 0, -1));
			printTest("ABC_remove2_AB_testListIterPreviousIndex1", testListIterPrevIndex(ABC_remove2_AB(), 1, 0));
			printTest("ABC_remove2_AB_testListIterPreviousIndex2", testListIterPrevIndex(ABC_remove2_AB(), 2, 1));
			printTest("ABC_remove2_AB_testListIterNext0AddC", testListNextAdd(ABC_remove2_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_remove2_AB_testListIterNext1AddC", testListNextAdd(ABC_remove2_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_remove2_AB_testListIterNext2AddC", testListNextAdd(ABC_remove2_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_remove2_AB_testListIterNext3AddC", testListNextAdd(ABC_remove2_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_remove2_AB_testListIterPrev1Index0AddC", testListPrevAdd(ABC_remove2_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_remove2_AB_testListIterPrev0Index0AddC", testListPrevAdd(ABC_remove2_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_remove2_AB_testListIterPrev0Index1AddC", testListPrevAdd(ABC_remove2_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_remove2_AB_testListIterPrev1Index1AddC", testListPrevAdd(ABC_remove2_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_remove2_AB_testListIterPrev0Index2AddC", testListPrevAdd(ABC_remove2_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_remove2_AB_testListIterPrev1Index2AddC", testListPrevAdd(ABC_remove2_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_remove2_AB_testListIterPrev2Index2AddC", testListPrevAdd(ABC_remove2_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_remove2_AB_testListIterPrev0Index3AddC", testListPrevAdd(ABC_remove2_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_remove2_AB_testListIterNext0SetC", testListNextSet(ABC_remove2_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_remove2_AB_testListIterNext1SetC", testListNextSet(ABC_remove2_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_remove2_AB_testListIterNext2SetC", testListNextSet(ABC_remove2_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_remove2_AB_testListIterNext3SetC", testListNextSet(ABC_remove2_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_remove2_AB_testListIterPrev0SetC", testListPrevSet(ABC_remove2_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_remove2_AB_testListIterPrev1SetC", testListPrevSet(ABC_remove2_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_remove2_AB_testListIterPrev2SetC", testListPrevSet(ABC_remove2_AB(), ELEMENT_C, 2, 2, Result.NoException));
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_remove2_AB");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> set(0,D) -> [D,B,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> set(0,D) -> [D,B,C]
	 * @return [D,B,C] after set(0,D) 
	 */
	private IndexedUnsortedList<Integer> ABC_set0D_DBC() {
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.set(0,ELEMENT_D);
		return list;
	}
	
	private void test_ABC_set0D_DBC() {
		System.out.println("\nSCENARIO: [A,B,C] -> set(0,D) -> [D,B,C]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_set0D_DBC_testAddToFrontA", testAddToFront(ABC_set0D_DBC(), ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testAddToRearA", testAddToRear(ABC_set0D_DBC(), ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testAddAfterAA", testAddAfter(ABC_set0D_DBC(), ELEMENT_A, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_set0D_DBC_testAddAfterBA", testAddAfter(ABC_set0D_DBC(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testAddAfterCA", testAddAfter(ABC_set0D_DBC(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testAddAfterDA", testAddAfter(ABC_set0D_DBC(), ELEMENT_D, ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testAddAtIndexNeg1A", testAddAtIndex(ABC_set0D_DBC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testAddAtIndex0A", testAddAtIndex(ABC_set0D_DBC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testAddAtIndex1A", testAddAtIndex(ABC_set0D_DBC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testAddAtIndex2A", testAddAtIndex(ABC_set0D_DBC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testAddAtIndex3A", testAddAtIndex(ABC_set0D_DBC(), 3, ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testAddAtIndex3A", testAddAtIndex(ABC_set0D_DBC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testAddC", testAdd(ABC_set0D_DBC(), ELEMENT_C, Result.NoException));
			printTest("ABC_set0D_DBC_testRemoveFirst", testRemoveFirst(ABC_set0D_DBC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testRemoveLast", testRemoveLast(ABC_set0D_DBC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testRemoveA", testRemoveElement(ABC_set0D_DBC(), ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_set0D_DBC_testRemoveB", testRemoveElement(ABC_set0D_DBC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testRemoveC", testRemoveElement(ABC_set0D_DBC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testRemoveD", testRemoveElement(ABC_set0D_DBC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testRemoveNeg1", testRemoveIndex(ABC_set0D_DBC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testRemove0", testRemoveIndex(ABC_set0D_DBC(), 0, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testRemove1", testRemoveIndex(ABC_set0D_DBC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testRemove2", testRemoveIndex(ABC_set0D_DBC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testRemove3", testRemoveIndex(ABC_set0D_DBC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testFirst", testFirst(ABC_set0D_DBC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testLast", testLast(ABC_set0D_DBC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testContainsA", testContains(ABC_set0D_DBC(), ELEMENT_A, Result.False));
			printTest("ABC_set0D_DBC_testContainsB", testContains(ABC_set0D_DBC(), ELEMENT_B, Result.True));
			printTest("ABC_set0D_DBC_testContainsC", testContains(ABC_set0D_DBC(), ELEMENT_C, Result.True));
			printTest("ABC_set0D_DBC_testContainsD", testContains(ABC_set0D_DBC(), ELEMENT_D, Result.True));
			printTest("ABC_set0D_DBC_testIsEmpty", testIsEmpty(ABC_set0D_DBC(), Result.False));
			printTest("ABC_set0D_DBC_testSize", testSize(ABC_set0D_DBC(), 3));
			printTest("ABC_set0D_DBC_testToString", testToString(ABC_set0D_DBC(), Result.ValidString));
			printTest("ABC_set0D_DBC_testSetNeg1A", testSet(ABC_set0D_DBC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testSet0A", testSet(ABC_set0D_DBC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testSet1A", testSet(ABC_set0D_DBC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testSet2A", testSet(ABC_set0D_DBC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_set0D_DBC_testSet3A", testSet(ABC_set0D_DBC(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testGetNeg1", testGet(ABC_set0D_DBC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testGet0", testGet(ABC_set0D_DBC(), 0, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testGet1", testGet(ABC_set0D_DBC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testGet2", testGet(ABC_set0D_DBC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testGet3", testGet(ABC_set0D_DBC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testIndexOfA", testIndexOf(ABC_set0D_DBC(), ELEMENT_A, -1));
			printTest("ABC_set0D_DBC_testIndexOfB", testIndexOf(ABC_set0D_DBC(), ELEMENT_B, 1));
			printTest("ABC_set0D_DBC_testIndexOfC", testIndexOf(ABC_set0D_DBC(), ELEMENT_C, 2));
			printTest("ABC_set0D_DBC_testIndexOfD", testIndexOf(ABC_set0D_DBC(), ELEMENT_D, 0));
			// Iterator
			printTest("ABC_set0D_DBC_testIter", testIter(ABC_set0D_DBC(), Result.NoException));
			printTest("ABC_set0D_DBC_testIterHasNext", testIterHasNext(ABC_set0D_DBC().iterator(), Result.True));
			printTest("ABC_set0D_DBC_testIterNext", testIterNext(ABC_set0D_DBC().iterator(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testIterRemove", testIterRemove(ABC_set0D_DBC().iterator(), Result.IllegalState));
			printTest("ABC_set0D_DBC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_set0D_DBC(), 1), Result.True));
			printTest("ABC_set0D_DBC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_set0D_DBC(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set0D_DBC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_set0D_DBC(), 1), Result.NoException));
			printTest("ABC_set0D_DBC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_set0D_DBC(), 1)), Result.True));
			printTest("ABC_set0D_DBC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_set0D_DBC(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set0D_DBC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_set0D_DBC(), 1)), Result.IllegalState));
			printTest("ABC_set0D_DBC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_set0D_DBC(), 2), Result.True));
			printTest("ABC_set0D_DBC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_set0D_DBC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set0D_DBC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_set0D_DBC(), 2), Result.NoException));
			printTest("ABC_set0D_DBC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_set0D_DBC(), 3)), Result.False));
			printTest("ABC_set0D_DBC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_set0D_DBC(), 3)), null, Result.NoSuchElement));
			printTest("ABC_set0D_DBC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_set0D_DBC(), 3)), Result.IllegalState));
			// ListIterator
			printTest("ABC_set0D_DBC_testListIter", testListIter(ABC_set0D_DBC(), Result.NoException));
			printTest("ABC_set0D_DBC_testListIter", testListIter(ABC_set0D_DBC(), 0, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterHas0Prev", testListIterHasPrev(ABC_set0D_DBC(), 0, Result.False));
			printTest("ABC_set0D_DBC_testListIterHas1Prev", testListIterHasPrev(ABC_set0D_DBC(), 1, Result.True));
			printTest("ABC_set0D_DBC_testListIterHas2Prev", testListIterHasPrev(ABC_set0D_DBC(), 2, Result.True));
			printTest("ABC_set0D_DBC_testListIterHas3Prev", testListIterHasPrev(ABC_set0D_DBC(), 3, Result.True));
			printTest("ABC_set0D_DBC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_set0D_DBC_testListIter1Prev1", testListIterPrev(ABC_set0D_DBC(), 1, 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testListIter2Prev2", testListIterPrev(ABC_set0D_DBC(), 2, 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testListIter2Prev1", testListIterPrev(ABC_set0D_DBC(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testListIter3Prev1", testListIterPrev(ABC_set0D_DBC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testListIter3Prev2", testListIterPrev(ABC_set0D_DBC(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testListIter3Prev3", testListIterPrev(ABC_set0D_DBC(), 3, 3, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set0D_DBC_testListIterAddNeg1D", testListIterAdd(ABC_set0D_DBC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testListIterAdd0D", testListIterAdd(ABC_set0D_DBC(), 0, ELEMENT_D, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterAdd1D", testListIterAdd(ABC_set0D_DBC(), 1, ELEMENT_D, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterAdd2D", testListIterAdd(ABC_set0D_DBC(), 2, ELEMENT_D, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterAdd3D", testListIterAdd(ABC_set0D_DBC(), 3, ELEMENT_D, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterAdd4D", testListIterAdd(ABC_set0D_DBC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testListIterNextIndex0", testListIterNextIndex(ABC_set0D_DBC(), 0, 0));
			printTest("ABC_set0D_DBC_testListIterNextIndex1", testListIterNextIndex(ABC_set0D_DBC(), 1, 1));
			printTest("ABC_set0D_DBC_testListIterNextIndex2", testListIterNextIndex(ABC_set0D_DBC(), 2, 2));
			printTest("ABC_set0D_DBC_testListIterNextIndex3", testListIterNextIndex(ABC_set0D_DBC(), 3, 3));
			printTest("ABC_set0D_DBC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_set0D_DBC(), 0, -1));
			printTest("ABC_set0D_DBC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_set0D_DBC(), 1, 0));
			printTest("ABC_set0D_DBC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_set0D_DBC(), 2, 1));
			printTest("ABC_set0D_DBC_testListIterPreviousIndex3", testListIterPrevIndex(ABC_set0D_DBC(), 3, 2));
			printTest("ABC_set0D_DBC_testListIterNext0AddD", testListNextAdd(ABC_set0D_DBC(), ELEMENT_D, 0, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterNext1AddD", testListNextAdd(ABC_set0D_DBC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterNext2AddD", testListNextAdd(ABC_set0D_DBC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterNext3AddD", testListNextAdd(ABC_set0D_DBC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterNext4AddD", testListNextAdd(ABC_set0D_DBC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_set0D_DBC_testListIterPrev1Index0AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("ABC_set0D_DBC_testListIterPrev0Index0AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev0Index1AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev1Index1AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev0Index2AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev1Index2AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev2Index2AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev0Index3AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev1Index3AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev2Index3AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev3Index3AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev0Index4AddD", testListPrevAdd(ABC_set0D_DBC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("ABC_set0D_DBC_testListIterNext0SetD", testListNextSet(ABC_set0D_DBC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("ABC_set0D_DBC_testListIterNext1SetD", testListNextSet(ABC_set0D_DBC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterNext2SetD", testListNextSet(ABC_set0D_DBC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterNext3SetD", testListNextSet(ABC_set0D_DBC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterNext4SetD", testListNextSet(ABC_set0D_DBC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_set0D_DBC_testListIterPrev0SetD", testListPrevSet(ABC_set0D_DBC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("ABC_set0D_DBC_testListIterPrev1SetD", testListPrevSet(ABC_set0D_DBC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev2SetD", testListPrevSet(ABC_set0D_DBC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_set0D_DBC_testListIterPrev3SetD", testListPrevSet(ABC_set0D_DBC(), ELEMENT_D, 3, 3, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_set0D_DBC");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> set(1,D) -> [A,D,C]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> set(1,D) -> [A,D,C]
	 * @return [A,D,C] after set(1,D) 
	 */
	private IndexedUnsortedList<Integer> ABC_set1D_ADC() {
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.set(1,ELEMENT_D);
		return list;
	}
	
	private void test_ABC_set1D_ADC() {
		System.out.println("\nSCENARIO: [A,B,C] -> set(1,D) -> [A,D,C]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_set1D_ADC_testAddToFrontB", testAddToFront(ABC_set1D_ADC(), ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testAddToRearB", testAddToRear(ABC_set1D_ADC(), ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testAddAfterDB", testAddAfter(ABC_set1D_ADC(), ELEMENT_D, ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testAddAfterBB", testAddAfter(ABC_set1D_ADC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_set1D_ADC_testAddAfterCB", testAddAfter(ABC_set1D_ADC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testAddAfterAB", testAddAfter(ABC_set1D_ADC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testAddAtIndexNeg1B", testAddAtIndex(ABC_set1D_ADC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testAddAtIndex0B", testAddAtIndex(ABC_set1D_ADC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testAddAtIndex1B", testAddAtIndex(ABC_set1D_ADC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testAddAtIndex2B", testAddAtIndex(ABC_set1D_ADC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testAddAtIndex3B", testAddAtIndex(ABC_set1D_ADC(), 3, ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testAddAtIndex4B", testAddAtIndex(ABC_set1D_ADC(), 4, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testAddB", testAdd(ABC_set1D_ADC(), ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testRemoveFirst", testRemoveFirst(ABC_set1D_ADC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testRemoveLast", testRemoveLast(ABC_set1D_ADC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testRemoveA", testRemoveElement(ABC_set1D_ADC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testRemoveB", testRemoveElement(ABC_set1D_ADC(), ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_set1D_ADC_testRemoveC", testRemoveElement(ABC_set1D_ADC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testRemoveD", testRemoveElement(ABC_set1D_ADC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testRemoveNeg1", testRemoveIndex(ABC_set1D_ADC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testRemove0", testRemoveIndex(ABC_set1D_ADC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testRemove1", testRemoveIndex(ABC_set1D_ADC(), 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testRemove2", testRemoveIndex(ABC_set1D_ADC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testRemove3", testRemoveIndex(ABC_set1D_ADC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testFirst", testFirst(ABC_set1D_ADC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testLast", testLast(ABC_set1D_ADC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testContainsA", testContains(ABC_set1D_ADC(), ELEMENT_A, Result.True));
			printTest("ABC_set1D_ADC_testContainsB", testContains(ABC_set1D_ADC(), ELEMENT_B, Result.False));
			printTest("ABC_set1D_ADC_testContainsC", testContains(ABC_set1D_ADC(), ELEMENT_C, Result.True));
			printTest("ABC_set1D_ADC_testContainsD", testContains(ABC_set1D_ADC(), ELEMENT_D, Result.True));
			printTest("ABC_set1D_ADC_testIsEmpty", testIsEmpty(ABC_set1D_ADC(), Result.False));
			printTest("ABC_set1D_ADC_testSize", testSize(ABC_set1D_ADC(), 3));
			printTest("ABC_set1D_ADC_testToString", testToString(ABC_set1D_ADC(), Result.ValidString));
			printTest("ABC_set1D_ADC_testSetNeg1B", testSet(ABC_set1D_ADC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testSet0B", testSet(ABC_set1D_ADC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testSet1B", testSet(ABC_set1D_ADC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testSet2B", testSet(ABC_set1D_ADC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_set1D_ADC_testSet3B", testSet(ABC_set1D_ADC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testGetNeg1", testGet(ABC_set1D_ADC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testGet0", testGet(ABC_set1D_ADC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testGet1", testGet(ABC_set1D_ADC(), 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testGet2", testGet(ABC_set1D_ADC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testGet3", testGet(ABC_set1D_ADC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testIndexOfA", testIndexOf(ABC_set1D_ADC(), ELEMENT_A, 0));
			printTest("ABC_set1D_ADC_testIndexOfB", testIndexOf(ABC_set1D_ADC(), ELEMENT_B, -1));
			printTest("ABC_set1D_ADC_testIndexOfC", testIndexOf(ABC_set1D_ADC(), ELEMENT_C, 2));
			printTest("ABC_set1D_ADC_testIndexOfD", testIndexOf(ABC_set1D_ADC(), ELEMENT_D, 1));
			// Iterator
			printTest("ABC_set1D_ADC_testIter", testIter(ABC_set1D_ADC(), Result.NoException));
			printTest("ABC_set1D_ADC_testIterHasNext", testIterHasNext(ABC_set1D_ADC().iterator(), Result.True));
			printTest("ABC_set1D_ADC_testIterNext", testIterNext(ABC_set1D_ADC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testIterRemove", testIterRemove(ABC_set1D_ADC().iterator(), Result.IllegalState));
			printTest("ABC_set1D_ADC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_set1D_ADC(), 1), Result.True));
			printTest("ABC_set1D_ADC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_set1D_ADC(), 1), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set1D_ADC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_set1D_ADC(), 1), Result.NoException));
			printTest("ABC_set1D_ADC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_set1D_ADC(), 1)), Result.True));
			printTest("ABC_set1D_ADC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_set1D_ADC(), 1)), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set1D_ADC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_set1D_ADC(), 1)), Result.IllegalState));
			printTest("ABC_set1D_ADC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_set1D_ADC(), 2), Result.True));
			printTest("ABC_set1D_ADC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_set1D_ADC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set1D_ADC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_set1D_ADC(), 2), Result.NoException));
			printTest("ABC_set1D_ADC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_set1D_ADC(), 3)), Result.False));
			printTest("ABC_set1D_ADC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_set1D_ADC(), 3)), null, Result.NoSuchElement));
			printTest("ABC_set1D_ADC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_set1D_ADC(), 3)), Result.IllegalState));
			// ListIterator
			printTest("ABC_set1D_ADC_testListIter", testListIter(ABC_set1D_ADC(), Result.NoException));
			printTest("ABC_set1D_ADC_testListIter", testListIter(ABC_set1D_ADC(), 0, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterHas0Prev", testListIterHasPrev(ABC_set1D_ADC(), 0, Result.False));
			printTest("ABC_set1D_ADC_testListIterHas1Prev", testListIterHasPrev(ABC_set1D_ADC(), 1, Result.True));
			printTest("ABC_set1D_ADC_testListIterHas2Prev", testListIterHasPrev(ABC_set1D_ADC(), 2, Result.True));
			printTest("ABC_set1D_ADC_testListIterHas3Prev", testListIterHasPrev(ABC_set1D_ADC(), 3, Result.True));
			printTest("ABC_set1D_ADC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_set1D_ADC_testListIter1Prev1", testListIterPrev(ABC_set1D_ADC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testListIter2Prev2", testListIterPrev(ABC_set1D_ADC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testListIter2Prev1", testListIterPrev(ABC_set1D_ADC(), 2, 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testListIter3Prev1", testListIterPrev(ABC_set1D_ADC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testListIter3Prev2", testListIterPrev(ABC_set1D_ADC(), 3, 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testListIter3Prev3", testListIterPrev(ABC_set1D_ADC(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set1D_ADC_testListIterAddNeg1D", testListIterAdd(ABC_set1D_ADC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testListIterAdd0D", testListIterAdd(ABC_set1D_ADC(), 0, ELEMENT_D, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterAdd1D", testListIterAdd(ABC_set1D_ADC(), 1, ELEMENT_D, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterAdd2D", testListIterAdd(ABC_set1D_ADC(), 2, ELEMENT_D, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterAdd3D", testListIterAdd(ABC_set1D_ADC(), 3, ELEMENT_D, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterAdd4D", testListIterAdd(ABC_set1D_ADC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testListIterNextIndex0", testListIterNextIndex(ABC_set1D_ADC(), 0, 0));
			printTest("ABC_set1D_ADC_testListIterNextIndex1", testListIterNextIndex(ABC_set1D_ADC(), 1, 1));
			printTest("ABC_set1D_ADC_testListIterNextIndex2", testListIterNextIndex(ABC_set1D_ADC(), 2, 2));
			printTest("ABC_set1D_ADC_testListIterNextIndex3", testListIterNextIndex(ABC_set1D_ADC(), 3, 3));
			printTest("ABC_set1D_ADC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_set1D_ADC(), 0, -1));
			printTest("ABC_set1D_ADC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_set1D_ADC(), 1, 0));
			printTest("ABC_set1D_ADC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_set1D_ADC(), 2, 1));
			printTest("ABC_set1D_ADC_testListIterPreviousIndex3", testListIterPrevIndex(ABC_set1D_ADC(), 3, 2));
			printTest("ABC_set1D_ADC_testListIterNext0AddD", testListNextAdd(ABC_set1D_ADC(), ELEMENT_D, 0, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterNext1AddD", testListNextAdd(ABC_set1D_ADC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterNext2AddD", testListNextAdd(ABC_set1D_ADC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterNext3AddD", testListNextAdd(ABC_set1D_ADC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterNext4AddD", testListNextAdd(ABC_set1D_ADC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_set1D_ADC_testListIterPrev1Index0AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("ABC_set1D_ADC_testListIterPrev0Index0AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev0Index1AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev1Index1AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev0Index2AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev1Index2AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev2Index2AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev0Index3AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev1Index3AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev2Index3AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev3Index3AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev0Index4AddD", testListPrevAdd(ABC_set1D_ADC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("ABC_set1D_ADC_testListIterNext0SetD", testListNextSet(ABC_set1D_ADC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("ABC_set1D_ADC_testListIterNext1SetD", testListNextSet(ABC_set1D_ADC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterNext2SetD", testListNextSet(ABC_set1D_ADC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterNext3SetD", testListNextSet(ABC_set1D_ADC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterNext4SetD", testListNextSet(ABC_set1D_ADC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_set1D_ADC_testListIterPrev0SetD", testListPrevSet(ABC_set1D_ADC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("ABC_set1D_ADC_testListIterPrev1SetD", testListPrevSet(ABC_set1D_ADC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev2SetD", testListPrevSet(ABC_set1D_ADC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_set1D_ADC_testListIterPrev3SetD", testListPrevSet(ABC_set1D_ADC(), ELEMENT_D, 3, 3, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_set1D_ADC");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> set(2,D) -> [A,B,D]
	////////////////////////////////////////////////
	
	/** Scenario: [A,B,C] -> set(2,D) -> [A,B,D]
	 * @return [A,B,D] after set(2,D) 
	 */
	private IndexedUnsortedList<Integer> ABC_set2D_ABD() {
		IndexedUnsortedList<Integer> list = AB_addAfterCB_ABC();
		list.set(2,ELEMENT_D);
		return list;
	}
	
	private void test_ABC_set2D_ADC() {
		System.out.println("\nSCENARIO: [A,B,C] -> set(2,D) -> [A,B,D]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_set2D_ABD_testAddToFrontC", testAddToFront(ABC_set2D_ABD(), ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testAddToRearC", testAddToRear(ABC_set2D_ABD(), ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testAddAfterAC", testAddAfter(ABC_set2D_ABD(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testAddAfterBC", testAddAfter(ABC_set2D_ABD(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testAddAfterCC", testAddAfter(ABC_set2D_ABD(), ELEMENT_C, ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_set2D_ABD_testAddAfterDC", testAddAfter(ABC_set2D_ABD(), ELEMENT_D, ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testAddAtIndexNeg1C", testAddAtIndex(ABC_set2D_ABD(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testAddAtIndex0C", testAddAtIndex(ABC_set2D_ABD(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testAddAtIndex1C", testAddAtIndex(ABC_set2D_ABD(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testAddAtIndex2C", testAddAtIndex(ABC_set2D_ABD(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testAddAtIndex3C", testAddAtIndex(ABC_set2D_ABD(), 3, ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testAddAtIndex4C", testAddAtIndex(ABC_set2D_ABD(), 4, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testAddC", testAdd(ABC_set2D_ABD(), ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testRemoveFirst", testRemoveFirst(ABC_set2D_ABD(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testRemoveLast", testRemoveLast(ABC_set2D_ABD(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testRemoveA", testRemoveElement(ABC_set2D_ABD(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testRemoveB", testRemoveElement(ABC_set2D_ABD(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testRemoveC", testRemoveElement(ABC_set2D_ABD(), ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_set2D_ABD_testRemoveD", testRemoveElement(ABC_set2D_ABD(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testRemoveNeg1", testRemoveIndex(ABC_set2D_ABD(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testRemove0", testRemoveIndex(ABC_set2D_ABD(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testRemove1", testRemoveIndex(ABC_set2D_ABD(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testRemove2", testRemoveIndex(ABC_set2D_ABD(), 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testRemove3", testRemoveIndex(ABC_set2D_ABD(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testFirst", testFirst(ABC_set2D_ABD(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testLast", testLast(ABC_set2D_ABD(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testContainsA", testContains(ABC_set2D_ABD(), ELEMENT_A, Result.True));
			printTest("ABC_set2D_ABD_testContainsB", testContains(ABC_set2D_ABD(), ELEMENT_B, Result.True));
			printTest("ABC_set2D_ABD_testContainsC", testContains(ABC_set2D_ABD(), ELEMENT_C, Result.False));
			printTest("ABC_set2D_ABD_testContainsD", testContains(ABC_set2D_ABD(), ELEMENT_D, Result.True));
			printTest("ABC_set2D_ABD_testIsEmpty", testIsEmpty(ABC_set2D_ABD(), Result.False));
			printTest("ABC_set2D_ABD_testSize", testSize(ABC_set2D_ABD(), 3));
			printTest("ABC_set2D_ABD_testToString", testToString(ABC_set2D_ABD(), Result.ValidString));
			printTest("ABC_set2D_ABD_testSetNeg1C", testSet(ABC_set2D_ABD(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testSet0C", testSet(ABC_set2D_ABD(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testSet1C", testSet(ABC_set2D_ABD(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testSet2C", testSet(ABC_set2D_ABD(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_set2D_ABD_testSet3C", testSet(ABC_set2D_ABD(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testGetNeg1", testGet(ABC_set2D_ABD(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testGet0", testGet(ABC_set2D_ABD(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testGet1", testGet(ABC_set2D_ABD(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testGet2", testGet(ABC_set2D_ABD(), 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testGet3", testGet(ABC_set2D_ABD(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testIndexOfA", testIndexOf(ABC_set2D_ABD(), ELEMENT_A, 0));
			printTest("ABC_set2D_ABD_testIndexOfB", testIndexOf(ABC_set2D_ABD(), ELEMENT_B, 1));
			printTest("ABC_set2D_ABD_testIndexOfC", testIndexOf(ABC_set2D_ABD(), ELEMENT_C, -1));
			printTest("ABC_set2D_ABD_testIndexOfD", testIndexOf(ABC_set2D_ABD(), ELEMENT_D, 2));
			// Iterator
			printTest("ABC_set2D_ABD_testIter", testIter(ABC_set2D_ABD(), Result.NoException));
			printTest("ABC_set2D_ABD_testIterHasNext", testIterHasNext(ABC_set2D_ABD().iterator(), Result.True));
			printTest("ABC_set2D_ABD_testIterNext", testIterNext(ABC_set2D_ABD().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testIterRemove", testIterRemove(ABC_set2D_ABD().iterator(), Result.IllegalState));
			printTest("ABC_set2D_ABD_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_set2D_ABD(), 1), Result.True));
			printTest("ABC_set2D_ABD_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_set2D_ABD(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set2D_ABD_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_set2D_ABD(), 1), Result.NoException));
			printTest("ABC_set2D_ABD_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_set2D_ABD(), 1)), Result.True));
			printTest("ABC_set2D_ABD_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_set2D_ABD(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set2D_ABD_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_set2D_ABD(), 1)), Result.IllegalState));
			printTest("ABC_set2D_ABD_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_set2D_ABD(), 2), Result.True));
			printTest("ABC_set2D_ABD_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_set2D_ABD(), 2), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set2D_ABD_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_set2D_ABD(), 2), Result.NoException));
			printTest("ABC_set2D_ABD_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_set2D_ABD(), 3)), Result.False));
			printTest("ABC_set2D_ABD_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_set2D_ABD(), 3)), null, Result.NoSuchElement));
			printTest("ABC_set2D_ABD_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_set2D_ABD(), 3)), Result.IllegalState));
			// ListIterator
			printTest("ABC_set2D_ABD_testListIter", testListIter(ABC_set2D_ABD(), Result.NoException));
			printTest("ABC_set2D_ABD_testListIter", testListIter(ABC_set2D_ABD(), 0, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterHas0Prev", testListIterHasPrev(ABC_set2D_ABD(), 0, Result.False));
			printTest("ABC_set2D_ABD_testListIterHas1Prev", testListIterHasPrev(ABC_set2D_ABD(), 1, Result.True));
			printTest("ABC_set2D_ABD_testListIterHas2Prev", testListIterHasPrev(ABC_set2D_ABD(), 2, Result.True));
			printTest("ABC_set2D_ABD_testListIterHas3Prev", testListIterHasPrev(ABC_set2D_ABD(), 3, Result.True));
			printTest("ABC_set2D_ABD_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_set2D_ABD_testListIter1Prev1", testListIterPrev(ABC_set2D_ABD(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testListIter2Prev2", testListIterPrev(ABC_set2D_ABD(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testListIter2Prev1", testListIterPrev(ABC_set2D_ABD(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testListIter3Prev1", testListIterPrev(ABC_set2D_ABD(), 3, 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testListIter3Prev2", testListIterPrev(ABC_set2D_ABD(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testListIter3Prev3", testListIterPrev(ABC_set2D_ABD(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_set2D_ABD_testListIterAddNeg1D", testListIterAdd(ABC_set2D_ABD(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testListIterAdd0D", testListIterAdd(ABC_set2D_ABD(), 0, ELEMENT_D, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterAdd1D", testListIterAdd(ABC_set2D_ABD(), 1, ELEMENT_D, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterAdd2D", testListIterAdd(ABC_set2D_ABD(), 2, ELEMENT_D, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterAdd3D", testListIterAdd(ABC_set2D_ABD(), 3, ELEMENT_D, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterAdd4D", testListIterAdd(ABC_set2D_ABD(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testListIterNextIndex0", testListIterNextIndex(ABC_set2D_ABD(), 0, 0));
			printTest("ABC_set2D_ABD_testListIterNextIndex1", testListIterNextIndex(ABC_set2D_ABD(), 1, 1));
			printTest("ABC_set2D_ABD_testListIterNextIndex2", testListIterNextIndex(ABC_set2D_ABD(), 2, 2));
			printTest("ABC_set2D_ABD_testListIterNextIndex3", testListIterNextIndex(ABC_set2D_ABD(), 3, 3));
			printTest("ABC_set2D_ABD_testListIterPreviousIndex0", testListIterPrevIndex(ABC_set2D_ABD(), 0, -1));
			printTest("ABC_set2D_ABD_testListIterPreviousIndex1", testListIterPrevIndex(ABC_set2D_ABD(), 1, 0));
			printTest("ABC_set2D_ABD_testListIterPreviousIndex2", testListIterPrevIndex(ABC_set2D_ABD(), 2, 1));
			printTest("ABC_set2D_ABD_testListIterPreviousIndex3", testListIterPrevIndex(ABC_set2D_ABD(), 3, 2));
			printTest("ABC_set2D_ABD_testListIterNext0AddD", testListNextAdd(ABC_set2D_ABD(), ELEMENT_D, 0, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterNext1AddD", testListNextAdd(ABC_set2D_ABD(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterNext2AddD", testListNextAdd(ABC_set2D_ABD(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterNext3AddD", testListNextAdd(ABC_set2D_ABD(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterNext4AddD", testListNextAdd(ABC_set2D_ABD(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_set2D_ABD_testListIterPrev1Index0AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("ABC_set2D_ABD_testListIterPrev0Index0AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev0Index1AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev1Index1AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev0Index2AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev1Index2AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev2Index2AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev0Index3AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev1Index3AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev2Index3AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev3Index3AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev0Index4AddD", testListPrevAdd(ABC_set2D_ABD(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("ABC_set2D_ABD_testListIterNext0SetD", testListNextSet(ABC_set2D_ABD(), ELEMENT_D, 0, Result.IllegalState));
			printTest("ABC_set2D_ABD_testListIterNext1SetD", testListNextSet(ABC_set2D_ABD(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterNext2SetD", testListNextSet(ABC_set2D_ABD(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterNext3SetD", testListNextSet(ABC_set2D_ABD(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterNext4SetD", testListNextSet(ABC_set2D_ABD(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_set2D_ABD_testListIterPrev0SetD", testListPrevSet(ABC_set2D_ABD(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("ABC_set2D_ABD_testListIterPrev1SetD", testListPrevSet(ABC_set2D_ABD(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev2SetD", testListPrevSet(ABC_set2D_ABD(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_set2D_ABD_testListIterPrev3SetD", testListPrevSet(ABC_set2D_ABD(), ELEMENT_D, 3, 3, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_set2D_ABD");
			e.printStackTrace();
		}
	}

	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> it.next()->it.remove() -> [}
	////////////////////////////////////////////////
	


	/** Scenario: [A] -> iteratorRemoveAfterNextA -> [ ] 
	 * @return [ ] after iteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> A_iterRemoveAfterNextA_emptyList() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); 
		Iterator<Integer> it = list.iterator();
		it.next();
		it.remove();
		return list;
	}

	/** Run all tests on scenario: [A] -> it.next()->it.remove() -> [ ] */
	private void test_A_iterRemoveAfterNextA_emptyList() {
		System.out.println("\nSCENARIO: [A] -> iterRemoveAfterNextA -> [ ]\n");
		try {
			printTest("A_iterRemoveAfterNextA_emptyList_testAddToFrontA", testAddToFront(A_iterRemoveAfterNextA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_iterRemoveAfterNextA_emptyList_testAddToRearA", testAddToRear(A_iterRemoveAfterNextA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_iterRemoveAfterNextA_emptyList_testAddAfterBA", testAddAfter(A_iterRemoveAfterNextA_emptyList(), ELEMENT_B, ELEMENT_A, Result.NoSuchElement));
			printTest("A_iterRemoveAfterNextA_emptyList_testAddAtIndexNeg1", testAddAtIndex(A_iterRemoveAfterNextA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_iterRemoveAfterNextA_emptyList_testAddAtIndex0", testAddAtIndex(A_iterRemoveAfterNextA_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_iterRemoveAfterNextA_emptyList_testAddAtIndex1", testAddAtIndex(A_iterRemoveAfterNextA_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_iterRemoveAfterNextA_emptyList_testAddA", testAdd(A_iterRemoveAfterNextA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_iterRemoveAfterNextA_emptyList_testRemoveFirst", testRemoveFirst(A_iterRemoveAfterNextA_emptyList(), null, Result.IllegalState));
			printTest("A_iterRemoveAfterNextA_emptyList_testRemoveLast", testRemoveLast(A_iterRemoveAfterNextA_emptyList(), null, Result.IllegalState));
			printTest("A_iterRemoveAfterNextA_emptyList_testRemoveA", testRemoveElement(A_iterRemoveAfterNextA_emptyList(), null, Result.NoSuchElement));
			printTest("A_iterRemoveAfterNextA_emptyList_testRemoveNeg1", testRemoveIndex(A_iterRemoveAfterNextA_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_iterRemoveAfterNextA_emptyList_testRemove0", testRemoveIndex(A_iterRemoveAfterNextA_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_iterRemoveAfterNextA_emptyList_testFirst", testFirst(A_iterRemoveAfterNextA_emptyList(), null, Result.IllegalState));
			printTest("A_iterRemoveAfterNextA_emptyList_testLast", testLast(A_iterRemoveAfterNextA_emptyList(), null, Result.IllegalState));
			printTest("A_iterRemoveAfterNextA_emptyList_testContainsA", testContains(A_iterRemoveAfterNextA_emptyList(), ELEMENT_A, Result.False));
			printTest("A_iterRemoveAfterNextA_emptyList_testIsEmpty", testIsEmpty(A_iterRemoveAfterNextA_emptyList(), Result.True));
			printTest("A_iterRemoveAfterNextA_emptyList_testSize", testSize(A_iterRemoveAfterNextA_emptyList(), 0));
			printTest("A_iterRemoveAfterNextA_emptyList_testToString", testToString(A_iterRemoveAfterNextA_emptyList(), Result.ValidString));
			printTest("A_iterRemoveAfterNextA_emptyList_testSetNeg1A", testSet(A_iterRemoveAfterNextA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_iterRemoveAfterNextA_emptyList_testSet0A", testSet(A_iterRemoveAfterNextA_emptyList(), 0, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_iterRemoveAfterNextA_emptyList_testGetNeg1", testGet(A_iterRemoveAfterNextA_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_iterRemoveAfterNextA_emptyList_testGet0", testGet(A_iterRemoveAfterNextA_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_iterRemoveAfterNextA_emptyList_testIndexOfA", testIndexOf(A_iterRemoveAfterNextA_emptyList(), ELEMENT_A, -1));
			// Iterator
			printTest("A_iterRemoveAfterNextA_emptyList_testIter", testIter(A_iterRemoveAfterNextA_emptyList(), Result.NoException));
			printTest("A_iterRemoveAfterNextA_emptyList_testIterHasNext", testIterHasNext(A_iterRemoveAfterNextA_emptyList().iterator(), Result.False));
			printTest("A_iterRemoveAfterNextA_emptyList_testIterNext", testIterNext(A_iterRemoveAfterNextA_emptyList().iterator(), null, Result.NoSuchElement));
			printTest("A_iterRemoveAfterNextA_emptyList_testIterRemove", testIterRemove(A_iterRemoveAfterNextA_emptyList().iterator(), Result.IllegalState));
			// ListIterator
			printTest("newList_testListIter", testListIter(newList(), Result.NoException));
			printTest("newList_testListIter", testListIter(newList(), 0, Result.NoException));
			printTest("newList_testListIterHasPrev", testListIterHasPrev(newList(), 0, Result.False));
			printTest("newList_testListIterPrev", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("newList_testListIterAddNeg1A", testListIterAdd(newList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("newList_testListIterAdd0A", testListIterAdd(newList(), 0, ELEMENT_A, Result.NoException));
			printTest("newList_testListIterAdd1A", testListIterAdd(newList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("newList_testListIterNextIndex0", testListIterNextIndex(newList(), 0, 0));
			printTest("newList_testListIterPreviousIndex0", testListIterPrevIndex(newList(), 0, -1));
			printTest("newList_testListIterNext0AddA", testListNextAdd(newList(), ELEMENT_A, 0, Result.NoException));
			printTest("newList_testListIterNext1AddA", testListNextAdd(newList(), ELEMENT_A, 1, Result.NoSuchElement));
			printTest("newList_testListIterPrev0Index0AddA", testListPrevAdd(newList(), ELEMENT_A, 0, 0, Result.NoException));
			printTest("newList_testListIterPrev0Index1AddA", testListPrevAdd(newList(), ELEMENT_A, 0, 1, Result.IndexOutOfBounds));
			printTest("newList_testListIterPrev1Index0AddA", testListPrevAdd(newList(), ELEMENT_A, 1, 0, Result.NoSuchElement));
			printTest("newList_testListIterNext0SetA", testListNextSet(newList(), ELEMENT_A, 0, Result.IllegalState));
			printTest("newList_testListIterPrev0SetA", testListPrevSet(newList(), ELEMENT_A, 0, 0, Result.IllegalState));
			
			} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_iterRemoveAfterNextA_emptyList");
			e.printStackTrace();
		}
	}

	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> it.next()->it.next()->it.remove() -> [A]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B] -> iteratorRemoveAfterNextA -> [A] 
	 * @return [A] after iteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> AB_iterRemoveAfterNextB_A(){
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); 
		Iterator<Integer> it = list.iterator();
		it.next();
		it.next();
		it.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B] -> it.next()->it.next()->it.remove() -> [A] */
	private void test_AB_iterRemoveAfterNextB_A() {
		System.out.println("\nSCENARIO: [A,B] -> iterRemoveAfterNextA -> [A]\n");
		try {
			printTest("AB_iterRemoveAfterNextB_A_testRemoveFirst", testRemoveFirst(AB_iterRemoveAfterNextB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextB_A_testRemoveLast", testRemoveLast(AB_iterRemoveAfterNextB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextB_A_testRemoveA",	testRemoveElement(AB_iterRemoveAfterNextB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextB_A_testRemoveB",	testRemoveElement(AB_iterRemoveAfterNextB_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextB_A_testFirst", testFirst(AB_iterRemoveAfterNextB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextB_A_testLast", testLast(AB_iterRemoveAfterNextB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextB_A_testContainsA", 	testContains(AB_iterRemoveAfterNextB_A(), ELEMENT_A, Result.True));
			printTest("AB_iterRemoveAfterNextB_A_testContainsB", 	testContains(AB_iterRemoveAfterNextB_A(), ELEMENT_B, Result.False));
			printTest("AB_iterRemoveAfterNextB_A_testIsEmpty",	testIsEmpty(AB_iterRemoveAfterNextB_A(), Result.False));
			printTest("AB_iterRemoveAfterNextB_A_testSize", testSize(AB_iterRemoveAfterNextB_A(), 1));
			printTest("AB_iterRemoveAfterNextB_A_testToString", testToString(AB_iterRemoveAfterNextB_A(), Result.ValidString));
			printTest("AB_iterRemoveAfterNextB_A_testAddToFrontB", testAddToFront(AB_iterRemoveAfterNextB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testAddToRearB", testAddToRear(AB_iterRemoveAfterNextB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testAddAfterAB", testAddAfter(AB_iterRemoveAfterNextB_A(), ELEMENT_A, ELEMENT_B, Result.NoException));			
			printTest("AB_iterRemoveAfterNextB_A_testAddAfterBC", testAddAfter(AB_iterRemoveAfterNextB_A(), ELEMENT_B, ELEMENT_C, Result.NoSuchElement));			
			printTest("AB_iterRemoveAfterNextB_A_testAddAtIndexNeg1", testAddAtIndex(AB_iterRemoveAfterNextB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextB_A_testAddAtIndex0", testAddAtIndex(AB_iterRemoveAfterNextB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testAddAtIndex1", testAddAtIndex(AB_iterRemoveAfterNextB_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testAddAtIndex2", testAddAtIndex(AB_iterRemoveAfterNextB_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextB_A_testSetNeg1B", testSet(AB_iterRemoveAfterNextB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextB_A_testSet0B", testSet(AB_iterRemoveAfterNextB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testSet1B", testSet(AB_iterRemoveAfterNextB_A(), 1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextB_A_testAddB", testAdd(AB_iterRemoveAfterNextB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testGetNeg1", testGet(AB_iterRemoveAfterNextB_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextB_A_testGet0", testGet(AB_iterRemoveAfterNextB_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextB_A_testGet1", testGet(AB_iterRemoveAfterNextB_A(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextB_A_testIndexOfA", testIndexOf(AB_iterRemoveAfterNextB_A(), ELEMENT_A, 0));
			printTest("AB_iterRemoveAfterNextB_A_testIndexOfB", testIndexOf(AB_iterRemoveAfterNextB_A(), ELEMENT_B, -1));
			printTest("AB_iterRemoveAfterNextB_A_testRemoveNeg1", testRemoveIndex(AB_iterRemoveAfterNextB_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextB_A_testRemove0", testRemoveIndex(AB_iterRemoveAfterNextB_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextB_A_testRemove1", testRemoveIndex(AB_iterRemoveAfterNextB_A(), 1, null, Result.IndexOutOfBounds));
			// Iterator
			printTest("AB_iterRemoveAfterNextB_A_testIter", testIter(AB_iterRemoveAfterNextB_A(), Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testIterHasNext", testIterHasNext(AB_iterRemoveAfterNextB_A().iterator(), Result.True));
			printTest("AB_iterRemoveAfterNextB_A_testIterNext", testIterNext(AB_iterRemoveAfterNextB_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextB_A_testIterRemove", testIterRemove(AB_iterRemoveAfterNextB_A().iterator(), Result.IllegalState));
			printTest("AB_iterRemoveAfterNextB_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_iterRemoveAfterNextB_A(), 1), Result.False));
			printTest("AB_iterRemoveAfterNextB_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_iterRemoveAfterNextB_A(), 1), null, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextB_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_iterRemoveAfterNextB_A(), 1), Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_iterRemoveAfterNextB_A(), 1)), Result.False));
			printTest("AB_iterRemoveAfterNextB_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_iterRemoveAfterNextB_A(), 1)), null, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextB_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_iterRemoveAfterNextB_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_iterRemoveAfterNextB_A_testListIter", testListIter(AB_iterRemoveAfterNextB_A(), Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testListIter", testListIter(AB_iterRemoveAfterNextB_A(), 0, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testListIterHasPrev", testListIterHasPrev(AB_iterRemoveAfterNextB_A(), 0, Result.False));
			printTest("AB_iterRemoveAfterNextB_A_testListIterHasPrev", testListIterHasPrev(AB_iterRemoveAfterNextB_A(), 1, Result.True));
			printTest("AB_iterRemoveAfterNextB_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextB_A_testListIter1Prev1", testListIterPrev(AB_iterRemoveAfterNextB_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextB_A_testListIterAddNeg1B", testListIterAdd(AB_iterRemoveAfterNextB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextB_A_testListIterAdd0B", testListIterAdd(AB_iterRemoveAfterNextB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testListIterAdd1B", testListIterAdd(AB_iterRemoveAfterNextB_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testListIterAdd2B", testListIterAdd(AB_iterRemoveAfterNextB_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextB_A_testListIterNextIndex0", testListIterNextIndex(AB_iterRemoveAfterNextB_A(), 0, 0));
			printTest("AB_iterRemoveAfterNextB_A_testListIterNextIndex1", testListIterNextIndex(AB_iterRemoveAfterNextB_A(), 1, 1));
			printTest("AB_iterRemoveAfterNextB_A_testListIterPreviousIndex0", testListIterPrevIndex(AB_iterRemoveAfterNextB_A(), 0, -1));
			printTest("AB_iterRemoveAfterNextB_A_testListIterPreviousIndex1", testListIterPrevIndex(AB_iterRemoveAfterNextB_A(), 1, 0));
			printTest("AB_iterRemoveAfterNextB_A_testListIterNext0AddB", testListNextAdd(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testListIterNext1AddB", testListNextAdd(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testListIterNext2AddB", testListNextAdd(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextB_A_testListIterPrev1Index0AddB", testListPrevAdd(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextB_A_testListIterPrev0Index0AddB", testListPrevAdd(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testListIterPrev0Index1AddB", testListPrevAdd(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testListIterPrev1Index1AddB", testListPrevAdd(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testListIterPrev0Index2AddB", testListPrevAdd(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextB_A_testListIterNext0SetB", testListNextSet(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_iterRemoveAfterNextB_A_testListIterNext1SetB", testListNextSet(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_iterRemoveAfterNextB_A_testListIterNext2SetB", testListNextSet(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextB_A_testListIterPrev0SetB", testListPrevSet(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_iterRemoveAfterNextB_A_testListIterPrev1SetB", testListPrevSet(AB_iterRemoveAfterNextB_A(), ELEMENT_B, 1, 1, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_iterRemoveAfterNextB_A");
			e.printStackTrace();
		}
	}

	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> it.next()->it.remove() -> [B]
	////////////////////////////////////////////////
	

	
	/** Scenario: [A,B] -> iteratorRemoveAfterNextB -> [B] 
	 * @return [B] after iteratorRemoveAfterNextB
	 */
	private IndexedUnsortedList<Integer> AB_iterRemoveAfterNextA_B(){
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); 
		Iterator<Integer> it = list.iterator();
		it.next();
		it.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B] -> it.next()->it.remove() -> [B] */
	private void test_AB_iterRemoveAfterNextA_B() {
		System.out.println("\nSCENARIO: [A,B] -> iterRemoveAfterNextA -> [B]\n");
		try {
			printTest("AB_iterRemoveAfterNextA_B_testRemoveFirst", testRemoveFirst(AB_iterRemoveAfterNextA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextA_B_testRemoveLast", testRemoveLast(AB_iterRemoveAfterNextA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextA_B_testRemoveA",	testRemoveElement(AB_iterRemoveAfterNextA_B(), ELEMENT_A, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextA_B_testRemoveB",	testRemoveElement(AB_iterRemoveAfterNextA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextA_B_testFirst", testFirst(AB_iterRemoveAfterNextA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextA_B_testLast", testLast(AB_iterRemoveAfterNextA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextA_B_testContainsA", 	testContains(AB_iterRemoveAfterNextA_B(), ELEMENT_A, Result.False));
			printTest("AB_iterRemoveAfterNextA_B_testContainsB", 	testContains(AB_iterRemoveAfterNextA_B(), ELEMENT_B, Result.True));
			printTest("AB_iterRemoveAfterNextA_B_testIsEmpty",	testIsEmpty(AB_iterRemoveAfterNextA_B(), Result.False));
			printTest("AB_iterRemoveAfterNextA_B_testSize", testSize(AB_iterRemoveAfterNextA_B(), 1));
			printTest("AB_iterRemoveAfterNextA_B_testToString", testToString(AB_iterRemoveAfterNextA_B(), Result.ValidString));
			printTest("AB_iterRemoveAfterNextA_B_testAddToFrontA", testAddToFront(AB_iterRemoveAfterNextA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testAddToRearA", testAddToRear(AB_iterRemoveAfterNextA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testAddAfterAB", testAddAfter(AB_iterRemoveAfterNextA_B(), ELEMENT_A, ELEMENT_B, Result.NoSuchElement));			
			printTest("AB_iterRemoveAfterNextA_B_testAddAfterBC", testAddAfter(AB_iterRemoveAfterNextA_B(), ELEMENT_B, ELEMENT_C, Result.NoException));			
			printTest("AB_iterRemoveAfterNextA_B_testAddAtIndexNeg1", testAddAtIndex(AB_iterRemoveAfterNextA_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextA_B_testAddAtIndex0", testAddAtIndex(AB_iterRemoveAfterNextA_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testAddAtIndex1", testAddAtIndex(AB_iterRemoveAfterNextA_B(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testAddAtIndex2", testAddAtIndex(AB_iterRemoveAfterNextA_B(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextA_B_testSetNeg1A", testSet(AB_iterRemoveAfterNextA_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextA_B_testSet0A", testSet(AB_iterRemoveAfterNextA_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testSet1A", testSet(AB_iterRemoveAfterNextA_B(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextA_B_testAddA", testAdd(AB_iterRemoveAfterNextA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testGetNeg1", testGet(AB_iterRemoveAfterNextA_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextA_B_testGet0", testGet(AB_iterRemoveAfterNextA_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextA_B_testGet1", testGet(AB_iterRemoveAfterNextA_B(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextA_B_testIndexOfA", testIndexOf(AB_iterRemoveAfterNextA_B(), ELEMENT_A, -1));
			printTest("AB_iterRemoveAfterNextA_B_testIndexOfB", testIndexOf(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 0));
			printTest("AB_iterRemoveAfterNextA_B_testRemoveNeg1", testRemoveIndex(AB_iterRemoveAfterNextA_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextA_B_testRemove0", testRemoveIndex(AB_iterRemoveAfterNextA_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextA_B_testRemove1", testRemoveIndex(AB_iterRemoveAfterNextA_B(), 1, null, Result.IndexOutOfBounds));
			// Iterator
			printTest("AB_iterRemoveAfterNextA_B_testIter", testIter(AB_iterRemoveAfterNextA_B(), Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testIterHasNext", testIterHasNext(AB_iterRemoveAfterNextA_B().iterator(), Result.True));
			printTest("AB_iterRemoveAfterNextA_B_testIterNext", testIterNext(AB_iterRemoveAfterNextA_B().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextA_B_testIterRemove", testIterRemove(AB_iterRemoveAfterNextA_B().iterator(), Result.IllegalState));
			printTest("AB_iterRemoveAfterNextA_B_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_iterRemoveAfterNextA_B(), 1), Result.False));
			printTest("AB_iterRemoveAfterNextA_B_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_iterRemoveAfterNextA_B(), 1), null, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextA_B_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_iterRemoveAfterNextA_B(), 1), Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_iterRemoveAfterNextA_B(), 1)), Result.False));
			printTest("AB_iterRemoveAfterNextA_B_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_iterRemoveAfterNextA_B(), 1)), null, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextA_B_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_iterRemoveAfterNextA_B(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_iterRemoveAfterNextA_B_testListIter", testListIter(AB_iterRemoveAfterNextA_B(), Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testListIter", testListIter(AB_iterRemoveAfterNextA_B(), 0, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testListIterHasPrev", testListIterHasPrev(AB_iterRemoveAfterNextA_B(), 0, Result.False));
			printTest("AB_iterRemoveAfterNextA_B_testListIterHasPrev", testListIterHasPrev(AB_iterRemoveAfterNextA_B(), 1, Result.True));
			printTest("AB_iterRemoveAfterNextA_B_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextA_B_testListIter1Prev1", testListIterPrev(AB_iterRemoveAfterNextA_B(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_iterRemoveAfterNextA_B_testListIterAddNeg1B", testListIterAdd(AB_iterRemoveAfterNextA_B(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextA_B_testListIterAdd0B", testListIterAdd(AB_iterRemoveAfterNextA_B(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testListIterAdd1B", testListIterAdd(AB_iterRemoveAfterNextA_B(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testListIterAdd2B", testListIterAdd(AB_iterRemoveAfterNextA_B(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextA_B_testListIterNextIndex0", testListIterNextIndex(AB_iterRemoveAfterNextA_B(), 0, 0));
			printTest("AB_iterRemoveAfterNextA_B_testListIterNextIndex1", testListIterNextIndex(AB_iterRemoveAfterNextA_B(), 1, 1));
			printTest("AB_iterRemoveAfterNextA_B_testListIterPreviousIndex0", testListIterPrevIndex(AB_iterRemoveAfterNextA_B(), 0, -1));
			printTest("AB_iterRemoveAfterNextA_B_testListIterPreviousIndex1", testListIterPrevIndex(AB_iterRemoveAfterNextA_B(), 1, 0));
			printTest("AB_iterRemoveAfterNextA_B_testListIterNext0AddB", testListNextAdd(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testListIterNext1AddB", testListNextAdd(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testListIterNext2AddB", testListNextAdd(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextA_B_testListIterPrev1Index0AddB", testListPrevAdd(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextA_B_testListIterPrev0Index0AddB", testListPrevAdd(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testListIterPrev0Index1AddB", testListPrevAdd(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testListIterPrev1Index1AddB", testListPrevAdd(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testListIterPrev0Index2AddB", testListPrevAdd(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_iterRemoveAfterNextA_B_testListIterNext0SetB", testListNextSet(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_iterRemoveAfterNextA_B_testListIterNext1SetB", testListNextSet(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_iterRemoveAfterNextA_B_testListIterNext2SetB", testListNextSet(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_iterRemoveAfterNextA_B_testListIterPrev0SetB", testListPrevSet(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_iterRemoveAfterNextA_B_testListIterPrev1SetB", testListPrevSet(AB_iterRemoveAfterNextA_B(), ELEMENT_B, 1, 1, Result.NoException));
			
					
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_iterRemoveAfterNextA_B");
			e.printStackTrace();
		}
	}


	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> it.next()->it.remove() -> [B,C]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B,C] -> iteratorRemoveAfterNextA -> [B,C] 
	 * @return [B,C] after iteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> ABC_iterRemoveAfterNextA_BC(){
		IndexedUnsortedList<Integer> list = AB_addToRearC_ABC(); 
		Iterator<Integer> it = list.iterator();
		it.next();
		it.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B,C] -> it.next()->it.remove() -> [B,C] */
	private void test_ABC_iterRemoveAfterNextA_BC() {
		System.out.println("\nSCENARIO: [A,B,C] -> iterRemoveAfterNextA -> [B,C]\n");
		try {
			printTest("ABC_iterRemoveAfterNextA_BC_testAddToFrontA", testAddToFront(ABC_iterRemoveAfterNextA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testAddToRearA", testAddToRear(ABC_iterRemoveAfterNextA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testAddAfterAA", testAddAfter(ABC_iterRemoveAfterNextA_BC(), ELEMENT_A, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextA_BC_testAddAfterBA", testAddAfter(ABC_iterRemoveAfterNextA_BC(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testAddAfterCA", testAddAfter(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testAddAtIndexNeg1A", testAddAtIndex(ABC_iterRemoveAfterNextA_BC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testAddAtIndex0A", testAddAtIndex(ABC_iterRemoveAfterNextA_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testAddAtIndex1A", testAddAtIndex(ABC_iterRemoveAfterNextA_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testAddAtIndex2A", testAddAtIndex(ABC_iterRemoveAfterNextA_BC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testAddAtIndex3A", testAddAtIndex(ABC_iterRemoveAfterNextA_BC(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testAddA", testAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testRemoveFirst", testRemoveFirst(ABC_iterRemoveAfterNextA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testRemoveLast", testRemoveLast(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testRemoveA", testRemoveElement(ABC_iterRemoveAfterNextA_BC(), ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextA_BC_testRemoveB", testRemoveElement(ABC_iterRemoveAfterNextA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testRemoveC", testRemoveElement(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testRemoveNeg1", testRemoveIndex(ABC_iterRemoveAfterNextA_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testRemove0", testRemoveIndex(ABC_iterRemoveAfterNextA_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testRemove1", testRemoveIndex(ABC_iterRemoveAfterNextA_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testRemove2", testRemoveIndex(ABC_iterRemoveAfterNextA_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testFirst", testFirst(ABC_iterRemoveAfterNextA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testLast", testLast(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testContainsA", testContains(ABC_iterRemoveAfterNextA_BC(), ELEMENT_A, Result.False));
			printTest("ABC_iterRemoveAfterNextA_BC_testContainsB", testContains(ABC_iterRemoveAfterNextA_BC(), ELEMENT_B, Result.True));
			printTest("ABC_iterRemoveAfterNextA_BC_testContainsC", testContains(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, Result.True));
			printTest("ABC_iterRemoveAfterNextA_BC_testIsEmpty", testIsEmpty(ABC_iterRemoveAfterNextA_BC(), Result.False));
			printTest("ABC_iterRemoveAfterNextA_BC_testSize", testSize(ABC_iterRemoveAfterNextA_BC(), 2));
			printTest("ABC_iterRemoveAfterNextA_BC_testToString", testToString(ABC_iterRemoveAfterNextA_BC(), Result.ValidString));
			printTest("ABC_iterRemoveAfterNextA_BC_testSetNeg1A", testSet(ABC_iterRemoveAfterNextA_BC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testSet0A", testSet(ABC_iterRemoveAfterNextA_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testSet1A", testSet(ABC_iterRemoveAfterNextA_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testSet2A", testSet(ABC_iterRemoveAfterNextA_BC(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testGetNeg1", testGet(ABC_iterRemoveAfterNextA_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testGet0", testGet(ABC_iterRemoveAfterNextA_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testGet1", testGet(ABC_iterRemoveAfterNextA_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testGet2", testGet(ABC_iterRemoveAfterNextA_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testIndexOfA", testIndexOf(ABC_iterRemoveAfterNextA_BC(), ELEMENT_A, -1));
			printTest("ABC_iterRemoveAfterNextA_BC_testIndexOfB", testIndexOf(ABC_iterRemoveAfterNextA_BC(), ELEMENT_B, 0));
			printTest("ABC_iterRemoveAfterNextA_BC_testIndexOfC", testIndexOf(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_iterRemoveAfterNextA_BC_testIter", testIter(ABC_iterRemoveAfterNextA_BC(), Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testIterHasNext", testIterHasNext(ABC_iterRemoveAfterNextA_BC().iterator(), Result.True));
			printTest("ABC_iterRemoveAfterNextA_BC_testIterNext", testIterNext(ABC_iterRemoveAfterNextA_BC().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testIterRemove", testIterRemove(ABC_iterRemoveAfterNextA_BC().iterator(), Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 1), Result.True));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 1), Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 1)), Result.True));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 1)), Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 2), Result.False));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 2), null, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 2), Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 2)), Result.False));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextA_BC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextA_BC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_iterRemoveAfterNextA_BC_testListIter", testListIter(ABC_iterRemoveAfterNextA_BC(), Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIter", testListIter(ABC_iterRemoveAfterNextA_BC(), 0, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterHas0Prev", testListIterHasPrev(ABC_iterRemoveAfterNextA_BC(), 0, Result.False));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterHas1Prev", testListIterHasPrev(ABC_iterRemoveAfterNextA_BC(), 1, Result.True));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterHas2Prev", testListIterHasPrev(ABC_iterRemoveAfterNextA_BC(), 2, Result.True));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIter1Prev1", testListIterPrev(ABC_iterRemoveAfterNextA_BC(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIter2Prev2", testListIterPrev(ABC_iterRemoveAfterNextA_BC(), 2, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIter2Prev1", testListIterPrev(ABC_iterRemoveAfterNextA_BC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterAddNeg1C", testListIterAdd(ABC_iterRemoveAfterNextA_BC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterAdd0C", testListIterAdd(ABC_iterRemoveAfterNextA_BC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterAdd1C", testListIterAdd(ABC_iterRemoveAfterNextA_BC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterAdd2C", testListIterAdd(ABC_iterRemoveAfterNextA_BC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterAdd3C", testListIterAdd(ABC_iterRemoveAfterNextA_BC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNextIndex0", testListIterNextIndex(ABC_iterRemoveAfterNextA_BC(), 0, 0));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNextIndex1", testListIterNextIndex(ABC_iterRemoveAfterNextA_BC(), 1, 1));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNextIndex2", testListIterNextIndex(ABC_iterRemoveAfterNextA_BC(), 2, 2));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_iterRemoveAfterNextA_BC(), 0, -1));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_iterRemoveAfterNextA_BC(), 1, 0));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_iterRemoveAfterNextA_BC(), 2, 1));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNext0AddC", testListNextAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNext1AddC", testListNextAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNext2AddC", testListNextAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNext3AddC", testListNextAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNext0SetC", testListNextSet(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNext1SetC", testListNextSet(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNext2SetC", testListNextSet(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterNext3SetC", testListNextSet(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev0SetC", testListPrevSet(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev1SetC", testListPrevSet(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextA_BC_testListIterPrev2SetC", testListPrevSet(ABC_iterRemoveAfterNextA_BC(), ELEMENT_C, 2, 2, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_iterRemoveAfterNextA_BC");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,C] -> it.next()->it.next()->it.remove() -> [A,C]
	////////////////////////////////////////////////
	
	
	/** Scenario: [A,B,C] -> iteratorRemoveAfterNextA -> [A,C] 
	 * @return [A,C] after iteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> ABC_iterRemoveAfterNextB_AC(){
		IndexedUnsortedList<Integer> list = AB_addToRearC_ABC(); 
		Iterator<Integer> it = list.iterator();
		it.next();
		it.next();
		it.remove();
		return list;
	}

	/** Run all tests on scenario: [A,C] -> it.next()->it.remove() -> [A,C] */
	private void test_ABC_iterRemoveAfterNextB_AC() {
		System.out.println("\nSCENARIO: [A,B,C] -> iterRemoveAfterNextB -> [B,C]\n");
		try {
			printTest("ABC_iterRemoveAfterNextB_AC_testAddToFrontB", testAddToFront(ABC_iterRemoveAfterNextB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testAddToRearB", testAddToRear(ABC_iterRemoveAfterNextB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testAddAfterAB", testAddAfter(ABC_iterRemoveAfterNextB_AC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testAddAfterBB", testAddAfter(ABC_iterRemoveAfterNextB_AC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextB_AC_testAddAfterCB", testAddAfter(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testAddAtIndexNeg1B", testAddAtIndex(ABC_iterRemoveAfterNextB_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testAddAtIndex0B", testAddAtIndex(ABC_iterRemoveAfterNextB_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testAddAtIndex1B", testAddAtIndex(ABC_iterRemoveAfterNextB_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testAddAtIndex2B", testAddAtIndex(ABC_iterRemoveAfterNextB_AC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testAddAtIndex3B", testAddAtIndex(ABC_iterRemoveAfterNextB_AC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testAddB", testAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testRemoveFirst", testRemoveFirst(ABC_iterRemoveAfterNextB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testRemoveLast", testRemoveLast(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testRemoveA", testRemoveElement(ABC_iterRemoveAfterNextB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testRemoveB", testRemoveElement(ABC_iterRemoveAfterNextB_AC(), ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextB_AC_testRemoveC", testRemoveElement(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testRemoveNeg1", testRemoveIndex(ABC_iterRemoveAfterNextB_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testRemove0", testRemoveIndex(ABC_iterRemoveAfterNextB_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testRemove1", testRemoveIndex(ABC_iterRemoveAfterNextB_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testRemove2", testRemoveIndex(ABC_iterRemoveAfterNextB_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testFirst", testFirst(ABC_iterRemoveAfterNextB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testLast", testLast(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testContainsA", testContains(ABC_iterRemoveAfterNextB_AC(), ELEMENT_A, Result.True));
			printTest("ABC_iterRemoveAfterNextB_AC_testContainsB", testContains(ABC_iterRemoveAfterNextB_AC(), ELEMENT_B, Result.False));
			printTest("ABC_iterRemoveAfterNextB_AC_testContainsC", testContains(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, Result.True));
			printTest("ABC_iterRemoveAfterNextB_AC_testIsEmpty", testIsEmpty(ABC_iterRemoveAfterNextB_AC(), Result.False));
			printTest("ABC_iterRemoveAfterNextB_AC_testSize", testSize(ABC_iterRemoveAfterNextB_AC(), 2));
			printTest("ABC_iterRemoveAfterNextB_AC_testToString", testToString(ABC_iterRemoveAfterNextB_AC(), Result.ValidString));
			printTest("ABC_iterRemoveAfterNextB_AC_testSetNeg1B", testSet(ABC_iterRemoveAfterNextB_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testSet0B", testSet(ABC_iterRemoveAfterNextB_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testSet1B", testSet(ABC_iterRemoveAfterNextB_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testSet2B", testSet(ABC_iterRemoveAfterNextB_AC(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testGetNeg1", testGet(ABC_iterRemoveAfterNextB_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testGet0", testGet(ABC_iterRemoveAfterNextB_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testGet1", testGet(ABC_iterRemoveAfterNextB_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testGet2", testGet(ABC_iterRemoveAfterNextB_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testIndexOfA", testIndexOf(ABC_iterRemoveAfterNextB_AC(), ELEMENT_A, 0));
			printTest("ABC_iterRemoveAfterNextB_AC_testIndexOfB", testIndexOf(ABC_iterRemoveAfterNextB_AC(), ELEMENT_B, -1));
			printTest("ABC_iterRemoveAfterNextB_AC_testIndexOfC", testIndexOf(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_iterRemoveAfterNextB_AC_testIter", testIter(ABC_iterRemoveAfterNextB_AC(), Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testIterHasNext", testIterHasNext(ABC_iterRemoveAfterNextB_AC().iterator(), Result.True));
			printTest("ABC_iterRemoveAfterNextB_AC_testIterNext", testIterNext(ABC_iterRemoveAfterNextB_AC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testIterRemove", testIterRemove(ABC_iterRemoveAfterNextB_AC().iterator(), Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 1), Result.True));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 1), Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 1)), Result.True));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 1)), Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 2), Result.False));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 2), null, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 2), Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 2)), Result.False));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextB_AC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextB_AC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_iterRemoveAfterNextB_AC_testListIter", testListIter(ABC_iterRemoveAfterNextB_AC(), Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIter", testListIter(ABC_iterRemoveAfterNextB_AC(), 0, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterHas0Prev", testListIterHasPrev(ABC_iterRemoveAfterNextB_AC(), 0, Result.False));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterHas1Prev", testListIterHasPrev(ABC_iterRemoveAfterNextB_AC(), 1, Result.True));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterHas2Prev", testListIterHasPrev(ABC_iterRemoveAfterNextB_AC(), 2, Result.True));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIter1Prev1", testListIterPrev(ABC_iterRemoveAfterNextB_AC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIter2Prev2", testListIterPrev(ABC_iterRemoveAfterNextB_AC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIter2Prev1", testListIterPrev(ABC_iterRemoveAfterNextB_AC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterAddNeg1C", testListIterAdd(ABC_iterRemoveAfterNextB_AC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterAdd0C", testListIterAdd(ABC_iterRemoveAfterNextB_AC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterAdd1C", testListIterAdd(ABC_iterRemoveAfterNextB_AC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterAdd2C", testListIterAdd(ABC_iterRemoveAfterNextB_AC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterAdd3C", testListIterAdd(ABC_iterRemoveAfterNextB_AC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNextIndex0", testListIterNextIndex(ABC_iterRemoveAfterNextB_AC(), 0, 0));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNextIndex1", testListIterNextIndex(ABC_iterRemoveAfterNextB_AC(), 1, 1));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNextIndex2", testListIterNextIndex(ABC_iterRemoveAfterNextB_AC(), 2, 2));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_iterRemoveAfterNextB_AC(), 0, -1));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_iterRemoveAfterNextB_AC(), 1, 0));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_iterRemoveAfterNextB_AC(), 2, 1));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNext0AddC", testListNextAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNext1AddC", testListNextAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNext2AddC", testListNextAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNext3AddC", testListNextAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNext0SetC", testListNextSet(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNext1SetC", testListNextSet(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNext2SetC", testListNextSet(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterNext3SetC", testListNextSet(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev0SetC", testListPrevSet(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev1SetC", testListPrevSet(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextB_AC_testListIterPrev2SetC", testListPrevSet(ABC_iterRemoveAfterNextB_AC(), ELEMENT_C, 2, 2, Result.NoException));
			
		

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_iterRemoveAfterNextB_AC");
			e.printStackTrace();
		}
	}

	
	////////////////////////////////////////////////
	// XXX SCENARIO:  [A,B,C] -> it.next()->it.next()->it.next()->it.remove() ->[A,B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B,C] -> iteratorRemoveAfterNextA -> [A,B] 
	 * @return [A,B] after iteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> ABC_iterRemoveAfterNextC_AB(){
		IndexedUnsortedList<Integer> list = AB_addToRearC_ABC(); 
		Iterator<Integer> it = list.iterator();
		it.next();
		it.next();
		it.next();
		it.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B,C] -> it.next()->it.remove() -> [A,C] */
	private void test_ABC_iterRemoveAfterNextC_AB() {
		System.out.println("\nSCENARIO: [A,B,C] -> iterRemoveAfterNextC -> [A,B]\n");
		try {
			printTest("ABC_iterRemoveAfterNextC_AB_testAddToFrontC", testAddToFront(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testAddToRearC", testAddToRear(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testAddAfterAC", testAddAfter(ABC_iterRemoveAfterNextC_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testAddAfterBC", testAddAfter(ABC_iterRemoveAfterNextC_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testAddAfterDC", testAddAfter(ABC_iterRemoveAfterNextC_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextC_AB_testAddAtIndexNeg1C", testAddAtIndex(ABC_iterRemoveAfterNextC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testAddAtIndex0C", testAddAtIndex(ABC_iterRemoveAfterNextC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testAddAtIndex1C", testAddAtIndex(ABC_iterRemoveAfterNextC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testAddAtIndex2C", testAddAtIndex(ABC_iterRemoveAfterNextC_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testAddAtIndex3C", testAddAtIndex(ABC_iterRemoveAfterNextC_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testAddC", testAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testRemoveFirst", testRemoveFirst(ABC_iterRemoveAfterNextC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testRemoveLast", testRemoveLast(ABC_iterRemoveAfterNextC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testRemoveA", testRemoveElement(ABC_iterRemoveAfterNextC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testRemoveB", testRemoveElement(ABC_iterRemoveAfterNextC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testRemoveC", testRemoveElement(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextC_AB_testRemoveNeg1", testRemoveIndex(ABC_iterRemoveAfterNextC_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testRemove0", testRemoveIndex(ABC_iterRemoveAfterNextC_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testRemove1", testRemoveIndex(ABC_iterRemoveAfterNextC_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testRemove2", testRemoveIndex(ABC_iterRemoveAfterNextC_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testFirst", testFirst(ABC_iterRemoveAfterNextC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testLast", testLast(ABC_iterRemoveAfterNextC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testContainsA", testContains(ABC_iterRemoveAfterNextC_AB(), ELEMENT_A, Result.True));
			printTest("ABC_iterRemoveAfterNextC_AB_testContainsB", testContains(ABC_iterRemoveAfterNextC_AB(), ELEMENT_B, Result.True));
			printTest("ABC_iterRemoveAfterNextC_AB_testContainsC", testContains(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, Result.False));
			printTest("ABC_iterRemoveAfterNextC_AB_testIsEmpty", testIsEmpty(ABC_iterRemoveAfterNextC_AB(), Result.False));
			printTest("ABC_iterRemoveAfterNextC_AB_testSize", testSize(ABC_iterRemoveAfterNextC_AB(), 2));
			printTest("ABC_iterRemoveAfterNextC_AB_testToString", testToString(ABC_iterRemoveAfterNextC_AB(), Result.ValidString));
			printTest("ABC_iterRemoveAfterNextC_AB_testSetNeg1C", testSet(ABC_iterRemoveAfterNextC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testSet0C", testSet(ABC_iterRemoveAfterNextC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testSet1C", testSet(ABC_iterRemoveAfterNextC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testSet2C", testSet(ABC_iterRemoveAfterNextC_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testGetNeg1", testGet(ABC_iterRemoveAfterNextC_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testGet0", testGet(ABC_iterRemoveAfterNextC_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testGet1", testGet(ABC_iterRemoveAfterNextC_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testGet2", testGet(ABC_iterRemoveAfterNextC_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testIndexOfA", testIndexOf(ABC_iterRemoveAfterNextC_AB(), ELEMENT_A, 0));
			printTest("ABC_iterRemoveAfterNextC_AB_testIndexOfB", testIndexOf(ABC_iterRemoveAfterNextC_AB(), ELEMENT_B, 1));
			printTest("ABC_iterRemoveAfterNextC_AB_testIndexOfC", testIndexOf(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("ABC_iterRemoveAfterNextC_AB_testIter", testIter(ABC_iterRemoveAfterNextC_AB(), Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testIterHasNext", testIterHasNext(ABC_iterRemoveAfterNextC_AB().iterator(), Result.True));
			printTest("ABC_iterRemoveAfterNextC_AB_testIterNext", testIterNext(ABC_iterRemoveAfterNextC_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testIterRemove", testIterRemove(ABC_iterRemoveAfterNextC_AB().iterator(), Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 1), Result.True));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 1), Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 1)), Result.True));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 1)), Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 2), Result.False));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 2), null, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 2), Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 2)), Result.False));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 2)), null, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextC_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_iterRemoveAfterNextC_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_iterRemoveAfterNextC_AB_testListIter", testListIter(ABC_iterRemoveAfterNextC_AB(), Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIter", testListIter(ABC_iterRemoveAfterNextC_AB(), 0, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterHas0Prev", testListIterHasPrev(ABC_iterRemoveAfterNextC_AB(), 0, Result.False));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterHas1Prev", testListIterHasPrev(ABC_iterRemoveAfterNextC_AB(), 1, Result.True));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterHas2Prev", testListIterHasPrev(ABC_iterRemoveAfterNextC_AB(), 2, Result.True));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIter1Prev1", testListIterPrev(ABC_iterRemoveAfterNextC_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIter2Prev2", testListIterPrev(ABC_iterRemoveAfterNextC_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIter2Prev1", testListIterPrev(ABC_iterRemoveAfterNextC_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterAddNeg1C", testListIterAdd(ABC_iterRemoveAfterNextC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterAdd0C", testListIterAdd(ABC_iterRemoveAfterNextC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterAdd1C", testListIterAdd(ABC_iterRemoveAfterNextC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterAdd2C", testListIterAdd(ABC_iterRemoveAfterNextC_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterAdd3C", testListIterAdd(ABC_iterRemoveAfterNextC_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNextIndex0", testListIterNextIndex(ABC_iterRemoveAfterNextC_AB(), 0, 0));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNextIndex1", testListIterNextIndex(ABC_iterRemoveAfterNextC_AB(), 1, 1));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNextIndex2", testListIterNextIndex(ABC_iterRemoveAfterNextC_AB(), 2, 2));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPreviousIndex0", testListIterPrevIndex(ABC_iterRemoveAfterNextC_AB(), 0, -1));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPreviousIndex1", testListIterPrevIndex(ABC_iterRemoveAfterNextC_AB(), 1, 0));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPreviousIndex2", testListIterPrevIndex(ABC_iterRemoveAfterNextC_AB(), 2, 1));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNext0AddC", testListNextAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNext1AddC", testListNextAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNext2AddC", testListNextAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNext3AddC", testListNextAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev1Index0AddC", testListPrevAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev0Index0AddC", testListPrevAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev0Index1AddC", testListPrevAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev1Index1AddC", testListPrevAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev0Index2AddC", testListPrevAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev1Index2AddC", testListPrevAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev2Index2AddC", testListPrevAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev0Index3AddC", testListPrevAdd(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNext0SetC", testListNextSet(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNext1SetC", testListNextSet(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNext2SetC", testListNextSet(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterNext3SetC", testListNextSet(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev0SetC", testListPrevSet(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev1SetC", testListPrevSet(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_iterRemoveAfterNextC_AB_testListIterPrev2SetC", testListPrevSet(ABC_iterRemoveAfterNextC_AB(), ELEMENT_C, 2, 2, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_iterRemoveAfterNextC_AB");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> lit.next()->lit.remove() -> [}
	////////////////////////////////////////////////
	


	/** Scenario: [A] -> iteratorRemoveAfterNextA -> [ ] 
	 * @return [ ] after iteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> A_listIterRemoveAfterNextA_emptyList() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A] -> lit.next()->lit.remove() -> [ ] */
	private void test_A_listIterRemoveAfterNextA_emptyList() {
		System.out.println("\nSCENARIO: [A] -> listIterRemoveAfterNextA -> [ ]\n");
		try {
			printTest("A_listIterRemoveAfterNextA_emptyList_testAddToFrontA", testAddToFront(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_listIterRemoveAfterNextA_emptyList_testAddToRearA", testAddToRear(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_listIterRemoveAfterNextA_emptyList_testAddAfterBA", testAddAfter(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_B, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterNextA_emptyList_testAddAtIndexNeg1", testAddAtIndex(A_listIterRemoveAfterNextA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testAddAtIndex0", testAddAtIndex(A_listIterRemoveAfterNextA_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_listIterRemoveAfterNextA_emptyList_testAddAtIndex1", testAddAtIndex(A_listIterRemoveAfterNextA_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testAddA", testAdd(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_listIterRemoveAfterNextA_emptyList_testRemoveFirst", testRemoveFirst(A_listIterRemoveAfterNextA_emptyList(), null, Result.IllegalState));
			printTest("A_listIterRemoveAfterNextA_emptyList_testRemoveLast", testRemoveLast(A_listIterRemoveAfterNextA_emptyList(), null, Result.IllegalState));
			printTest("A_listIterRemoveAfterNextA_emptyList_testRemoveA", testRemoveElement(A_listIterRemoveAfterNextA_emptyList(), null, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterNextA_emptyList_testRemoveNeg1", testRemoveIndex(A_listIterRemoveAfterNextA_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testRemove0", testRemoveIndex(A_listIterRemoveAfterNextA_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testFirst", testFirst(A_listIterRemoveAfterNextA_emptyList(), null, Result.IllegalState));
			printTest("A_listIterRemoveAfterNextA_emptyList_testLast", testLast(A_listIterRemoveAfterNextA_emptyList(), null, Result.IllegalState));
			printTest("A_listIterRemoveAfterNextA_emptyList_testContainsA", testContains(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, Result.False));
			printTest("A_listIterRemoveAfterNextA_emptyList_testIsEmpty", testIsEmpty(A_listIterRemoveAfterNextA_emptyList(), Result.True));
			printTest("A_listIterRemoveAfterNextA_emptyList_testSize", testSize(A_listIterRemoveAfterNextA_emptyList(), 0));
			printTest("A_listIterRemoveAfterNextA_emptyList_testToString", testToString(A_listIterRemoveAfterNextA_emptyList(), Result.ValidString));
			printTest("A_listIterRemoveAfterNextA_emptyList_testSetNeg1A", testSet(A_listIterRemoveAfterNextA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testSet0A", testSet(A_listIterRemoveAfterNextA_emptyList(), 0, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testGetNeg1", testGet(A_listIterRemoveAfterNextA_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testGet0", testGet(A_listIterRemoveAfterNextA_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testIndexOfA", testIndexOf(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, -1));
			// Iterator
			printTest("A_listIterRemoveAfterNextA_emptyList_testIter", testIter(A_listIterRemoveAfterNextA_emptyList(), Result.NoException));
			printTest("A_listIterRemoveAfterNextA_emptyList_testIterHasNext", testIterHasNext(A_listIterRemoveAfterNextA_emptyList().iterator(), Result.False));
			printTest("A_listIterRemoveAfterNextA_emptyList_testIterNext", testIterNext(A_listIterRemoveAfterNextA_emptyList().iterator(), null, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterNextA_emptyList_testIterRemove", testIterRemove(A_listIterRemoveAfterNextA_emptyList().iterator(), Result.IllegalState));
			// List Iterator
			
			
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIter", testListIter(A_listIterRemoveAfterNextA_emptyList(), Result.NoException));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIter", testListIter(A_listIterRemoveAfterNextA_emptyList(), 0, Result.NoException));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterHasPrev", testListIterHasPrev(A_listIterRemoveAfterNextA_emptyList(), 0, Result.False));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterPrev", testListIterPrev(A_listIterRemoveAfterNextA_emptyList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterAddNeg1A", testListIterAdd(A_listIterRemoveAfterNextA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterAdd0A", testListIterAdd(A_listIterRemoveAfterNextA_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterAdd1A", testListIterAdd(A_listIterRemoveAfterNextA_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterNextIndex0", testListIterNextIndex(A_listIterRemoveAfterNextA_emptyList(), 0, 0));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterPreviousIndex0", testListIterPrevIndex(A_listIterRemoveAfterNextA_emptyList(), 0, -1));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterNext0AddA", testListNextAdd(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, 0, Result.NoException));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterNext1AddA", testListNextAdd(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, 1, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterPrev0Index0AddA", testListPrevAdd(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, 0, 0, Result.NoException));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterPrev0Index1AddA", testListPrevAdd(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, 0, 1, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterPrev1Index0AddA", testListPrevAdd(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, 1, 0, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterNext0SetA", testListNextSet(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, 0, Result.IllegalState));
			printTest("A_listIterRemoveAfterNextA_emptyList_testListIterPrev0SetA", testListPrevSet(A_listIterRemoveAfterNextA_emptyList(), ELEMENT_A, 0, 0, Result.IllegalState));
					
			} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_listIterRemoveAfterNextA_emptyList");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> lit.next()->lit.next()->lit.remove() -> [A]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B] -> listIteratorRemoveAfterNextA -> [A] 
	 * @return [A] after listIteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> AB_listIterRemoveAfterNextB_A(){
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.next();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B] -> it.next()->it.next()->it.remove() -> [A] */
	private void test_AB_listIterRemoveAfterNextB_A() {
		System.out.println("\nSCENARIO: [A,B] -> iterRemoveAfterNextA -> [A]\n");
		try {
			printTest("AB_listIterRemoveAfterNextB_A_testRemoveFirst", testRemoveFirst(AB_listIterRemoveAfterNextB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextB_A_testRemoveLast", testRemoveLast(AB_listIterRemoveAfterNextB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextB_A_testRemoveA",	testRemoveElement(AB_listIterRemoveAfterNextB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextB_A_testRemoveB",	testRemoveElement(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextB_A_testFirst", testFirst(AB_listIterRemoveAfterNextB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextB_A_testLast", testLast(AB_listIterRemoveAfterNextB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextB_A_testContainsA", 	testContains(AB_listIterRemoveAfterNextB_A(), ELEMENT_A, Result.True));
			printTest("AB_listIterRemoveAfterNextB_A_testContainsB", 	testContains(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, Result.False));
			printTest("AB_listIterRemoveAfterNextB_A_testIsEmpty",	testIsEmpty(AB_listIterRemoveAfterNextB_A(), Result.False));
			printTest("AB_listIterRemoveAfterNextB_A_testSize", testSize(AB_listIterRemoveAfterNextB_A(), 1));
			printTest("AB_listIterRemoveAfterNextB_A_testToString", testToString(AB_listIterRemoveAfterNextB_A(), Result.ValidString));
			printTest("AB_listIterRemoveAfterNextB_A_testAddToFrontB", testAddToFront(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testAddToRearB", testAddToRear(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testAddAfterAB", testAddAfter(AB_listIterRemoveAfterNextB_A(), ELEMENT_A, ELEMENT_B, Result.NoException));			
			printTest("AB_listIterRemoveAfterNextB_A_testAddAfterBC", testAddAfter(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, ELEMENT_C, Result.NoSuchElement));			
			printTest("AB_listIterRemoveAfterNextB_A_testAddAtIndexNeg1", testAddAtIndex(AB_listIterRemoveAfterNextB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextB_A_testAddAtIndex0", testAddAtIndex(AB_listIterRemoveAfterNextB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testAddAtIndex1", testAddAtIndex(AB_listIterRemoveAfterNextB_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testAddAtIndex2", testAddAtIndex(AB_listIterRemoveAfterNextB_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextB_A_testSetNeg1B", testSet(AB_listIterRemoveAfterNextB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextB_A_testSet0B", testSet(AB_listIterRemoveAfterNextB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testSet1B", testSet(AB_listIterRemoveAfterNextB_A(), 1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextB_A_testAddB", testAdd(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testGetNeg1", testGet(AB_listIterRemoveAfterNextB_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextB_A_testGet0", testGet(AB_listIterRemoveAfterNextB_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextB_A_testGet1", testGet(AB_listIterRemoveAfterNextB_A(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextB_A_testIndexOfA", testIndexOf(AB_listIterRemoveAfterNextB_A(), ELEMENT_A, 0));
			printTest("AB_listIterRemoveAfterNextB_A_testIndexOfB", testIndexOf(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, -1));
			printTest("AB_listIterRemoveAfterNextB_A_testRemoveNeg1", testRemoveIndex(AB_listIterRemoveAfterNextB_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextB_A_testRemove0", testRemoveIndex(AB_listIterRemoveAfterNextB_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextB_A_testRemove1", testRemoveIndex(AB_listIterRemoveAfterNextB_A(), 1, null, Result.IndexOutOfBounds));
			// Iterator
			printTest("AB_listIterRemoveAfterNextB_A_testIter", testIter(AB_listIterRemoveAfterNextB_A(), Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testIterHasNext", testIterHasNext(AB_listIterRemoveAfterNextB_A().iterator(), Result.True));
			printTest("AB_listIterRemoveAfterNextB_A_testIterNext", testIterNext(AB_listIterRemoveAfterNextB_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextB_A_testIterRemove", testIterRemove(AB_listIterRemoveAfterNextB_A().iterator(), Result.IllegalState));
			printTest("AB_listIterRemoveAfterNextB_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterRemoveAfterNextB_A(), 1), Result.False));
			printTest("AB_listIterRemoveAfterNextB_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_listIterRemoveAfterNextB_A(), 1), null, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextB_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterRemoveAfterNextB_A(), 1), Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterNextB_A(), 1)), Result.False));
			printTest("AB_listIterRemoveAfterNextB_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterNextB_A(), 1)), null, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextB_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterNextB_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_listIterRemoveAfterNextB_A_testListIter", testListIter(AB_listIterRemoveAfterNextB_A(), Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testListIter", testListIter(AB_listIterRemoveAfterNextB_A(), 0, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterHasPrev", testListIterHasPrev(AB_listIterRemoveAfterNextB_A(), 0, Result.False));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterHasPrev", testListIterHasPrev(AB_listIterRemoveAfterNextB_A(), 1, Result.True));
			printTest("AB_listIterRemoveAfterNextB_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextB_A_testListIter1Prev1", testListIterPrev(AB_listIterRemoveAfterNextB_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterAddNeg1B", testListIterAdd(AB_listIterRemoveAfterNextB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterAdd0B", testListIterAdd(AB_listIterRemoveAfterNextB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterAdd1B", testListIterAdd(AB_listIterRemoveAfterNextB_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterAdd2B", testListIterAdd(AB_listIterRemoveAfterNextB_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterNextIndex0", testListIterNextIndex(AB_listIterRemoveAfterNextB_A(), 0, 0));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterNextIndex1", testListIterNextIndex(AB_listIterRemoveAfterNextB_A(), 1, 1));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterRemoveAfterNextB_A(), 0, -1));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterRemoveAfterNextB_A(), 1, 0));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterNext0AddB", testListNextAdd(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterNext1AddB", testListNextAdd(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterNext2AddB", testListNextAdd(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterPrev1Index0AddB", testListPrevAdd(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterPrev0Index0AddB", testListPrevAdd(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterPrev0Index1AddB", testListPrevAdd(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterPrev1Index1AddB", testListPrevAdd(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterPrev0Index2AddB", testListPrevAdd(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterNext0SetB", testListNextSet(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterNext1SetB", testListNextSet(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterNext2SetB", testListNextSet(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterPrev0SetB", testListPrevSet(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_listIterRemoveAfterNextB_A_testListIterPrev1SetB", testListPrevSet(AB_listIterRemoveAfterNextB_A(), ELEMENT_B, 1, 1, Result.NoException));
			
						
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterRemoveAfterNextB_A");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> lit.next()->lit.remove() -> [B]
	////////////////////////////////////////////////
	

	
	/** Scenario: [A,B] -> iteratorRemoveAfterNextA -> [B] 
	 * @return [B] after iteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> AB_listIterRemoveAfterNextA_B(){
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B] -> lit.next()->lit.remove() -> [B] */
	private void test_AB_listIterRemoveAfterNextA_B() {
		System.out.println("\nSCENARIO: [A,B] -> iterRemoveAfterNextA -> [B]\n");
		try {
			printTest("AB_listIterRemoveAfterNextA_B_testRemoveFirst", testRemoveFirst(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextA_B_testRemoveLast", testRemoveLast(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextA_B_testRemoveA",	testRemoveElement(AB_listIterRemoveAfterNextA_B(), ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextA_B_testRemoveB",	testRemoveElement(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextA_B_testFirst", testFirst(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextA_B_testLast", testLast(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextA_B_testContainsA", 	testContains(AB_listIterRemoveAfterNextA_B(), ELEMENT_A, Result.False));
			printTest("AB_listIterRemoveAfterNextA_B_testContainsB", 	testContains(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, Result.True));
			printTest("AB_listIterRemoveAfterNextA_B_testIsEmpty",	testIsEmpty(AB_listIterRemoveAfterNextA_B(), Result.False));
			printTest("AB_listIterRemoveAfterNextA_B_testSize", testSize(AB_listIterRemoveAfterNextA_B(), 1));
			printTest("AB_listIterRemoveAfterNextA_B_testToString", testToString(AB_listIterRemoveAfterNextA_B(), Result.ValidString));
			printTest("AB_listIterRemoveAfterNextA_B_testAddToFrontA", testAddToFront(AB_listIterRemoveAfterNextA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testAddToRearA", testAddToRear(AB_listIterRemoveAfterNextA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testAddAfterAB", testAddAfter(AB_listIterRemoveAfterNextA_B(), ELEMENT_A, ELEMENT_B, Result.NoSuchElement));			
			printTest("AB_listIterRemoveAfterNextA_B_testAddAfterBC", testAddAfter(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, ELEMENT_C, Result.NoException));			
			printTest("AB_listIterRemoveAfterNextA_B_testAddAtIndexNeg1", testAddAtIndex(AB_listIterRemoveAfterNextA_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextA_B_testAddAtIndex0", testAddAtIndex(AB_listIterRemoveAfterNextA_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testAddAtIndex1", testAddAtIndex(AB_listIterRemoveAfterNextA_B(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testAddAtIndex2", testAddAtIndex(AB_listIterRemoveAfterNextA_B(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextA_B_testSetNeg1A", testSet(AB_listIterRemoveAfterNextA_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextA_B_testSet0A", testSet(AB_listIterRemoveAfterNextA_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testSet1A", testSet(AB_listIterRemoveAfterNextA_B(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextA_B_testAddA", testAdd(AB_listIterRemoveAfterNextA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testGetNeg1", testGet(AB_listIterRemoveAfterNextA_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextA_B_testGet0", testGet(AB_listIterRemoveAfterNextA_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextA_B_testGet1", testGet(AB_listIterRemoveAfterNextA_B(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextA_B_testIndexOfA", testIndexOf(AB_listIterRemoveAfterNextA_B(), ELEMENT_A, -1));
			printTest("AB_listIterRemoveAfterNextA_B_testIndexOfB", testIndexOf(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 0));
			printTest("AB_listIterRemoveAfterNextA_B_testRemoveNeg1", testRemoveIndex(AB_listIterRemoveAfterNextA_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextA_B_testRemove0", testRemoveIndex(AB_listIterRemoveAfterNextA_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextA_B_testRemove1", testRemoveIndex(AB_listIterRemoveAfterNextA_B(), 1, null, Result.IndexOutOfBounds));
			// Iterator
			printTest("AB_listIterRemoveAfterNextA_B_testIter", testIter(AB_listIterRemoveAfterNextA_B(), Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testIterHasNext", testIterHasNext(AB_listIterRemoveAfterNextA_B().iterator(), Result.True));
			printTest("AB_listIterRemoveAfterNextA_B_testIterNext", testIterNext(AB_listIterRemoveAfterNextA_B().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextA_B_testIterRemove", testIterRemove(AB_listIterRemoveAfterNextA_B().iterator(), Result.IllegalState));
			printTest("AB_listIterRemoveAfterNextA_B_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterRemoveAfterNextA_B(), 1), Result.False));
			printTest("AB_listIterRemoveAfterNextA_B_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_listIterRemoveAfterNextA_B(), 1), null, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextA_B_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterRemoveAfterNextA_B(), 1), Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterNextA_B(), 1)), Result.False));
			printTest("AB_listIterRemoveAfterNextA_B_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterNextA_B(), 1)), null, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextA_B_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterNextA_B(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_listIterRemoveAfterNextA_B_testListIter", testListIter(AB_listIterRemoveAfterNextA_B(), Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testListIter", testListIter(AB_listIterRemoveAfterNextA_B(), 0, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterHasPrev", testListIterHasPrev(AB_listIterRemoveAfterNextA_B(), 0, Result.False));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterHasPrev", testListIterHasPrev(AB_listIterRemoveAfterNextA_B(), 1, Result.True));
			printTest("AB_listIterRemoveAfterNextA_B_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextA_B_testListIter1Prev1", testListIterPrev(AB_listIterRemoveAfterNextA_B(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterAddNeg1B", testListIterAdd(AB_listIterRemoveAfterNextA_B(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterAdd0B", testListIterAdd(AB_listIterRemoveAfterNextA_B(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterAdd1B", testListIterAdd(AB_listIterRemoveAfterNextA_B(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterAdd2B", testListIterAdd(AB_listIterRemoveAfterNextA_B(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterNextIndex0", testListIterNextIndex(AB_listIterRemoveAfterNextA_B(), 0, 0));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterNextIndex1", testListIterNextIndex(AB_listIterRemoveAfterNextA_B(), 1, 1));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterRemoveAfterNextA_B(), 0, -1));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterRemoveAfterNextA_B(), 1, 0));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterNext0AddB", testListNextAdd(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterNext1AddB", testListNextAdd(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterNext2AddB", testListNextAdd(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterPrev1Index0AddB", testListPrevAdd(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterPrev0Index0AddB", testListPrevAdd(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterPrev0Index1AddB", testListPrevAdd(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterPrev1Index1AddB", testListPrevAdd(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterPrev0Index2AddB", testListPrevAdd(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterNext0SetB", testListNextSet(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterNext1SetB", testListNextSet(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterNext2SetB", testListNextSet(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterPrev0SetB", testListPrevSet(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_listIterRemoveAfterNextA_B_testListIterPrev1SetB", testListPrevSet(AB_listIterRemoveAfterNextA_B(), ELEMENT_B, 1, 1, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterRemoveAfterNextA_B");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> lit.next()->lit.remove() -> [B,C]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B,C] -> iteratorRemoveAfterNextA -> [B,C] 
	 * @return [B,C] after iteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> ABC_listIterRemoveAfterNextA_BC(){
		IndexedUnsortedList<Integer> list = AB_addToRearC_ABC(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B,C] -> lit.next()->lit.remove() -> [B,C] */
	private void test_ABC_listIterRemoveAfterNextA_BC() {
		System.out.println("\nSCENARIO: [A,B,C] -> iterRemoveAfterNextA -> [B,C]\n");
		try {
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddToFrontA", testAddToFront(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddToRearA", testAddToRear(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddAfterAA", testAddAfter(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_A, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddAfterBA", testAddAfter(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddAfterCA", testAddAfter(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddAtIndexNeg1A", testAddAtIndex(ABC_listIterRemoveAfterNextA_BC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddAtIndex0A", testAddAtIndex(ABC_listIterRemoveAfterNextA_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddAtIndex1A", testAddAtIndex(ABC_listIterRemoveAfterNextA_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddAtIndex2A", testAddAtIndex(ABC_listIterRemoveAfterNextA_BC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddAtIndex3A", testAddAtIndex(ABC_listIterRemoveAfterNextA_BC(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testAddA", testAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testRemoveFirst", testRemoveFirst(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testRemoveLast", testRemoveLast(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testRemoveA", testRemoveElement(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextA_BC_testRemoveB", testRemoveElement(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testRemoveC", testRemoveElement(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testRemoveNeg1", testRemoveIndex(ABC_listIterRemoveAfterNextA_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testRemove0", testRemoveIndex(ABC_listIterRemoveAfterNextA_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testRemove1", testRemoveIndex(ABC_listIterRemoveAfterNextA_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testRemove2", testRemoveIndex(ABC_listIterRemoveAfterNextA_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testFirst", testFirst(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testLast", testLast(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testContainsA", testContains(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_A, Result.False));
			printTest("ABC_listIterRemoveAfterNextA_BC_testContainsB", testContains(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_B, Result.True));
			printTest("ABC_listIterRemoveAfterNextA_BC_testContainsC", testContains(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, Result.True));
			printTest("ABC_listIterRemoveAfterNextA_BC_testIsEmpty", testIsEmpty(ABC_listIterRemoveAfterNextA_BC(), Result.False));
			printTest("ABC_listIterRemoveAfterNextA_BC_testSize", testSize(ABC_listIterRemoveAfterNextA_BC(), 2));
			printTest("ABC_listIterRemoveAfterNextA_BC_testToString", testToString(ABC_listIterRemoveAfterNextA_BC(), Result.ValidString));
			printTest("ABC_listIterRemoveAfterNextA_BC_testSetNeg1A", testSet(ABC_listIterRemoveAfterNextA_BC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testSet0A", testSet(ABC_listIterRemoveAfterNextA_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testSet1A", testSet(ABC_listIterRemoveAfterNextA_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testSet2A", testSet(ABC_listIterRemoveAfterNextA_BC(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testGetNeg1", testGet(ABC_listIterRemoveAfterNextA_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testGet0", testGet(ABC_listIterRemoveAfterNextA_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testGet1", testGet(ABC_listIterRemoveAfterNextA_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testGet2", testGet(ABC_listIterRemoveAfterNextA_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testIndexOfA", testIndexOf(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_A, -1));
			printTest("ABC_listIterRemoveAfterNextA_BC_testIndexOfB", testIndexOf(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_B, 0));
			printTest("ABC_listIterRemoveAfterNextA_BC_testIndexOfC", testIndexOf(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_listIterRemoveAfterNextA_BC_testIter", testIter(ABC_listIterRemoveAfterNextA_BC(), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testIterHasNext", testIterHasNext(ABC_listIterRemoveAfterNextA_BC().iterator(), Result.True));
			printTest("ABC_listIterRemoveAfterNextA_BC_testIterNext", testIterNext(ABC_listIterRemoveAfterNextA_BC().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testIterRemove", testIterRemove(ABC_listIterRemoveAfterNextA_BC().iterator(), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 1), Result.True));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 1), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 1)), Result.True));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 1)), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 2), Result.False));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 2), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 2), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 2)), Result.False));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextA_BC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextA_BC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIter", testListIter(ABC_listIterRemoveAfterNextA_BC(), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIter", testListIter(ABC_listIterRemoveAfterNextA_BC(), 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterHas0Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextA_BC(), 0, Result.False));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterHas1Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextA_BC(), 1, Result.True));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterHas2Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextA_BC(), 2, Result.True));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIter1Prev1", testListIterPrev(ABC_listIterRemoveAfterNextA_BC(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIter2Prev2", testListIterPrev(ABC_listIterRemoveAfterNextA_BC(), 2, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIter2Prev1", testListIterPrev(ABC_listIterRemoveAfterNextA_BC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterAddNeg1C", testListIterAdd(ABC_listIterRemoveAfterNextA_BC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterAdd0C", testListIterAdd(ABC_listIterRemoveAfterNextA_BC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterAdd1C", testListIterAdd(ABC_listIterRemoveAfterNextA_BC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterAdd2C", testListIterAdd(ABC_listIterRemoveAfterNextA_BC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterAdd3C", testListIterAdd(ABC_listIterRemoveAfterNextA_BC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNextIndex0", testListIterNextIndex(ABC_listIterRemoveAfterNextA_BC(), 0, 0));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNextIndex1", testListIterNextIndex(ABC_listIterRemoveAfterNextA_BC(), 1, 1));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNextIndex2", testListIterNextIndex(ABC_listIterRemoveAfterNextA_BC(), 2, 2));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterRemoveAfterNextA_BC(), 0, -1));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterRemoveAfterNextA_BC(), 1, 0));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterRemoveAfterNextA_BC(), 2, 1));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNext0AddC", testListNextAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNext1AddC", testListNextAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNext2AddC", testListNextAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNext3AddC", testListNextAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNext0SetC", testListNextSet(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNext1SetC", testListNextSet(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNext2SetC", testListNextSet(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterNext3SetC", testListNextSet(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev0SetC", testListPrevSet(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev1SetC", testListPrevSet(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextA_BC_testListIterPrev2SetC", testListPrevSet(ABC_listIterRemoveAfterNextA_BC(), ELEMENT_C, 2, 2, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterRemoveAfterNextA_BC");
			e.printStackTrace();
		}
	}
	
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,C] -> lit.next()->lit.next()->lit.remove() -> [A,C]
	////////////////////////////////////////////////
	
	
	/** Scenario: [A,B,C] -> listIteratorRemoveAfterNextA -> [A,C] 
	 * @return [A,C] after listIteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> ABC_listIterRemoveAfterNextB_AC(){
		IndexedUnsortedList<Integer> list = AB_addToRearC_ABC(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.next();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A,C] -> it.next()->it.remove() -> [A,C] */
	private void test_ABC_listIterRemoveAfterNextB_AC() {
		System.out.println("\nSCENARIO: [A,B,C] -> listIterRemoveAfterNextB -> [A,C]\n");
		try {
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddToFrontB", testAddToFront(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddToRearB", testAddToRear(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddAfterAB", testAddAfter(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddAfterBB", testAddAfter(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddAfterCB", testAddAfter(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddAtIndexNeg1B", testAddAtIndex(ABC_listIterRemoveAfterNextB_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddAtIndex0B", testAddAtIndex(ABC_listIterRemoveAfterNextB_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddAtIndex1B", testAddAtIndex(ABC_listIterRemoveAfterNextB_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddAtIndex2B", testAddAtIndex(ABC_listIterRemoveAfterNextB_AC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddAtIndex3B", testAddAtIndex(ABC_listIterRemoveAfterNextB_AC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testAddB", testAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testRemoveFirst", testRemoveFirst(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testRemoveLast", testRemoveLast(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testRemoveA", testRemoveElement(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testRemoveB", testRemoveElement(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextB_AC_testRemoveC", testRemoveElement(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testRemoveNeg1", testRemoveIndex(ABC_listIterRemoveAfterNextB_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testRemove0", testRemoveIndex(ABC_listIterRemoveAfterNextB_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testRemove1", testRemoveIndex(ABC_listIterRemoveAfterNextB_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testRemove2", testRemoveIndex(ABC_listIterRemoveAfterNextB_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testFirst", testFirst(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testLast", testLast(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testContainsA", testContains(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_A, Result.True));
			printTest("ABC_listIterRemoveAfterNextB_AC_testContainsB", testContains(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_B, Result.False));
			printTest("ABC_listIterRemoveAfterNextB_AC_testContainsC", testContains(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, Result.True));
			printTest("ABC_listIterRemoveAfterNextB_AC_testIsEmpty", testIsEmpty(ABC_listIterRemoveAfterNextB_AC(), Result.False));
			printTest("ABC_listIterRemoveAfterNextB_AC_testSize", testSize(ABC_listIterRemoveAfterNextB_AC(), 2));
			printTest("ABC_listIterRemoveAfterNextB_AC_testToString", testToString(ABC_listIterRemoveAfterNextB_AC(), Result.ValidString));
			printTest("ABC_listIterRemoveAfterNextB_AC_testSetNeg1B", testSet(ABC_listIterRemoveAfterNextB_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testSet0B", testSet(ABC_listIterRemoveAfterNextB_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testSet1B", testSet(ABC_listIterRemoveAfterNextB_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testSet2B", testSet(ABC_listIterRemoveAfterNextB_AC(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testGetNeg1", testGet(ABC_listIterRemoveAfterNextB_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testGet0", testGet(ABC_listIterRemoveAfterNextB_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testGet1", testGet(ABC_listIterRemoveAfterNextB_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testGet2", testGet(ABC_listIterRemoveAfterNextB_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testIndexOfA", testIndexOf(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_A, 0));
			printTest("ABC_listIterRemoveAfterNextB_AC_testIndexOfB", testIndexOf(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_B, -1));
			printTest("ABC_listIterRemoveAfterNextB_AC_testIndexOfC", testIndexOf(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_listIterRemoveAfterNextB_AC_testIter", testIter(ABC_listIterRemoveAfterNextB_AC(), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testIterHasNext", testIterHasNext(ABC_listIterRemoveAfterNextB_AC().iterator(), Result.True));
			printTest("ABC_listIterRemoveAfterNextB_AC_testIterNext", testIterNext(ABC_listIterRemoveAfterNextB_AC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testIterRemove", testIterRemove(ABC_listIterRemoveAfterNextB_AC().iterator(), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 1), Result.True));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 1), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 1)), Result.True));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 1)), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 2), Result.False));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 2), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 2), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 2)), Result.False));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextB_AC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextB_AC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIter", testListIter(ABC_listIterRemoveAfterNextB_AC(), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIter", testListIter(ABC_listIterRemoveAfterNextB_AC(), 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterHas0Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextB_AC(), 0, Result.False));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterHas1Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextB_AC(), 1, Result.True));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterHas2Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextB_AC(), 2, Result.True));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIter1Prev1", testListIterPrev(ABC_listIterRemoveAfterNextB_AC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIter2Prev2", testListIterPrev(ABC_listIterRemoveAfterNextB_AC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIter2Prev1", testListIterPrev(ABC_listIterRemoveAfterNextB_AC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterAddNeg1C", testListIterAdd(ABC_listIterRemoveAfterNextB_AC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterAdd0C", testListIterAdd(ABC_listIterRemoveAfterNextB_AC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterAdd1C", testListIterAdd(ABC_listIterRemoveAfterNextB_AC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterAdd2C", testListIterAdd(ABC_listIterRemoveAfterNextB_AC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterAdd3C", testListIterAdd(ABC_listIterRemoveAfterNextB_AC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNextIndex0", testListIterNextIndex(ABC_listIterRemoveAfterNextB_AC(), 0, 0));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNextIndex1", testListIterNextIndex(ABC_listIterRemoveAfterNextB_AC(), 1, 1));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNextIndex2", testListIterNextIndex(ABC_listIterRemoveAfterNextB_AC(), 2, 2));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterRemoveAfterNextB_AC(), 0, -1));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterRemoveAfterNextB_AC(), 1, 0));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterRemoveAfterNextB_AC(), 2, 1));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNext0AddC", testListNextAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNext1AddC", testListNextAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNext2AddC", testListNextAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNext3AddC", testListNextAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNext0SetC", testListNextSet(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNext1SetC", testListNextSet(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNext2SetC", testListNextSet(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterNext3SetC", testListNextSet(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev0SetC", testListPrevSet(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev1SetC", testListPrevSet(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextB_AC_testListIterPrev2SetC", testListPrevSet(ABC_listIterRemoveAfterNextB_AC(), ELEMENT_C, 2, 2, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterRemoveAfterNextB_AC");
			e.printStackTrace();
		}
	}


	
	////////////////////////////////////////////////
	// XXX SCENARIO:  [A,B,C] -> lit.next()->lit.next()->lit.next()->lit.remove() ->[A,B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B,C] -> iteratorRemoveAfterNextA -> [A,B] 
	 * @return [A,B] after iteratorRemoveAfterNextA
	 */
	private IndexedUnsortedList<Integer> ABC_listIterRemoveAfterNextC_AB(){
		IndexedUnsortedList<Integer> list = AB_addToRearC_ABC(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.next();
		lit.next();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B,C] -> it.next()-> it.next()-> it.next()->it.remove() -> [A,B] */
	private void test_ABC_listIterRemoveAfterNextC_AB() {
		System.out.println("\nSCENARIO: [A,B,C] -> listIterRemoveAfterNextC -> [A,B]\n");
		try {
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddToFrontC", testAddToFront(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddToRearC", testAddToRear(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddAfterAC", testAddAfter(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddAfterBC", testAddAfter(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddAfterDC", testAddAfter(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddAtIndexNeg1C", testAddAtIndex(ABC_listIterRemoveAfterNextC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddAtIndex0C", testAddAtIndex(ABC_listIterRemoveAfterNextC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddAtIndex1C", testAddAtIndex(ABC_listIterRemoveAfterNextC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddAtIndex2C", testAddAtIndex(ABC_listIterRemoveAfterNextC_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddAtIndex3C", testAddAtIndex(ABC_listIterRemoveAfterNextC_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testAddC", testAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testRemoveFirst", testRemoveFirst(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testRemoveLast", testRemoveLast(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testRemoveA", testRemoveElement(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testRemoveB", testRemoveElement(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testRemoveC", testRemoveElement(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_testRemoveNeg1", testRemoveIndex(ABC_listIterRemoveAfterNextC_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testRemove0", testRemoveIndex(ABC_listIterRemoveAfterNextC_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testRemove1", testRemoveIndex(ABC_listIterRemoveAfterNextC_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testRemove2", testRemoveIndex(ABC_listIterRemoveAfterNextC_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testFirst", testFirst(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testLast", testLast(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testContainsA", testContains(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_A, Result.True));
			printTest("ABC_listIterRemoveAfterNextC_AB_testContainsB", testContains(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_B, Result.True));
			printTest("ABC_listIterRemoveAfterNextC_AB_testContainsC", testContains(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, Result.False));
			printTest("ABC_listIterRemoveAfterNextC_AB_testIsEmpty", testIsEmpty(ABC_listIterRemoveAfterNextC_AB(), Result.False));
			printTest("ABC_listIterRemoveAfterNextC_AB_testSize", testSize(ABC_listIterRemoveAfterNextC_AB(), 2));
			printTest("ABC_listIterRemoveAfterNextC_AB_testToString", testToString(ABC_listIterRemoveAfterNextC_AB(), Result.ValidString));
			printTest("ABC_listIterRemoveAfterNextC_AB_testSetNeg1C", testSet(ABC_listIterRemoveAfterNextC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testSet0C", testSet(ABC_listIterRemoveAfterNextC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testSet1C", testSet(ABC_listIterRemoveAfterNextC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testSet2C", testSet(ABC_listIterRemoveAfterNextC_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testGetNeg1", testGet(ABC_listIterRemoveAfterNextC_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testGet0", testGet(ABC_listIterRemoveAfterNextC_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testGet1", testGet(ABC_listIterRemoveAfterNextC_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testGet2", testGet(ABC_listIterRemoveAfterNextC_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testIndexOfA", testIndexOf(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_A, 0));
			printTest("ABC_listIterRemoveAfterNextC_AB_testIndexOfB", testIndexOf(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_B, 1));
			printTest("ABC_listIterRemoveAfterNextC_AB_testIndexOfC", testIndexOf(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("ABC_listIterRemoveAfterNextC_AB_testIter", testIter(ABC_listIterRemoveAfterNextC_AB(), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testIterHasNext", testIterHasNext(ABC_listIterRemoveAfterNextC_AB().iterator(), Result.True));
			printTest("ABC_listIterRemoveAfterNextC_AB_testIterNext", testIterNext(ABC_listIterRemoveAfterNextC_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testIterRemove", testIterRemove(ABC_listIterRemoveAfterNextC_AB().iterator(), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 1), Result.True));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 1), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 1)), Result.True));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 1)), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 2), Result.False));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 2), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 2), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 2)), Result.False));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 2)), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterNextC_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter", testListIter(ABC_listIterRemoveAfterNextC_AB(), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter", testListIter(ABC_listIterRemoveAfterNextC_AB(), 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterHas0Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextC_AB(), 0, Result.False));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterHas1Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextC_AB(), 1, Result.True));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterHas2Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextC_AB(), 2, Result.True));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter1Prev1", testListIterPrev(ABC_listIterRemoveAfterNextC_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter2Prev2", testListIterPrev(ABC_listIterRemoveAfterNextC_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter2Prev1", testListIterPrev(ABC_listIterRemoveAfterNextC_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterAddNeg1C", testListIterAdd(ABC_listIterRemoveAfterNextC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterAdd0C", testListIterAdd(ABC_listIterRemoveAfterNextC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterAdd1C", testListIterAdd(ABC_listIterRemoveAfterNextC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterAdd2C", testListIterAdd(ABC_listIterRemoveAfterNextC_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterAdd3C", testListIterAdd(ABC_listIterRemoveAfterNextC_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNextIndex0", testListIterNextIndex(ABC_listIterRemoveAfterNextC_AB(), 0, 0));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNextIndex1", testListIterNextIndex(ABC_listIterRemoveAfterNextC_AB(), 1, 1));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNextIndex2", testListIterNextIndex(ABC_listIterRemoveAfterNextC_AB(), 2, 2));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterRemoveAfterNextC_AB(), 0, -1));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterRemoveAfterNextC_AB(), 1, 0));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterRemoveAfterNextC_AB(), 2, 1));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext0AddC", testListNextAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext1AddC", testListNextAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext2AddC", testListNextAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext3AddC", testListNextAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev1Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev0Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev0Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev1Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev0Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev1Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev2Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev0Index3AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext0SetC", testListNextSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext1SetC", testListNextSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext2SetC", testListNextSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext3SetC", testListNextSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev0SetC", testListPrevSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev1SetC", testListPrevSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev2SetC", testListPrevSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 2, 2, Result.NoException));
			
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterRemoveAfterNextC_AB");
			e.printStackTrace();
		}
	}
	

	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> lit.prev()->lit.remove() -> []
	////////////////////////////////////////////////
	


	/** Scenario: [A] -> listIteratorRemoveAfterPrevtA -> [ ] 
	 * @return [ ] after listIteratorRemoveAfterPrevA
	 */
	private IndexedUnsortedList<Integer> A_listIterRemoveAfterPrevA_emptyList() {
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); 
		ListIterator<Integer> lit = list.listIterator(1);
		lit.previous();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A] -> lit.next()->lit.remove() -> [ ] */
	private void test_A_listIterRemoveAfterPrevA_emptyList() {
		System.out.println("\nSCENARIO: [A] -> listIterRemoveAfterNextA -> [ ]\n");
		try {
			printTest("A_listIterRemoveAfterPrevA_emptyList_testAddToFrontA", testAddToFront(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testAddToRearA", testAddToRear(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testAddAfterBA", testAddAfter(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_B, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testAddAtIndexNeg1", testAddAtIndex(A_listIterRemoveAfterPrevA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testAddAtIndex0", testAddAtIndex(A_listIterRemoveAfterPrevA_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testAddAtIndex1", testAddAtIndex(A_listIterRemoveAfterPrevA_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testAddA", testAdd(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, Result.NoException));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testRemoveFirst", testRemoveFirst(A_listIterRemoveAfterPrevA_emptyList(), null, Result.IllegalState));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testRemoveLast", testRemoveLast(A_listIterRemoveAfterPrevA_emptyList(), null, Result.IllegalState));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testRemoveA", testRemoveElement(A_listIterRemoveAfterPrevA_emptyList(), null, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testRemoveNeg1", testRemoveIndex(A_listIterRemoveAfterPrevA_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testRemove0", testRemoveIndex(A_listIterRemoveAfterPrevA_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testFirst", testFirst(A_listIterRemoveAfterPrevA_emptyList(), null, Result.IllegalState));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testLast", testLast(A_listIterRemoveAfterPrevA_emptyList(), null, Result.IllegalState));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testContainsA", testContains(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, Result.False));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testIsEmpty", testIsEmpty(A_listIterRemoveAfterPrevA_emptyList(), Result.True));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testSize", testSize(A_listIterRemoveAfterPrevA_emptyList(), 0));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testToString", testToString(A_listIterRemoveAfterPrevA_emptyList(), Result.ValidString));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testSetNeg1A", testSet(A_listIterRemoveAfterPrevA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testSet0A", testSet(A_listIterRemoveAfterPrevA_emptyList(), 0, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testGetNeg1", testGet(A_listIterRemoveAfterPrevA_emptyList(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testGet0", testGet(A_listIterRemoveAfterPrevA_emptyList(), 0, null, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testIndexOfA", testIndexOf(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, -1));
			// Iterator
			printTest("A_listIterRemoveAfterPrevA_emptyList_testIter", testIter(A_listIterRemoveAfterPrevA_emptyList(), Result.NoException));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testIterHasNext", testIterHasNext(A_listIterRemoveAfterPrevA_emptyList().iterator(), Result.False));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testIterNext", testIterNext(A_listIterRemoveAfterPrevA_emptyList().iterator(), null, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testIterRemove", testIterRemove(A_listIterRemoveAfterPrevA_emptyList().iterator(), Result.IllegalState));
			// listIterator
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIter", testListIter(A_listIterRemoveAfterPrevA_emptyList(), Result.NoException));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIter", testListIter(A_listIterRemoveAfterPrevA_emptyList(), 0, Result.NoException));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterHasPrev", testListIterHasPrev(A_listIterRemoveAfterPrevA_emptyList(), 0, Result.False));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterPrev", testListIterPrev(A_listIterRemoveAfterPrevA_emptyList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterAddNeg1A", testListIterAdd(A_listIterRemoveAfterPrevA_emptyList(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterAdd0A", testListIterAdd(A_listIterRemoveAfterPrevA_emptyList(), 0, ELEMENT_A, Result.NoException));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterAdd1A", testListIterAdd(A_listIterRemoveAfterPrevA_emptyList(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterNextIndex0", testListIterNextIndex(A_listIterRemoveAfterPrevA_emptyList(), 0, 0));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterPreviousIndex0", testListIterPrevIndex(A_listIterRemoveAfterPrevA_emptyList(), 0, -1));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterNext0AddA", testListNextAdd(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, 0, Result.NoException));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterNext1AddA", testListNextAdd(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, 1, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterPrev0Index0AddA", testListPrevAdd(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, 0, 0, Result.NoException));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterPrev0Index1AddA", testListPrevAdd(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, 0, 1, Result.IndexOutOfBounds));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterPrev1Index0AddA", testListPrevAdd(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, 1, 0, Result.NoSuchElement));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterNext0SetA", testListNextSet(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, 0, Result.IllegalState));
			printTest("A_listIterRemoveAfterPrevA_emptyList_testListIterPrev0SetA", testListPrevSet(A_listIterRemoveAfterPrevA_emptyList(), ELEMENT_A, 0, 0, Result.IllegalState));
	
			} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_listIterRemoveAfterPrevA_emptyList");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> lit.prev()->lit.remove() -> [A]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B] -> listIteratorRemoveAfterPrevA -> [A] 
	 * @return [A] after listIteratorRemoveAfterPrevtA
	 */
	private IndexedUnsortedList<Integer> AB_listIterRemoveAfterPrevB_A(){
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); 
		ListIterator<Integer> lit = list.listIterator(2);
		lit.previous();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B] -> it.previous()->it.remove() -> [A] */
	private void test_AB_listIterRemoveAfterPrevB_A() {
		System.out.println("\nSCENARIO: [A,B] -> iterRemoveAfterPrevA -> [A]\n");
		try {
			printTest("AB_listIterRemoveAfterPrevB_A_testRemoveFirst", testRemoveFirst(AB_listIterRemoveAfterPrevB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevB_A_testRemoveLast", testRemoveLast(AB_listIterRemoveAfterPrevB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevB_A_testRemoveA",	testRemoveElement(AB_listIterRemoveAfterPrevB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevB_A_testRemoveB",	testRemoveElement(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevB_A_testFirst", testFirst(AB_listIterRemoveAfterPrevB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevB_A_testLast", testLast(AB_listIterRemoveAfterPrevB_A(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevB_A_testContainsA", 	testContains(AB_listIterRemoveAfterPrevB_A(), ELEMENT_A, Result.True));
			printTest("AB_listIterRemoveAfterPrevB_A_testContainsB", 	testContains(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, Result.False));
			printTest("AB_listIterRemoveAfterPrevB_A_testIsEmpty",	testIsEmpty(AB_listIterRemoveAfterPrevB_A(), Result.False));
			printTest("AB_listIterRemoveAfterPrevB_A_testSize", testSize(AB_listIterRemoveAfterPrevB_A(), 1));
			printTest("AB_listIterRemoveAfterPrevB_A_testToString", testToString(AB_listIterRemoveAfterPrevB_A(), Result.ValidString));
			printTest("AB_listIterRemoveAfterPrevB_A_testAddToFrontB", testAddToFront(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testAddToRearB", testAddToRear(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testAddAfterAB", testAddAfter(AB_listIterRemoveAfterPrevB_A(), ELEMENT_A, ELEMENT_B, Result.NoException));			
			printTest("AB_listIterRemoveAfterPrevB_A_testAddAfterBC", testAddAfter(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, ELEMENT_C, Result.NoSuchElement));			
			printTest("AB_listIterRemoveAfterPrevB_A_testAddAtIndexNeg1", testAddAtIndex(AB_listIterRemoveAfterPrevB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevB_A_testAddAtIndex0", testAddAtIndex(AB_listIterRemoveAfterPrevB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testAddAtIndex1", testAddAtIndex(AB_listIterRemoveAfterPrevB_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testAddAtIndex2", testAddAtIndex(AB_listIterRemoveAfterPrevB_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevB_A_testSetNeg1B", testSet(AB_listIterRemoveAfterPrevB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevB_A_testSet0B", testSet(AB_listIterRemoveAfterPrevB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testSet1B", testSet(AB_listIterRemoveAfterPrevB_A(), 1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevB_A_testAddB", testAdd(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testGetNeg1", testGet(AB_listIterRemoveAfterPrevB_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevB_A_testGet0", testGet(AB_listIterRemoveAfterPrevB_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevB_A_testGet1", testGet(AB_listIterRemoveAfterPrevB_A(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevB_A_testIndexOfA", testIndexOf(AB_listIterRemoveAfterPrevB_A(), ELEMENT_A, 0));
			printTest("AB_listIterRemoveAfterPrevB_A_testIndexOfB", testIndexOf(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, -1));
			printTest("AB_listIterRemoveAfterPrevB_A_testRemoveNeg1", testRemoveIndex(AB_listIterRemoveAfterPrevB_A(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevB_A_testRemove0", testRemoveIndex(AB_listIterRemoveAfterPrevB_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevB_A_testRemove1", testRemoveIndex(AB_listIterRemoveAfterPrevB_A(), 1, null, Result.IndexOutOfBounds));
			// Iterator
			printTest("AB_listIterRemoveAfterPrevB_A_testIter", testIter(AB_listIterRemoveAfterPrevB_A(), Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testIterHasNext", testIterHasNext(AB_listIterRemoveAfterPrevB_A().iterator(), Result.True));
			printTest("AB_listIterRemoveAfterPrevB_A_testIterNext", testIterNext(AB_listIterRemoveAfterPrevB_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevB_A_testIterRemove", testIterRemove(AB_listIterRemoveAfterPrevB_A().iterator(), Result.IllegalState));
			printTest("AB_listIterRemoveAfterPrevB_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterRemoveAfterPrevB_A(), 1), Result.False));
			printTest("AB_listIterRemoveAfterPrevB_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_listIterRemoveAfterPrevB_A(), 1), null, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevB_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterRemoveAfterPrevB_A(), 1), Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterPrevB_A(), 1)), Result.False));
			printTest("AB_listIterRemoveAfterPrevB_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterPrevB_A(), 1)), null, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevB_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterPrevB_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_listIterRemoveAfterPrevB_A_testListIter", testListIter(AB_listIterRemoveAfterPrevB_A(), Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIter", testListIter(AB_listIterRemoveAfterPrevB_A(), 0, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterHasPrev", testListIterHasPrev(AB_listIterRemoveAfterPrevB_A(), 0, Result.False));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterHasPrev", testListIterHasPrev(AB_listIterRemoveAfterPrevB_A(), 1, Result.True));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIter1Prev1", testListIterPrev(AB_listIterRemoveAfterPrevB_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterAddNeg1B", testListIterAdd(AB_listIterRemoveAfterPrevB_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterAdd0B", testListIterAdd(AB_listIterRemoveAfterPrevB_A(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterAdd1B", testListIterAdd(AB_listIterRemoveAfterPrevB_A(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterAdd2B", testListIterAdd(AB_listIterRemoveAfterPrevB_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterNextIndex0", testListIterNextIndex(AB_listIterRemoveAfterPrevB_A(), 0, 0));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterNextIndex1", testListIterNextIndex(AB_listIterRemoveAfterPrevB_A(), 1, 1));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterRemoveAfterPrevB_A(), 0, -1));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterRemoveAfterPrevB_A(), 1, 0));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterNext0AddB", testListNextAdd(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterNext1AddB", testListNextAdd(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterNext2AddB", testListNextAdd(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterPrev1Index0AddB", testListPrevAdd(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterPrev0Index0AddB", testListPrevAdd(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterPrev0Index1AddB", testListPrevAdd(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterPrev1Index1AddB", testListPrevAdd(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterPrev0Index2AddB", testListPrevAdd(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterNext0SetB", testListNextSet(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterNext1SetB", testListNextSet(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterNext2SetB", testListNextSet(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterPrev0SetB", testListPrevSet(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_listIterRemoveAfterPrevB_A_testListIterPrev1SetB", testListPrevSet(AB_listIterRemoveAfterPrevB_A(), ELEMENT_B, 1, 1, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterRemoveAfterPrevB_A");
			e.printStackTrace();
		}
	}


	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> lit.prev()->lit.prev()->lit.remove() -> [B]
	////////////////////////////////////////////////
	

	
	/** Scenario: [A,B] -> iteratorRemoveAfterPrevA -> [B] 
	 * @return [B] after iteratorRemoveAfterPrevA
	 */
	private IndexedUnsortedList<Integer> AB_listIterRemoveAfterPrevA_B(){
		IndexedUnsortedList<Integer> list = A_addToRearB_AB(); 
		ListIterator<Integer> lit = list.listIterator(2);
		lit.previous();
		lit.previous();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B] -> lit.prev()->l it.prev()->lit.remove() -> [B] */
	private void test_AB_listIterRemoveAfterPrevA_B() {
		System.out.println("\nSCENARIO: [A,B] -> iterRemoveAfterNextA -> [B]\n");
		try {
			printTest("AB_listIterRemoveAfterPrevA_B_testRemoveFirst", testRemoveFirst(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevA_B_testRemoveLast", testRemoveLast(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevA_B_testRemoveA",	testRemoveElement(AB_listIterRemoveAfterPrevA_B(), ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevA_B_testRemoveB",	testRemoveElement(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevA_B_testFirst", testFirst(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevA_B_testLast", testLast(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevA_B_testContainsA", 	testContains(AB_listIterRemoveAfterPrevA_B(), ELEMENT_A, Result.False));
			printTest("AB_listIterRemoveAfterPrevA_B_testContainsB", 	testContains(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, Result.True));
			printTest("AB_listIterRemoveAfterPrevA_B_testIsEmpty",	testIsEmpty(AB_listIterRemoveAfterPrevA_B(), Result.False));
			printTest("AB_listIterRemoveAfterPrevA_B_testSize", testSize(AB_listIterRemoveAfterPrevA_B(), 1));
			printTest("AB_listIterRemoveAfterPrevA_B_testToString", testToString(AB_listIterRemoveAfterPrevA_B(), Result.ValidString));
			printTest("AB_listIterRemoveAfterPrevA_B_testAddToFrontA", testAddToFront(AB_listIterRemoveAfterPrevA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testAddToRearA", testAddToRear(AB_listIterRemoveAfterPrevA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testAddAfterAB", testAddAfter(AB_listIterRemoveAfterPrevA_B(), ELEMENT_A, ELEMENT_B, Result.NoSuchElement));			
			printTest("AB_listIterRemoveAfterPrevA_B_testAddAfterBC", testAddAfter(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, ELEMENT_C, Result.NoException));			
			printTest("AB_listIterRemoveAfterPrevA_B_testAddAtIndexNeg1", testAddAtIndex(AB_listIterRemoveAfterPrevA_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevA_B_testAddAtIndex0", testAddAtIndex(AB_listIterRemoveAfterPrevA_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testAddAtIndex1", testAddAtIndex(AB_listIterRemoveAfterPrevA_B(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testAddAtIndex2", testAddAtIndex(AB_listIterRemoveAfterPrevA_B(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevA_B_testSetNeg1A", testSet(AB_listIterRemoveAfterPrevA_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevA_B_testSet0A", testSet(AB_listIterRemoveAfterPrevA_B(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testSet1A", testSet(AB_listIterRemoveAfterPrevA_B(), 1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevA_B_testAddA", testAdd(AB_listIterRemoveAfterPrevA_B(), ELEMENT_A, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testGetNeg1", testGet(AB_listIterRemoveAfterPrevA_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevA_B_testGet0", testGet(AB_listIterRemoveAfterPrevA_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevA_B_testGet1", testGet(AB_listIterRemoveAfterPrevA_B(), 1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevA_B_testIndexOfA", testIndexOf(AB_listIterRemoveAfterPrevA_B(), ELEMENT_A, -1));
			printTest("AB_listIterRemoveAfterPrevA_B_testIndexOfB", testIndexOf(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 0));
			printTest("AB_listIterRemoveAfterPrevA_B_testRemoveNeg1", testRemoveIndex(AB_listIterRemoveAfterPrevA_B(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevA_B_testRemove0", testRemoveIndex(AB_listIterRemoveAfterPrevA_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevA_B_testRemove1", testRemoveIndex(AB_listIterRemoveAfterPrevA_B(), 1, null, Result.IndexOutOfBounds));
			// Iterator
			printTest("AB_listIterRemoveAfterPrevA_B_testIter", testIter(AB_listIterRemoveAfterPrevA_B(), Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testIterHasNext", testIterHasNext(AB_listIterRemoveAfterPrevA_B().iterator(), Result.True));
			printTest("AB_listIterRemoveAfterPrevA_B_testIterNext", testIterNext(AB_listIterRemoveAfterPrevA_B().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevA_B_testIterRemove", testIterRemove(AB_listIterRemoveAfterPrevA_B().iterator(), Result.IllegalState));
			printTest("AB_listIterRemoveAfterPrevA_B_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterRemoveAfterPrevA_B(), 1), Result.False));
			printTest("AB_listIterRemoveAfterPrevA_B_iteratorNext_testIterNext", testIterNext(iterAfterNext(AB_listIterRemoveAfterPrevA_B(), 1), null, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevA_B_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterRemoveAfterPrevA_B(), 1), Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterPrevA_B(), 1)), Result.False));
			printTest("AB_listIterRemoveAfterPrevA_B_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterPrevA_B(), 1)), null, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevA_B_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterRemoveAfterPrevA_B(), 1)), Result.IllegalState));
			// ListIterator
			printTest("AB_listIterRemoveAfterPrevA_B_testListIter", testListIter(AB_listIterRemoveAfterPrevA_B(), Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIter", testListIter(AB_listIterRemoveAfterPrevA_B(), 0, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterHasPrev", testListIterHasPrev(AB_listIterRemoveAfterPrevA_B(), 0, Result.False));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterHasPrev", testListIterHasPrev(AB_listIterRemoveAfterPrevA_B(), 1, Result.True));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIter1Prev1", testListIterPrev(AB_listIterRemoveAfterPrevA_B(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterAddNeg1B", testListIterAdd(AB_listIterRemoveAfterPrevA_B(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterAdd0B", testListIterAdd(AB_listIterRemoveAfterPrevA_B(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterAdd1B", testListIterAdd(AB_listIterRemoveAfterPrevA_B(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterAdd2B", testListIterAdd(AB_listIterRemoveAfterPrevA_B(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterNextIndex0", testListIterNextIndex(AB_listIterRemoveAfterPrevA_B(), 0, 0));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterNextIndex1", testListIterNextIndex(AB_listIterRemoveAfterPrevA_B(), 1, 1));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterRemoveAfterPrevA_B(), 0, -1));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterRemoveAfterPrevA_B(), 1, 0));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterNext0AddB", testListNextAdd(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 0, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterNext1AddB", testListNextAdd(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterNext2AddB", testListNextAdd(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterPrev1Index0AddB", testListPrevAdd(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterPrev0Index0AddB", testListPrevAdd(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterPrev0Index1AddB", testListPrevAdd(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterPrev1Index1AddB", testListPrevAdd(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterPrev0Index2AddB", testListPrevAdd(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterNext0SetB", testListNextSet(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 0, Result.IllegalState));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterNext1SetB", testListNextSet(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 1, Result.NoException));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterNext2SetB", testListNextSet(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterPrev0SetB", testListPrevSet(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("AB_listIterRemoveAfterPrevA_B_testListIterPrev1SetB", testListPrevSet(AB_listIterRemoveAfterPrevA_B(), ELEMENT_B, 1, 1, Result.NoException));
			
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterRemoveAfterPrevA_B");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> lit.prev()->lit.prev()->lit.prev()->lit.remove() -> [B,C]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B,C] -> iteratorRemoveAfterPrevA -> [B,C] 
	 * @return [B,C] after iteratorRemoveAfterPrevA
	 */
	private IndexedUnsortedList<Integer> ABC_listIterRemoveAfterPrevA_BC(){
		IndexedUnsortedList<Integer> list = AB_addToRearC_ABC(); 
		ListIterator<Integer> lit = list.listIterator(3);
		lit.previous();
		lit.previous();
		lit.previous();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B,C] -> lit.prev()->lit.prev()->lit.prev()->lit.remove() -> [B,C] */
	private void test_ABC_listIterRemoveAfterPrevA_BC() {
		System.out.println("\nSCENARIO: [A,B,C] -> iterRemoveAfterNextA -> [B,C]\n");
		try {
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddToFrontA", testAddToFront(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddToRearA", testAddToRear(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddAfterAA", testAddAfter(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_A, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddAfterBA", testAddAfter(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddAfterCA", testAddAfter(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddAtIndexNeg1A", testAddAtIndex(ABC_listIterRemoveAfterPrevA_BC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddAtIndex0A", testAddAtIndex(ABC_listIterRemoveAfterPrevA_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddAtIndex1A", testAddAtIndex(ABC_listIterRemoveAfterPrevA_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddAtIndex2A", testAddAtIndex(ABC_listIterRemoveAfterPrevA_BC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddAtIndex3A", testAddAtIndex(ABC_listIterRemoveAfterPrevA_BC(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testAddA", testAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testRemoveFirst", testRemoveFirst(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testRemoveLast", testRemoveLast(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testRemoveA", testRemoveElement(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testRemoveB", testRemoveElement(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testRemoveC", testRemoveElement(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testRemoveNeg1", testRemoveIndex(ABC_listIterRemoveAfterPrevA_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testRemove0", testRemoveIndex(ABC_listIterRemoveAfterPrevA_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testRemove1", testRemoveIndex(ABC_listIterRemoveAfterPrevA_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testRemove2", testRemoveIndex(ABC_listIterRemoveAfterPrevA_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testFirst", testFirst(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testLast", testLast(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testContainsA", testContains(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_A, Result.False));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testContainsB", testContains(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_B, Result.True));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testContainsC", testContains(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, Result.True));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testIsEmpty", testIsEmpty(ABC_listIterRemoveAfterPrevA_BC(), Result.False));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testSize", testSize(ABC_listIterRemoveAfterPrevA_BC(), 2));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testToString", testToString(ABC_listIterRemoveAfterPrevA_BC(), Result.ValidString));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testSetNeg1A", testSet(ABC_listIterRemoveAfterPrevA_BC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testSet0A", testSet(ABC_listIterRemoveAfterPrevA_BC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testSet1A", testSet(ABC_listIterRemoveAfterPrevA_BC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testSet2A", testSet(ABC_listIterRemoveAfterPrevA_BC(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testGetNeg1", testGet(ABC_listIterRemoveAfterPrevA_BC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testGet0", testGet(ABC_listIterRemoveAfterPrevA_BC(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testGet1", testGet(ABC_listIterRemoveAfterPrevA_BC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testGet2", testGet(ABC_listIterRemoveAfterPrevA_BC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testIndexOfA", testIndexOf(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_A, -1));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testIndexOfB", testIndexOf(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_B, 0));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testIndexOfC", testIndexOf(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_listIterRemoveAfterPrevA_BC_testIter", testIter(ABC_listIterRemoveAfterPrevA_BC(), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testIterHasNext", testIterHasNext(ABC_listIterRemoveAfterPrevA_BC().iterator(), Result.True));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testIterNext", testIterNext(ABC_listIterRemoveAfterPrevA_BC().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testIterRemove", testIterRemove(ABC_listIterRemoveAfterPrevA_BC().iterator(), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 1), Result.True));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 1), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 1)), Result.True));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 1)), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 2), Result.False));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 2), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 2), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 2)), Result.False));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevA_BC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevA_BC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIter", testListIter(ABC_listIterRemoveAfterPrevA_BC(), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIter", testListIter(ABC_listIterRemoveAfterPrevA_BC(), 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterHas0Prev", testListIterHasPrev(ABC_listIterRemoveAfterPrevA_BC(), 0, Result.False));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterHas1Prev", testListIterHasPrev(ABC_listIterRemoveAfterPrevA_BC(), 1, Result.True));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterHas2Prev", testListIterHasPrev(ABC_listIterRemoveAfterPrevA_BC(), 2, Result.True));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIter1Prev1", testListIterPrev(ABC_listIterRemoveAfterPrevA_BC(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIter2Prev2", testListIterPrev(ABC_listIterRemoveAfterPrevA_BC(), 2, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIter2Prev1", testListIterPrev(ABC_listIterRemoveAfterPrevA_BC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterAddNeg1C", testListIterAdd(ABC_listIterRemoveAfterPrevA_BC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterAdd0C", testListIterAdd(ABC_listIterRemoveAfterPrevA_BC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterAdd1C", testListIterAdd(ABC_listIterRemoveAfterPrevA_BC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterAdd2C", testListIterAdd(ABC_listIterRemoveAfterPrevA_BC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterAdd3C", testListIterAdd(ABC_listIterRemoveAfterPrevA_BC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNextIndex0", testListIterNextIndex(ABC_listIterRemoveAfterPrevA_BC(), 0, 0));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNextIndex1", testListIterNextIndex(ABC_listIterRemoveAfterPrevA_BC(), 1, 1));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNextIndex2", testListIterNextIndex(ABC_listIterRemoveAfterPrevA_BC(), 2, 2));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterRemoveAfterPrevA_BC(), 0, -1));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterRemoveAfterPrevA_BC(), 1, 0));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterRemoveAfterPrevA_BC(), 2, 1));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNext0AddC", testListNextAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNext1AddC", testListNextAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNext2AddC", testListNextAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNext3AddC", testListNextAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNext0SetC", testListNextSet(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNext1SetC", testListNextSet(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNext2SetC", testListNextSet(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterNext3SetC", testListNextSet(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev0SetC", testListPrevSet(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev1SetC", testListPrevSet(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevA_BC_testListIterPrev2SetC", testListPrevSet(ABC_listIterRemoveAfterPrevA_BC(), ELEMENT_C, 2, 2, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterRemoveAfterPrevA_BC");
			e.printStackTrace();
		}
	}

	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,C] -> lit.prev()->lit.prev()->lit.remove() -> [A,C]
	////////////////////////////////////////////////
	
	
	/** Scenario: [A,B,C] -> listIteratorRemoveAfterPrevB -> [A,C] 
	 * @return [A,C] after listIteratorRemoveAfterPrev
	 */
	private IndexedUnsortedList<Integer> ABC_listIterRemoveAfterPrevB_AC(){
		IndexedUnsortedList<Integer> list = AB_addToRearC_ABC(); 
		ListIterator<Integer> lit = list.listIterator(3);
		lit.previous();
		lit.previous();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A,C] -> it.next()->it.remove() -> [A,C] */
	private void test_ABC_listIterRemoveAfterPrevB_AC() {
		System.out.println("\nSCENARIO: [A,B,C] -> listIterRemoveAfterNextB -> [B,C]\n");
		try {
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddToFrontB", testAddToFront(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddToRearB", testAddToRear(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddAfterAB", testAddAfter(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddAfterBB", testAddAfter(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddAfterCB", testAddAfter(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddAtIndexNeg1B", testAddAtIndex(ABC_listIterRemoveAfterPrevB_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddAtIndex0B", testAddAtIndex(ABC_listIterRemoveAfterPrevB_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddAtIndex1B", testAddAtIndex(ABC_listIterRemoveAfterPrevB_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddAtIndex2B", testAddAtIndex(ABC_listIterRemoveAfterPrevB_AC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddAtIndex3B", testAddAtIndex(ABC_listIterRemoveAfterPrevB_AC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testAddB", testAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testRemoveFirst", testRemoveFirst(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testRemoveLast", testRemoveLast(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testRemoveA", testRemoveElement(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testRemoveB", testRemoveElement(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testRemoveC", testRemoveElement(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testRemoveNeg1", testRemoveIndex(ABC_listIterRemoveAfterPrevB_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testRemove0", testRemoveIndex(ABC_listIterRemoveAfterPrevB_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testRemove1", testRemoveIndex(ABC_listIterRemoveAfterPrevB_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testRemove2", testRemoveIndex(ABC_listIterRemoveAfterPrevB_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testFirst", testFirst(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testLast", testLast(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testContainsA", testContains(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_A, Result.True));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testContainsB", testContains(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_B, Result.False));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testContainsC", testContains(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, Result.True));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testIsEmpty", testIsEmpty(ABC_listIterRemoveAfterPrevB_AC(), Result.False));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testSize", testSize(ABC_listIterRemoveAfterPrevB_AC(), 2));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testToString", testToString(ABC_listIterRemoveAfterPrevB_AC(), Result.ValidString));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testSetNeg1B", testSet(ABC_listIterRemoveAfterPrevB_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testSet0B", testSet(ABC_listIterRemoveAfterPrevB_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testSet1B", testSet(ABC_listIterRemoveAfterPrevB_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testSet2B", testSet(ABC_listIterRemoveAfterPrevB_AC(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testGetNeg1", testGet(ABC_listIterRemoveAfterPrevB_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testGet0", testGet(ABC_listIterRemoveAfterPrevB_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testGet1", testGet(ABC_listIterRemoveAfterPrevB_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testGet2", testGet(ABC_listIterRemoveAfterPrevB_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testIndexOfA", testIndexOf(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_A, 0));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testIndexOfB", testIndexOf(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_B, -1));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testIndexOfC", testIndexOf(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 1));
			// Iterator
			printTest("ABC_listIterRemoveAfterPrevB_AC_testIter", testIter(ABC_listIterRemoveAfterPrevB_AC(), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testIterHasNext", testIterHasNext(ABC_listIterRemoveAfterPrevB_AC().iterator(), Result.True));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testIterNext", testIterNext(ABC_listIterRemoveAfterPrevB_AC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testIterRemove", testIterRemove(ABC_listIterRemoveAfterPrevB_AC().iterator(), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 1), Result.True));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 1), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 1)), Result.True));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 1)), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 2), Result.False));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 2), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 2), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 2)), Result.False));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 2)), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevB_AC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevB_AC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIter", testListIter(ABC_listIterRemoveAfterPrevB_AC(), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIter", testListIter(ABC_listIterRemoveAfterPrevB_AC(), 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterHas0Prev", testListIterHasPrev(ABC_listIterRemoveAfterPrevB_AC(), 0, Result.False));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterHas1Prev", testListIterHasPrev(ABC_listIterRemoveAfterPrevB_AC(), 1, Result.True));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterHas2Prev", testListIterHasPrev(ABC_listIterRemoveAfterPrevB_AC(), 2, Result.True));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIter1Prev1", testListIterPrev(ABC_listIterRemoveAfterPrevB_AC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIter2Prev2", testListIterPrev(ABC_listIterRemoveAfterPrevB_AC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIter2Prev1", testListIterPrev(ABC_listIterRemoveAfterPrevB_AC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterAddNeg1C", testListIterAdd(ABC_listIterRemoveAfterPrevB_AC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterAdd0C", testListIterAdd(ABC_listIterRemoveAfterPrevB_AC(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterAdd1C", testListIterAdd(ABC_listIterRemoveAfterPrevB_AC(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterAdd2C", testListIterAdd(ABC_listIterRemoveAfterPrevB_AC(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterAdd3C", testListIterAdd(ABC_listIterRemoveAfterPrevB_AC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNextIndex0", testListIterNextIndex(ABC_listIterRemoveAfterPrevB_AC(), 0, 0));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNextIndex1", testListIterNextIndex(ABC_listIterRemoveAfterPrevB_AC(), 1, 1));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNextIndex2", testListIterNextIndex(ABC_listIterRemoveAfterPrevB_AC(), 2, 2));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterRemoveAfterPrevB_AC(), 0, -1));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterRemoveAfterPrevB_AC(), 1, 0));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterRemoveAfterPrevB_AC(), 2, 1));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNext0AddC", testListNextAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNext1AddC", testListNextAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNext2AddC", testListNextAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNext3AddC", testListNextAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev1Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev0Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev0Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev1Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev0Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev1Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev2Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev0Index3AddC", testListPrevAdd(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNext0SetC", testListNextSet(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNext1SetC", testListNextSet(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNext2SetC", testListNextSet(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterNext3SetC", testListNextSet(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev0SetC", testListPrevSet(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev1SetC", testListPrevSet(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevB_AC_testListIterPrev2SetC", testListPrevSet(ABC_listIterRemoveAfterPrevB_AC(), ELEMENT_C, 2, 2, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterRemoveAfterPrevB_AC");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO:  [A,B,C] -> lit.prev()->lit.remove() ->[A,B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B,C] -> iteratorRemoveAfterPrevC -> [A,B] 
	 * @return [A,B] after iteratorRemoveAfterPrevC
	 */
	private IndexedUnsortedList<Integer> ABC_listIterRemoveAfterPrevC_AB(){
		IndexedUnsortedList<Integer> list = AB_addToRearC_ABC(); 
		ListIterator<Integer> lit = list.listIterator(3);
		lit.previous();
		lit.remove();
		return list;
	}

	/** Run all tests on scenario: [A,B,C] -> it.prev()->it.remove() -> [A,C] */
	private void test_ABC_listIterRemoveAfterPrevC_AB() {
		System.out.println("\nSCENARIO: [A,B,C] -> listIterRemoveAfterNextC -> [A,B]\n");
		try {
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddToFrontC", testAddToFront(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddToRearC", testAddToRear(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddAfterAC", testAddAfter(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddAfterBC", testAddAfter(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddAfterDC", testAddAfter(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddAtIndexNeg1C", testAddAtIndex(ABC_listIterRemoveAfterPrevC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddAtIndex0C", testAddAtIndex(ABC_listIterRemoveAfterPrevC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddAtIndex1C", testAddAtIndex(ABC_listIterRemoveAfterPrevC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddAtIndex2C", testAddAtIndex(ABC_listIterRemoveAfterPrevC_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddAtIndex3C", testAddAtIndex(ABC_listIterRemoveAfterPrevC_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testAddC", testAdd(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testRemoveFirst", testRemoveFirst(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testRemoveLast", testRemoveLast(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testRemoveA", testRemoveElement(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testRemoveB", testRemoveElement(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testRemoveC", testRemoveElement(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testRemoveNeg1", testRemoveIndex(ABC_listIterRemoveAfterPrevC_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testRemove0", testRemoveIndex(ABC_listIterRemoveAfterPrevC_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testRemove1", testRemoveIndex(ABC_listIterRemoveAfterPrevC_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testRemove2", testRemoveIndex(ABC_listIterRemoveAfterPrevC_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testFirst", testFirst(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testLast", testLast(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testContainsA", testContains(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_A, Result.True));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testContainsB", testContains(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_B, Result.True));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testContainsC", testContains(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_C, Result.False));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testIsEmpty", testIsEmpty(ABC_listIterRemoveAfterPrevC_AB(), Result.False));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testSize", testSize(ABC_listIterRemoveAfterPrevC_AB(), 2));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testToString", testToString(ABC_listIterRemoveAfterPrevC_AB(), Result.ValidString));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testSetNeg1C", testSet(ABC_listIterRemoveAfterPrevC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testSet0C", testSet(ABC_listIterRemoveAfterPrevC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testSet1C", testSet(ABC_listIterRemoveAfterPrevC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testSet2C", testSet(ABC_listIterRemoveAfterPrevC_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testGetNeg1", testGet(ABC_listIterRemoveAfterPrevC_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testGet0", testGet(ABC_listIterRemoveAfterPrevC_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testGet1", testGet(ABC_listIterRemoveAfterPrevC_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testGet2", testGet(ABC_listIterRemoveAfterPrevC_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testIndexOfA", testIndexOf(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_A, 0));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testIndexOfB", testIndexOf(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_B, 1));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testIndexOfC", testIndexOf(ABC_listIterRemoveAfterPrevC_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("ABC_listIterRemoveAfterPrevC_AB_testIter", testIter(ABC_listIterRemoveAfterPrevC_AB(), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testIterHasNext", testIterHasNext(ABC_listIterRemoveAfterPrevC_AB().iterator(), Result.True));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testIterNext", testIterNext(ABC_listIterRemoveAfterPrevC_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_testIterRemove", testIterRemove(ABC_listIterRemoveAfterPrevC_AB().iterator(), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 1), Result.True));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 1), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 1)), Result.True));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 1)), Result.IllegalState));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 2), Result.False));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 2), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 2), Result.NoException));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 2)), Result.False));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 2)), null, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterPrevC_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterRemoveAfterPrevC_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter", testListIter(ABC_listIterRemoveAfterNextC_AB(), Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter", testListIter(ABC_listIterRemoveAfterNextC_AB(), 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterHas0Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextC_AB(), 0, Result.False));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterHas1Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextC_AB(), 1, Result.True));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterHas2Prev", testListIterHasPrev(ABC_listIterRemoveAfterNextC_AB(), 2, Result.True));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter1Prev1", testListIterPrev(ABC_listIterRemoveAfterNextC_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter2Prev2", testListIterPrev(ABC_listIterRemoveAfterNextC_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIter2Prev1", testListIterPrev(ABC_listIterRemoveAfterNextC_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterAddNeg1C", testListIterAdd(ABC_listIterRemoveAfterNextC_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterAdd0C", testListIterAdd(ABC_listIterRemoveAfterNextC_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterAdd1C", testListIterAdd(ABC_listIterRemoveAfterNextC_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterAdd2C", testListIterAdd(ABC_listIterRemoveAfterNextC_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterAdd3C", testListIterAdd(ABC_listIterRemoveAfterNextC_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNextIndex0", testListIterNextIndex(ABC_listIterRemoveAfterNextC_AB(), 0, 0));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNextIndex1", testListIterNextIndex(ABC_listIterRemoveAfterNextC_AB(), 1, 1));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNextIndex2", testListIterNextIndex(ABC_listIterRemoveAfterNextC_AB(), 2, 2));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterRemoveAfterNextC_AB(), 0, -1));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterRemoveAfterNextC_AB(), 1, 0));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterRemoveAfterNextC_AB(), 2, 1));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext0AddC", testListNextAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext1AddC", testListNextAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext2AddC", testListNextAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext3AddC", testListNextAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev1Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev0Index0AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev0Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev1Index1AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev0Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev1Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev2Index2AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev0Index3AddC", testListPrevAdd(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext0SetC", testListNextSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext1SetC", testListNextSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext2SetC", testListNextSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterNext3SetC", testListNextSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev0SetC", testListPrevSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev1SetC", testListPrevSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("ABC_listIterRemoveAfterNextC_AB_testListIterPrev2SetC", testListPrevSet(ABC_listIterRemoveAfterNextC_AB(), ELEMENT_C, 2, 2, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterRemoveAfterPrevC_AB");
			e.printStackTrace();
		}
	}
	
	

	////////////////////////////////////////////////
	// XXX SCENARIO: [] -> lit.add(A) -> [A]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [] -> listIterAddA -> [A] 
	 * @return [A] after listIterAddA
	 */
	private IndexedUnsortedList<Integer> emptyList_listIterAddA_A(){
		IndexedUnsortedList<Integer> list = newList(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.add(ELEMENT_A);
		
		return list;
	}

	/** Run all tests on scenario: [] -> lit.add(A) -> [A] */
	private void test_emptyList_listIterAddA_A() {
		System.out.println("\nSCENARIO: [] -> listIterAddA -> [A]\n");
		try {
			printTest("emptyList_listIterAddA_A_testRemoveFirst", testRemoveFirst(emptyList_listIterAddA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_listIterAddA_A_testRemoveLast", testRemoveLast(emptyList_listIterAddA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_listIterAddA_A_testRemoveA",	testRemoveElement(emptyList_listIterAddA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_listIterAddA_A_testRemoveB",	testRemoveElement(emptyList_listIterAddA_A(), ELEMENT_B, Result.NoSuchElement));
			printTest("emptyList_listIterAddA_A_testFirst", testFirst(emptyList_listIterAddA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_listIterAddA_A_testLast", testLast(emptyList_listIterAddA_A(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_listIterAddA_A_testContainsA", 	testContains(emptyList_listIterAddA_A(), ELEMENT_A, Result.True));
			printTest("emptyList_listIterAddA_A_testContainsB", 	testContains(emptyList_listIterAddA_A(), ELEMENT_B, Result.False));
			printTest("emptyList_listIterAddA_A_testIsEmpty",	testIsEmpty(emptyList_listIterAddA_A(), Result.False));
			printTest("emptyList_listIterAddA_A_testSize", testSize(emptyList_listIterAddA_A(), 1));
			printTest("emptyList_listIterAddA_A_testToString", testToString(emptyList_listIterAddA_A(), Result.ValidString));
			printTest("emptyList_listIterAddA_A_testAddToFrontB", testAddToFront(emptyList_listIterAddA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_listIterAddA_A_testAddToRearB", testAddToRear(emptyList_listIterAddA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_listIterAddA_A_testAddAfterAB", testAddAfter(emptyList_listIterAddA_A(), ELEMENT_A, ELEMENT_B, Result.NoException));			
			printTest("emptyList_listIterAddA_A_testAddAfterBC", testAddAfter(emptyList_listIterAddA_A(), ELEMENT_B, ELEMENT_C, Result.NoSuchElement));			
			printTest("emptyList_listIterAddA_A_testAddAtIndexNeg1", testAddAtIndex(emptyList_listIterAddA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_listIterAddA_A_testAddAtIndex0", testAddAtIndex(emptyList_listIterAddA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_listIterAddA_A_testAddAtIndex1", testAddAtIndex(emptyList_listIterAddA_A(), 1, ELEMENT_B, Result.NoException));
			printTest("emptyList_listIterAddA_A_testAddAtIndex2", testAddAtIndex(emptyList_listIterAddA_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_listIterAddA_A_testSetNeg1B", testSet(emptyList_listIterAddA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_listIterAddA_A_testSet0B", testSet(emptyList_listIterAddA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_listIterAddA_A_testSet1B", testSet(emptyList_listIterAddA_A(), 1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_listIterAddA_A_testAddB", testAdd(emptyList_listIterAddA_A(), ELEMENT_B, Result.NoException));
			printTest("emptyList_listIterAddA_A_testGetNeg1", testGet(emptyList_listIterAddA_A(), -1, null, Result.IndexOutOfBounds));
			printTest("emptyList_listIterAddA_A_testGet0", testGet(emptyList_listIterAddA_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_listIterAddA_A_testGet1", testGet(emptyList_listIterAddA_A(), 1, null, Result.IndexOutOfBounds));
			printTest("emptyList_listIterAddA_A_testIndexOfA", testIndexOf(emptyList_listIterAddA_A(), ELEMENT_A, 0));
			printTest("emptyList_listIterAddA_A_testIndexOfB", testIndexOf(emptyList_listIterAddA_A(), ELEMENT_B, -1));
			printTest("emptyList_listIterAddA_A_testRemoveNeg1", testRemoveIndex(emptyList_listIterAddA_A(), -1, null, Result.IndexOutOfBounds));
			printTest("emptyList_listIterAddA_A_testRemove0", testRemoveIndex(emptyList_listIterAddA_A(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_listIterAddA_A_testRemove1", testRemoveIndex(emptyList_listIterAddA_A(), 1, null, Result.IndexOutOfBounds));
			// Iterator
			printTest("emptyList_listIterAddA_A_testIter", testIter(emptyList_listIterAddA_A(), Result.NoException));
			printTest("emptyList_listIterAddA_A_testIterHasNext", testIterHasNext(emptyList_listIterAddA_A().iterator(), Result.True));
			printTest("emptyList_listIterAddA_A_testIterNext", testIterNext(emptyList_listIterAddA_A().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_listIterAddA_A_testIterRemove", testIterRemove(emptyList_listIterAddA_A().iterator(), Result.IllegalState));
			printTest("emptyList_listIterAddA_A_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(emptyList_listIterAddA_A(), 1), Result.False));
			printTest("emptyList_listIterAddA_A_iteratorNext_testIterNext", testIterNext(iterAfterNext(emptyList_listIterAddA_A(), 1), null, Result.NoSuchElement));
			printTest("emptyList_listIterAddA_A_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(emptyList_listIterAddA_A(), 1), Result.NoException));
			printTest("emptyList_listIterAddA_A_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(emptyList_listIterAddA_A(), 1)), Result.False));
			printTest("emptyList_listIterAddA_A_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(emptyList_listIterAddA_A(), 1)), null, Result.NoSuchElement));
			printTest("emptyList_listIterAddA_A_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(emptyList_listIterAddA_A(), 1)), Result.IllegalState));
			// ListIterator
			printTest("emptyList_listIterAddA_A_testListIter", testListIter(emptyList_listIterAddA_A(), Result.NoException));
			printTest("emptyList_listIterAddA_A_testListIter", testListIter(emptyList_listIterAddA_A(), 0, Result.NoException));
			printTest("emptyList_listIterAddA_A_testListIterHasPrev", testListIterHasPrev(emptyList_listIterAddA_A(), 0, Result.False));
			printTest("emptyList_listIterAddA_A_testListIterHasPrev", testListIterHasPrev(emptyList_listIterAddA_A(), 1, Result.True));
			printTest("emptyList_listIterAddA_A_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("emptyList_listIterAddA_A_testListIter1Prev1", testListIterPrev(emptyList_listIterAddA_A(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("emptyList_listIterAddA_A_testListIterAddNeg1B", testListIterAdd(emptyList_listIterAddA_A(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_listIterAddA_A_testListIterAdd0B", testListIterAdd(emptyList_listIterAddA_A(), 0, ELEMENT_B, Result.NoException));
			printTest("emptyList_listIterAddA_A_testListIterAdd1B", testListIterAdd(emptyList_listIterAddA_A(), 1, ELEMENT_B, Result.NoException));
			printTest("emptyList_listIterAddA_A_testListIterAdd2B", testListIterAdd(emptyList_listIterAddA_A(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("emptyList_listIterAddA_A_testListIterNextIndex0", testListIterNextIndex(emptyList_listIterAddA_A(), 0, 0));
			printTest("emptyList_listIterAddA_A_testListIterNextIndex1", testListIterNextIndex(emptyList_listIterAddA_A(), 1, 1));
			printTest("emptyList_listIterAddA_A_testListIterPreviousIndex0", testListIterPrevIndex(emptyList_listIterAddA_A(), 0, -1));
			printTest("emptyList_listIterAddA_A_testListIterPreviousIndex1", testListIterPrevIndex(emptyList_listIterAddA_A(), 1, 0));
			printTest("emptyList_listIterAddA_A_testListIterNext0AddB", testListNextAdd(emptyList_listIterAddA_A(), ELEMENT_B, 0, Result.NoException));
			printTest("emptyList_listIterAddA_A_testListIterNext1AddB", testListNextAdd(emptyList_listIterAddA_A(), ELEMENT_B, 1, Result.NoException));
			printTest("emptyList_listIterAddA_A_testListIterNext2AddB", testListNextAdd(emptyList_listIterAddA_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("emptyList_listIterAddA_A_testListIterPrev1Index0AddB", testListPrevAdd(emptyList_listIterAddA_A(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("emptyList_listIterAddA_A_testListIterPrev0Index0AddB", testListPrevAdd(emptyList_listIterAddA_A(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("emptyList_listIterAddA_A_testListIterPrev0Index1AddB", testListPrevAdd(emptyList_listIterAddA_A(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("emptyList_listIterAddA_A_testListIterPrev1Index1AddB", testListPrevAdd(emptyList_listIterAddA_A(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("emptyList_listIterAddA_A_testListIterPrev0Index2AddB", testListPrevAdd(emptyList_listIterAddA_A(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("emptyList_listIterAddA_A_testListIterNext0SetB", testListNextSet(emptyList_listIterAddA_A(), ELEMENT_B, 0, Result.IllegalState));
			printTest("emptyList_listIterAddA_A_testListIterNext1SetB", testListNextSet(emptyList_listIterAddA_A(), ELEMENT_B, 1, Result.NoException));
			printTest("emptyList_listIterAddA_A_testListIterNext2SetB", testListNextSet(emptyList_listIterAddA_A(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("emptyList_listIterAddA_A_testListIterPrev0SetB", testListPrevSet(emptyList_listIterAddA_A(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("emptyList_listIterAddA_A_testListIterPrev1SetB", testListPrevSet(emptyList_listIterAddA_A(), ELEMENT_B, 1, 1, Result.NoException));
			
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_emptyList_listIterAddA_A");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> lit.add(B) -> [B,A]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A] -> listIterAddA -> [B,A] 
	 * @return [A,B] after listIterAddA
	 */
	private IndexedUnsortedList<Integer> A_listIterAddB_BA(){
		IndexedUnsortedList<Integer> list = emptyList_listIterAddA_A(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.add(ELEMENT_B);
		
		return list;
	}

	/** Run all tests on scenario: [A] -> lit.add(B) -> [B,A] */
	private void test_A_listIterAddB_BA() {
		System.out.println("\nSCENARIO: [A] -> listIterAdd(B) -> [B,A]\n");
		try {
			// IndexedUnsortedList
			printTest("A_listIterAddB_BA_testAddToFrontC", testAddToFront(A_listIterAddB_BA(), ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testAddToRearC", testAddToRear(A_listIterAddB_BA(), ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testAddAfterAC", testAddAfter(A_listIterAddB_BA(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testAddAfterBC", testAddAfter(A_listIterAddB_BA(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testAddAfterDC", testAddAfter(A_listIterAddB_BA(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("A_listIterAddB_BA_testAddAtIndexNeg1C", testAddAtIndex(A_listIterAddB_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testAddAtIndex0C", testAddAtIndex(A_listIterAddB_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testAddAtIndex1C", testAddAtIndex(A_listIterAddB_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testAddAtIndex2C", testAddAtIndex(A_listIterAddB_BA(), 2, ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testAddAtIndex3C", testAddAtIndex(A_listIterAddB_BA(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testAddC", testAdd(A_listIterAddB_BA(), ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testRemoveFirst", testRemoveFirst(A_listIterAddB_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testRemoveLast", testRemoveLast(A_listIterAddB_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testRemoveA", testRemoveElement(A_listIterAddB_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testRemoveB", testRemoveElement(A_listIterAddB_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testRemoveC", testRemoveElement(A_listIterAddB_BA(), ELEMENT_C, Result.NoSuchElement));
			printTest("A_listIterAddB_BA_testRemoveNeg1", testRemoveIndex(A_listIterAddB_BA(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testRemove0", testRemoveIndex(A_listIterAddB_BA(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testRemove1", testRemoveIndex(A_listIterAddB_BA(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testRemove2", testRemoveIndex(A_listIterAddB_BA(), 2, null, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testFirst", testFirst(A_listIterAddB_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testLast", testLast(A_listIterAddB_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testContainsA", testContains(A_listIterAddB_BA(), ELEMENT_A, Result.True));
			printTest("A_listIterAddB_BA_testContainsB", testContains(A_listIterAddB_BA(), ELEMENT_B, Result.True));
			printTest("A_listIterAddB_BA_testContainsC", testContains(A_listIterAddB_BA(), ELEMENT_C, Result.False));
			printTest("A_listIterAddB_BA_testIsEmpty", testIsEmpty(A_listIterAddB_BA(), Result.False));
			printTest("A_listIterAddB_BA_testSize", testSize(A_listIterAddB_BA(), 2));
			printTest("A_listIterAddB_BA_testToString", testToString(A_listIterAddB_BA(), Result.ValidString));
			printTest("A_listIterAddB_BA_testSetNeg1C", testSet(A_listIterAddB_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testSet0C", testSet(A_listIterAddB_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testSet1C", testSet(A_listIterAddB_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testSet2C", testSet(A_listIterAddB_BA(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testGetNeg1", testGet(A_listIterAddB_BA(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testGet0", testGet(A_listIterAddB_BA(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testGet1", testGet(A_listIterAddB_BA(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testGet2", testGet(A_listIterAddB_BA(), 2, null, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testIndexOfA", testIndexOf(A_listIterAddB_BA(), ELEMENT_A, 1));
			printTest("A_listIterAddB_BA_testIndexOfB", testIndexOf(A_listIterAddB_BA(), ELEMENT_B, 0));
			printTest("A_listIterAddB_BA_testIndexOfC", testIndexOf(A_listIterAddB_BA(), ELEMENT_C, -1));
			// Iterator
			printTest("A_listIterAddB_BA_testIter", testIter(A_listIterAddB_BA(), Result.NoException));
			printTest("A_listIterAddB_BA_testIterHasNext", testIterHasNext(A_listIterAddB_BA().iterator(), Result.True));
			printTest("A_listIterAddB_BA_testIterNext", testIterNext(A_listIterAddB_BA().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testIterRemove", testIterRemove(A_listIterAddB_BA().iterator(), Result.IllegalState));
			printTest("A_listIterAddB_BA_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(A_listIterAddB_BA(), 1), Result.True));
			printTest("A_listIterAddB_BA_iterNext_testIterNext", testIterNext(iterAfterNext(A_listIterAddB_BA(), 1), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterAddB_BA_iterNext_testIterRemove", testIterRemove(iterAfterNext(A_listIterAddB_BA(), 1), Result.NoException));
			printTest("A_listIterAddB_BA_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_listIterAddB_BA(), 1)), Result.True));
			printTest("A_listIterAddB_BA_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_listIterAddB_BA(), 1)), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterAddB_BA_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_listIterAddB_BA(), 1)), Result.IllegalState));
			printTest("A_listIterAddB_BA_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(A_listIterAddB_BA(), 2), Result.False));
			printTest("A_listIterAddB_BA_iterNextNext_testIterNext", testIterNext(iterAfterNext(A_listIterAddB_BA(), 2), null, Result.NoSuchElement));
			printTest("A_listIterAddB_BA_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(A_listIterAddB_BA(), 2), Result.NoException));
			printTest("A_listIterAddB_BA_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_listIterAddB_BA(), 2)), Result.False));
			printTest("A_listIterAddB_BA_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_listIterAddB_BA(), 2)), null, Result.NoSuchElement));
			printTest("A_listIterAddB_BA_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_listIterAddB_BA(), 2)), Result.IllegalState));
			// ListIterator
			printTest("A_listIterAddB_BA_testListIter", testListIter(A_listIterAddB_BA(), Result.NoException));
			printTest("A_listIterAddB_BA_testListIter", testListIter(A_listIterAddB_BA(), 0, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterHas0Prev", testListIterHasPrev(A_listIterAddB_BA(), 0, Result.False));
			printTest("A_listIterAddB_BA_testListIterHas1Prev", testListIterHasPrev(A_listIterAddB_BA(), 1, Result.True));
			printTest("A_listIterAddB_BA_testListIterHas2Prev", testListIterHasPrev(A_listIterAddB_BA(), 2, Result.True));
			printTest("A_listIterAddB_BA_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterAddB_BA_testListIter1Prev1", testListIterPrev(A_listIterAddB_BA(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testListIter2Prev2", testListIterPrev(A_listIterAddB_BA(), 2, 2, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testListIter2Prev1", testListIterPrev(A_listIterAddB_BA(), 2, 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterAddB_BA_testListIterAddNeg1C", testListIterAdd(A_listIterAddB_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testListIterAdd0C", testListIterAdd(A_listIterAddB_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterAdd1C", testListIterAdd(A_listIterAddB_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterAdd2C", testListIterAdd(A_listIterAddB_BA(), 2, ELEMENT_C, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterAdd3C", testListIterAdd(A_listIterAddB_BA(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testListIterNextIndex0", testListIterNextIndex(A_listIterAddB_BA(), 0, 0));
			printTest("A_listIterAddB_BA_testListIterNextIndex1", testListIterNextIndex(A_listIterAddB_BA(), 1, 1));
			printTest("A_listIterAddB_BA_testListIterNextIndex2", testListIterNextIndex(A_listIterAddB_BA(), 2, 2));
			printTest("A_listIterAddB_BA_testListIterPreviousIndex0", testListIterPrevIndex(A_listIterAddB_BA(), 0, -1));
			printTest("A_listIterAddB_BA_testListIterPreviousIndex1", testListIterPrevIndex(A_listIterAddB_BA(), 1, 0));
			printTest("A_listIterAddB_BA_testListIterPreviousIndex2", testListIterPrevIndex(A_listIterAddB_BA(), 2, 1));
			printTest("A_listIterAddB_BA_testListIterNext0AddC", testListNextAdd(A_listIterAddB_BA(), ELEMENT_C, 0, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterNext1AddC", testListNextAdd(A_listIterAddB_BA(), ELEMENT_C, 1, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterNext2AddC", testListNextAdd(A_listIterAddB_BA(), ELEMENT_C, 2, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterNext3AddC", testListNextAdd(A_listIterAddB_BA(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_listIterAddB_BA_testListIterPrev1Index0AddC", testListPrevAdd(A_listIterAddB_BA(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("A_listIterAddB_BA_testListIterPrev0Index0AddC", testListPrevAdd(A_listIterAddB_BA(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterPrev0Index1AddC", testListPrevAdd(A_listIterAddB_BA(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterPrev1Index1AddC", testListPrevAdd(A_listIterAddB_BA(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterPrev0Index2AddC", testListPrevAdd(A_listIterAddB_BA(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterPrev1Index2AddC", testListPrevAdd(A_listIterAddB_BA(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterPrev2Index2AddC", testListPrevAdd(A_listIterAddB_BA(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterPrev0Index3AddC", testListPrevAdd(A_listIterAddB_BA(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("A_listIterAddB_BA_testListIterNext0SetC", testListNextSet(A_listIterAddB_BA(), ELEMENT_C, 0, Result.IllegalState));
			printTest("A_listIterAddB_BA_testListIterNext1SetC", testListNextSet(A_listIterAddB_BA(), ELEMENT_C, 1, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterNext2SetC", testListNextSet(A_listIterAddB_BA(), ELEMENT_C, 2, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterNext3SetC", testListNextSet(A_listIterAddB_BA(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_listIterAddB_BA_testListIterPrev0SetC", testListPrevSet(A_listIterAddB_BA(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("A_listIterAddB_BA_testListIterPrev1SetC", testListPrevSet(A_listIterAddB_BA(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_listIterAddB_BA_testListIterPrev2SetC", testListPrevSet(A_listIterAddB_BA(), ELEMENT_C, 2, 2, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_listIterAddB_BA");
			e.printStackTrace();
		}
	}
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> lit.next() -> lit.add(B) -> [A,B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A] -> listIterNextAddA -> [A,B] 
	 * @return [A,B] after listIterNextAddB
	 */
	private IndexedUnsortedList<Integer> A_listIterNextAddB_AB(){
		IndexedUnsortedList<Integer> list = emptyList_listIterAddA_A(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.add(ELEMENT_B);
		
		return list;
	}
	
	/** Run all tests on scenario: [A] -> lit.next() -> lit.add(B) -> [B,A] */
	private void test_A_listIterNextAddB_AB() {
		System.out.println("\nSCENARIO: [A] -> addToRear(B) -> [A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("A_listIterNextAddB_AB_testAddToFrontC", testAddToFront(A_listIterNextAddB_AB(), ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testAddToRearC", testAddToRear(A_listIterNextAddB_AB(), ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testAddAfterAC", testAddAfter(A_listIterNextAddB_AB(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testAddAfterBC", testAddAfter(A_listIterNextAddB_AB(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testAddAfterDC", testAddAfter(A_listIterNextAddB_AB(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("A_listIterNextAddB_AB_testAddAtIndexNeg1C", testAddAtIndex(A_listIterNextAddB_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testAddAtIndex0C", testAddAtIndex(A_listIterNextAddB_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testAddAtIndex1C", testAddAtIndex(A_listIterNextAddB_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testAddAtIndex2C", testAddAtIndex(A_listIterNextAddB_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testAddAtIndex3C", testAddAtIndex(A_listIterNextAddB_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testAddC", testAdd(A_listIterNextAddB_AB(), ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testRemoveFirst", testRemoveFirst(A_listIterNextAddB_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testRemoveLast", testRemoveLast(A_listIterNextAddB_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testRemoveA", testRemoveElement(A_listIterNextAddB_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testRemoveB", testRemoveElement(A_listIterNextAddB_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testRemoveC", testRemoveElement(A_listIterNextAddB_AB(), ELEMENT_C, Result.NoSuchElement));
			printTest("A_listIterNextAddB_AB_testRemoveNeg1", testRemoveIndex(A_listIterNextAddB_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testRemove0", testRemoveIndex(A_listIterNextAddB_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testRemove1", testRemoveIndex(A_listIterNextAddB_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testRemove2", testRemoveIndex(A_listIterNextAddB_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testFirst", testFirst(A_listIterNextAddB_AB(), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testLast", testLast(A_listIterNextAddB_AB(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testContainsA", testContains(A_listIterNextAddB_AB(), ELEMENT_A, Result.True));
			printTest("A_listIterNextAddB_AB_testContainsB", testContains(A_listIterNextAddB_AB(), ELEMENT_B, Result.True));
			printTest("A_listIterNextAddB_AB_testContainsC", testContains(A_listIterNextAddB_AB(), ELEMENT_C, Result.False));
			printTest("A_listIterNextAddB_AB_testIsEmpty", testIsEmpty(A_listIterNextAddB_AB(), Result.False));
			printTest("A_listIterNextAddB_AB_testSize", testSize(A_listIterNextAddB_AB(), 2));
			printTest("A_listIterNextAddB_AB_testToString", testToString(A_listIterNextAddB_AB(), Result.ValidString));
			printTest("A_listIterNextAddB_AB_testSetNeg1C", testSet(A_listIterNextAddB_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testSet0C", testSet(A_listIterNextAddB_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testSet1C", testSet(A_listIterNextAddB_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testSet2C", testSet(A_listIterNextAddB_AB(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testGetNeg1", testGet(A_listIterNextAddB_AB(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testGet0", testGet(A_listIterNextAddB_AB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testGet1", testGet(A_listIterNextAddB_AB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testGet2", testGet(A_listIterNextAddB_AB(), 2, null, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testIndexOfA", testIndexOf(A_listIterNextAddB_AB(), ELEMENT_A, 0));
			printTest("A_listIterNextAddB_AB_testIndexOfB", testIndexOf(A_listIterNextAddB_AB(), ELEMENT_B, 1));
			printTest("A_listIterNextAddB_AB_testIndexOfC", testIndexOf(A_listIterNextAddB_AB(), ELEMENT_C, -1));
			// Iterator
			printTest("A_listIterNextAddB_AB_testIter", testIter(A_listIterNextAddB_AB(), Result.NoException));
			printTest("A_listIterNextAddB_AB_testIterHasNext", testIterHasNext(A_listIterNextAddB_AB().iterator(), Result.True));
			printTest("A_listIterNextAddB_AB_testIterNext", testIterNext(A_listIterNextAddB_AB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testIterRemove", testIterRemove(A_listIterNextAddB_AB().iterator(), Result.IllegalState));
			printTest("A_listIterNextAddB_AB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(A_listIterNextAddB_AB(), 1), Result.True));
			printTest("A_listIterNextAddB_AB_iterNext_testIterNext", testIterNext(iterAfterNext(A_listIterNextAddB_AB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_iterNext_testIterRemove", testIterRemove(iterAfterNext(A_listIterNextAddB_AB(), 1), Result.NoException));
			printTest("A_listIterNextAddB_AB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_listIterNextAddB_AB(), 1)), Result.True));
			printTest("A_listIterNextAddB_AB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_listIterNextAddB_AB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_listIterNextAddB_AB(), 1)), Result.IllegalState));
			printTest("A_listIterNextAddB_AB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(A_listIterNextAddB_AB(), 2), Result.False));
			printTest("A_listIterNextAddB_AB_iterNextNext_testIterNext", testIterNext(iterAfterNext(A_listIterNextAddB_AB(), 2), null, Result.NoSuchElement));
			printTest("A_listIterNextAddB_AB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(A_listIterNextAddB_AB(), 2), Result.NoException));
			printTest("A_listIterNextAddB_AB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_listIterNextAddB_AB(), 2)), Result.False));
			printTest("A_listIterNextAddB_AB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_listIterNextAddB_AB(), 2)), null, Result.NoSuchElement));
			printTest("A_listIterNextAddB_AB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_listIterNextAddB_AB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("A_listIterNextAddB_AB_testListIter", testListIter(A_listIterNextAddB_AB(), Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIter", testListIter(A_listIterNextAddB_AB(), 0, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterHas0Prev", testListIterHasPrev(A_listIterNextAddB_AB(), 0, Result.False));
			printTest("A_listIterNextAddB_AB_testListIterHas1Prev", testListIterHasPrev(A_listIterNextAddB_AB(), 1, Result.True));
			printTest("A_listIterNextAddB_AB_testListIterHas2Prev", testListIterHasPrev(A_listIterNextAddB_AB(), 2, Result.True));
			printTest("A_listIterNextAddB_AB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterNextAddB_AB_testListIter1Prev1", testListIterPrev(A_listIterNextAddB_AB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testListIter2Prev2", testListIterPrev(A_listIterNextAddB_AB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testListIter2Prev1", testListIterPrev(A_listIterNextAddB_AB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextAddB_AB_testListIterAddNeg1C", testListIterAdd(A_listIterNextAddB_AB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testListIterAdd0C", testListIterAdd(A_listIterNextAddB_AB(), 0, ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterAdd1C", testListIterAdd(A_listIterNextAddB_AB(), 1, ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterAdd2C", testListIterAdd(A_listIterNextAddB_AB(), 2, ELEMENT_C, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterAdd3C", testListIterAdd(A_listIterNextAddB_AB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testListIterNextIndex0", testListIterNextIndex(A_listIterNextAddB_AB(), 0, 0));
			printTest("A_listIterNextAddB_AB_testListIterNextIndex1", testListIterNextIndex(A_listIterNextAddB_AB(), 1, 1));
			printTest("A_listIterNextAddB_AB_testListIterNextIndex2", testListIterNextIndex(A_listIterNextAddB_AB(), 2, 2));
			printTest("A_listIterNextAddB_AB_testListIterPreviousIndex0", testListIterPrevIndex(A_listIterNextAddB_AB(), 0, -1));
			printTest("A_listIterNextAddB_AB_testListIterPreviousIndex1", testListIterPrevIndex(A_listIterNextAddB_AB(), 1, 0));
			printTest("A_listIterNextAddB_AB_testListIterPreviousIndex2", testListIterPrevIndex(A_listIterNextAddB_AB(), 2, 1));
			printTest("A_listIterNextAddB_AB_testListIterNext0AddC", testListNextAdd(A_listIterNextAddB_AB(), ELEMENT_C, 0, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterNext1AddC", testListNextAdd(A_listIterNextAddB_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterNext2AddC", testListNextAdd(A_listIterNextAddB_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterNext3AddC", testListNextAdd(A_listIterNextAddB_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_listIterNextAddB_AB_testListIterPrev1Index0AddC", testListPrevAdd(A_listIterNextAddB_AB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("A_listIterNextAddB_AB_testListIterPrev0Index0AddC", testListPrevAdd(A_listIterNextAddB_AB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterPrev0Index1AddC", testListPrevAdd(A_listIterNextAddB_AB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterPrev1Index1AddC", testListPrevAdd(A_listIterNextAddB_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterPrev0Index2AddC", testListPrevAdd(A_listIterNextAddB_AB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterPrev1Index2AddC", testListPrevAdd(A_listIterNextAddB_AB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterPrev2Index2AddC", testListPrevAdd(A_listIterNextAddB_AB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterPrev0Index3AddC", testListPrevAdd(A_listIterNextAddB_AB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("A_listIterNextAddB_AB_testListIterNext0SetC", testListNextSet(A_listIterNextAddB_AB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("A_listIterNextAddB_AB_testListIterNext1SetC", testListNextSet(A_listIterNextAddB_AB(), ELEMENT_C, 1, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterNext2SetC", testListNextSet(A_listIterNextAddB_AB(), ELEMENT_C, 2, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterNext3SetC", testListNextSet(A_listIterNextAddB_AB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_listIterNextAddB_AB_testListIterPrev0SetC", testListPrevSet(A_listIterNextAddB_AB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("A_listIterNextAddB_AB_testListIterPrev1SetC", testListPrevSet(A_listIterNextAddB_AB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_listIterNextAddB_AB_testListIterPrev2SetC", testListPrevSet(A_listIterNextAddB_AB(), ELEMENT_C, 2, 2, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_listIterNextAddB_AB");
			e.printStackTrace();
		}
	}
	
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> lit.prev()-> lit.add(B) -> [B,A]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A] -> listIterPrevAddA -> [B,A] 
	 * @return [A,B] after listIterPrevAddA
	 */
	private IndexedUnsortedList<Integer> A_listIterPrevAddB_BA(){
		IndexedUnsortedList<Integer> list = emptyList_listIterAddA_A(); 
		ListIterator<Integer> lit = list.listIterator(1);
		lit.previous();
		lit.add(ELEMENT_B);
		
		return list;
	}

	/** Run all tests on scenario: [A] -> lit.add(B) -> [B,A] */
	private void test_A_listIterPrevAddB_BA() {
		System.out.println("\nSCENARIO: [A] -> listIterAdd(B) -> [B,A]\n");
		try {
			// IndexedUnsortedList
			printTest("A_listIterPrevAddB_BA_testAddToFrontC", testAddToFront(A_listIterPrevAddB_BA(), ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testAddToRearC", testAddToRear(A_listIterPrevAddB_BA(), ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testAddAfterAC", testAddAfter(A_listIterPrevAddB_BA(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testAddAfterBC", testAddAfter(A_listIterPrevAddB_BA(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testAddAfterDC", testAddAfter(A_listIterPrevAddB_BA(), ELEMENT_D, ELEMENT_C, Result.NoSuchElement));
			printTest("A_listIterPrevAddB_BA_testAddAtIndexNeg1C", testAddAtIndex(A_listIterPrevAddB_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testAddAtIndex0C", testAddAtIndex(A_listIterPrevAddB_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testAddAtIndex1C", testAddAtIndex(A_listIterPrevAddB_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testAddAtIndex2C", testAddAtIndex(A_listIterPrevAddB_BA(), 2, ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testAddAtIndex3C", testAddAtIndex(A_listIterPrevAddB_BA(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testAddC", testAdd(A_listIterPrevAddB_BA(), ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testRemoveFirst", testRemoveFirst(A_listIterPrevAddB_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testRemoveLast", testRemoveLast(A_listIterPrevAddB_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testRemoveA", testRemoveElement(A_listIterPrevAddB_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testRemoveB", testRemoveElement(A_listIterPrevAddB_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testRemoveC", testRemoveElement(A_listIterPrevAddB_BA(), ELEMENT_C, Result.NoSuchElement));
			printTest("A_listIterPrevAddB_BA_testRemoveNeg1", testRemoveIndex(A_listIterPrevAddB_BA(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testRemove0", testRemoveIndex(A_listIterPrevAddB_BA(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testRemove1", testRemoveIndex(A_listIterPrevAddB_BA(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testRemove2", testRemoveIndex(A_listIterPrevAddB_BA(), 2, null, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testFirst", testFirst(A_listIterPrevAddB_BA(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testLast", testLast(A_listIterPrevAddB_BA(), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testContainsA", testContains(A_listIterPrevAddB_BA(), ELEMENT_A, Result.True));
			printTest("A_listIterPrevAddB_BA_testContainsB", testContains(A_listIterPrevAddB_BA(), ELEMENT_B, Result.True));
			printTest("A_listIterPrevAddB_BA_testContainsC", testContains(A_listIterPrevAddB_BA(), ELEMENT_C, Result.False));
			printTest("A_listIterPrevAddB_BA_testIsEmpty", testIsEmpty(A_listIterPrevAddB_BA(), Result.False));
			printTest("A_listIterPrevAddB_BA_testSize", testSize(A_listIterPrevAddB_BA(), 2));
			printTest("A_listIterPrevAddB_BA_testToString", testToString(A_listIterPrevAddB_BA(), Result.ValidString));
			printTest("A_listIterPrevAddB_BA_testSetNeg1C", testSet(A_listIterPrevAddB_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testSet0C", testSet(A_listIterPrevAddB_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testSet1C", testSet(A_listIterPrevAddB_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testSet2C", testSet(A_listIterPrevAddB_BA(), 2, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testGetNeg1", testGet(A_listIterPrevAddB_BA(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testGet0", testGet(A_listIterPrevAddB_BA(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testGet1", testGet(A_listIterPrevAddB_BA(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testGet2", testGet(A_listIterPrevAddB_BA(), 2, null, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testIndexOfA", testIndexOf(A_listIterPrevAddB_BA(), ELEMENT_A, 1));
			printTest("A_listIterPrevAddB_BA_testIndexOfB", testIndexOf(A_listIterPrevAddB_BA(), ELEMENT_B, 0));
			printTest("A_listIterPrevAddB_BA_testIndexOfC", testIndexOf(A_listIterPrevAddB_BA(), ELEMENT_C, -1));
			// Iterator
			printTest("A_listIterPrevAddB_BA_testIter", testIter(A_listIterPrevAddB_BA(), Result.NoException));
			printTest("A_listIterPrevAddB_BA_testIterHasNext", testIterHasNext(A_listIterPrevAddB_BA().iterator(), Result.True));
			printTest("A_listIterPrevAddB_BA_testIterNext", testIterNext(A_listIterPrevAddB_BA().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testIterRemove", testIterRemove(A_listIterPrevAddB_BA().iterator(), Result.IllegalState));
			printTest("A_listIterPrevAddB_BA_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(A_listIterPrevAddB_BA(), 1), Result.True));
			printTest("A_listIterPrevAddB_BA_iterNext_testIterNext", testIterNext(iterAfterNext(A_listIterPrevAddB_BA(), 1), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_iterNext_testIterRemove", testIterRemove(iterAfterNext(A_listIterPrevAddB_BA(), 1), Result.NoException));
			printTest("A_listIterPrevAddB_BA_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_listIterPrevAddB_BA(), 1)), Result.True));
			printTest("A_listIterPrevAddB_BA_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_listIterPrevAddB_BA(), 1)), ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_listIterPrevAddB_BA(), 1)), Result.IllegalState));
			printTest("A_listIterPrevAddB_BA_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(A_listIterPrevAddB_BA(), 2), Result.False));
			printTest("A_listIterPrevAddB_BA_iterNextNext_testIterNext", testIterNext(iterAfterNext(A_listIterPrevAddB_BA(), 2), null, Result.NoSuchElement));
			printTest("A_listIterPrevAddB_BA_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(A_listIterPrevAddB_BA(), 2), Result.NoException));
			printTest("A_listIterPrevAddB_BA_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_listIterPrevAddB_BA(), 2)), Result.False));
			printTest("A_listIterPrevAddB_BA_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_listIterPrevAddB_BA(), 2)), null, Result.NoSuchElement));
			printTest("A_listIterPrevAddB_BA_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_listIterPrevAddB_BA(), 2)), Result.IllegalState));
			// ListIterator
			printTest("A_listIterPrevAddB_BA_testListIter", testListIter(A_listIterPrevAddB_BA(), Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIter", testListIter(A_listIterPrevAddB_BA(), 0, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterHas0Prev", testListIterHasPrev(A_listIterPrevAddB_BA(), 0, Result.False));
			printTest("A_listIterPrevAddB_BA_testListIterHas1Prev", testListIterHasPrev(A_listIterPrevAddB_BA(), 1, Result.True));
			printTest("A_listIterPrevAddB_BA_testListIterHas2Prev", testListIterHasPrev(A_listIterPrevAddB_BA(), 2, Result.True));
			printTest("A_listIterPrevAddB_BA_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterPrevAddB_BA_testListIter1Prev1", testListIterPrev(A_listIterPrevAddB_BA(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testListIter2Prev2", testListIterPrev(A_listIterPrevAddB_BA(), 2, 2, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testListIter2Prev1", testListIterPrev(A_listIterPrevAddB_BA(), 2, 1, ELEMENT_A, Result.MatchingValue));
			printTest("A_listIterPrevAddB_BA_testListIterAddNeg1C", testListIterAdd(A_listIterPrevAddB_BA(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testListIterAdd0C", testListIterAdd(A_listIterPrevAddB_BA(), 0, ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterAdd1C", testListIterAdd(A_listIterPrevAddB_BA(), 1, ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterAdd2C", testListIterAdd(A_listIterPrevAddB_BA(), 2, ELEMENT_C, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterAdd3C", testListIterAdd(A_listIterPrevAddB_BA(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testListIterNextIndex0", testListIterNextIndex(A_listIterPrevAddB_BA(), 0, 0));
			printTest("A_listIterPrevAddB_BA_testListIterNextIndex1", testListIterNextIndex(A_listIterPrevAddB_BA(), 1, 1));
			printTest("A_listIterPrevAddB_BA_testListIterNextIndex2", testListIterNextIndex(A_listIterPrevAddB_BA(), 2, 2));
			printTest("A_listIterPrevAddB_BA_testListIterPreviousIndex0", testListIterPrevIndex(A_listIterPrevAddB_BA(), 0, -1));
			printTest("A_listIterPrevAddB_BA_testListIterPreviousIndex1", testListIterPrevIndex(A_listIterPrevAddB_BA(), 1, 0));
			printTest("A_listIterPrevAddB_BA_testListIterPreviousIndex2", testListIterPrevIndex(A_listIterPrevAddB_BA(), 2, 1));
			printTest("A_listIterPrevAddB_BA_testListIterNext0AddC", testListNextAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 0, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterNext1AddC", testListNextAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 1, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterNext2AddC", testListNextAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 2, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterNext3AddC", testListNextAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_listIterPrevAddB_BA_testListIterPrev1Index0AddC", testListPrevAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("A_listIterPrevAddB_BA_testListIterPrev0Index0AddC", testListPrevAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterPrev0Index1AddC", testListPrevAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterPrev1Index1AddC", testListPrevAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterPrev0Index2AddC", testListPrevAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterPrev1Index2AddC", testListPrevAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterPrev2Index2AddC", testListPrevAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterPrev0Index3AddC", testListPrevAdd(A_listIterPrevAddB_BA(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("A_listIterPrevAddB_BA_testListIterNext0SetC", testListNextSet(A_listIterPrevAddB_BA(), ELEMENT_C, 0, Result.IllegalState));
			printTest("A_listIterPrevAddB_BA_testListIterNext1SetC", testListNextSet(A_listIterPrevAddB_BA(), ELEMENT_C, 1, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterNext2SetC", testListNextSet(A_listIterPrevAddB_BA(), ELEMENT_C, 2, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterNext3SetC", testListNextSet(A_listIterPrevAddB_BA(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("A_listIterPrevAddB_BA_testListIterPrev0SetC", testListPrevSet(A_listIterPrevAddB_BA(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("A_listIterPrevAddB_BA_testListIterPrev1SetC", testListPrevSet(A_listIterPrevAddB_BA(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("A_listIterPrevAddB_BA_testListIterPrev2SetC", testListPrevSet(A_listIterPrevAddB_BA(), ELEMENT_C, 2, 2, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_listIterPrevAddB_BA");
			e.printStackTrace();
		}
	}
	
	
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> lit.add(C) -> [C,A,B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B] -> listIterAddC -> [C,A,B] 
	 * @return [C,A,B] after listIterAddC
	 */
	private IndexedUnsortedList<Integer> AB_listIterAddC_CAB(){
		IndexedUnsortedList<Integer> list = A_listIterNextAddB_AB(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.add(ELEMENT_C);
		
		return list;
	}
	
	private void test_AB_listIterAddC_CAB() {
		System.out.println("\nSCENARIO: [A,B] -> listIterAddC -> [C,A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_listIterAddC_CAB_testAddToFrontD", testAddToFront(AB_listIterAddC_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testAddToRearD", testAddToRear(AB_listIterAddC_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testAddAfterAD", testAddAfter(AB_listIterAddC_CAB(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testAddAfterBD", testAddAfter(AB_listIterAddC_CAB(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testAddAfterCD", testAddAfter(AB_listIterAddC_CAB(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testAddAfterDD", testAddAfter(AB_listIterAddC_CAB(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_listIterAddC_CAB_testAddAtIndexNeg1D", testAddAtIndex(AB_listIterAddC_CAB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testAddAtIndex0C", testAddAtIndex(AB_listIterAddC_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testAddAtIndex1D", testAddAtIndex(AB_listIterAddC_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testAddAtIndex2D", testAddAtIndex(AB_listIterAddC_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testAddAtIndex3D", testAddAtIndex(AB_listIterAddC_CAB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testAddAtIndex3D", testAddAtIndex(AB_listIterAddC_CAB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testAddC", testAdd(AB_listIterAddC_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testRemoveFirst", testRemoveFirst(AB_listIterAddC_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testRemoveLast", testRemoveLast(AB_listIterAddC_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testRemoveA", testRemoveElement(AB_listIterAddC_CAB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testRemoveB", testRemoveElement(AB_listIterAddC_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testRemoveB", testRemoveElement(AB_listIterAddC_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testRemoveC", testRemoveElement(AB_listIterAddC_CAB(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_listIterAddC_CAB_testRemoveNeg1", testRemoveIndex(AB_listIterAddC_CAB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testRemove0", testRemoveIndex(AB_listIterAddC_CAB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testRemove1", testRemoveIndex(AB_listIterAddC_CAB(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testRemove2", testRemoveIndex(AB_listIterAddC_CAB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testRemove3", testRemoveIndex(AB_listIterAddC_CAB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testFirst", testFirst(AB_listIterAddC_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testLast", testLast(AB_listIterAddC_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testContainsA", testContains(AB_listIterAddC_CAB(), ELEMENT_A, Result.True));
			printTest("AB_listIterAddC_CAB_testContainsB", testContains(AB_listIterAddC_CAB(), ELEMENT_B, Result.True));
			printTest("AB_listIterAddC_CAB_testContainsC", testContains(AB_listIterAddC_CAB(), ELEMENT_C, Result.True));
			printTest("AB_listIterAddC_CAB_testContainsC", testContains(AB_listIterAddC_CAB(), ELEMENT_D, Result.False));
			printTest("AB_listIterAddC_CAB_testIsEmpty", testIsEmpty(AB_listIterAddC_CAB(), Result.False));
			printTest("AB_listIterAddC_CAB_testSize", testSize(AB_listIterAddC_CAB(), 3));
			printTest("AB_listIterAddC_CAB_testToString", testToString(AB_listIterAddC_CAB(), Result.ValidString));
			printTest("AB_listIterAddC_CAB_testSetNeg1D", testSet(AB_listIterAddC_CAB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testSet0D", testSet(AB_listIterAddC_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testSet1D", testSet(AB_listIterAddC_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testSet2D", testSet(AB_listIterAddC_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testSet3D", testSet(AB_listIterAddC_CAB(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testGetNeg1", testGet(AB_listIterAddC_CAB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testGet0", testGet(AB_listIterAddC_CAB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testGet1", testGet(AB_listIterAddC_CAB(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testGet2", testGet(AB_listIterAddC_CAB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testGet3", testGet(AB_listIterAddC_CAB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testIndexOfA", testIndexOf(AB_listIterAddC_CAB(), ELEMENT_A, 1));
			printTest("AB_listIterAddC_CAB_testIndexOfB", testIndexOf(AB_listIterAddC_CAB(), ELEMENT_B, 2));
			printTest("AB_listIterAddC_CAB_testIndexOfC", testIndexOf(AB_listIterAddC_CAB(), ELEMENT_C, 0));
			printTest("AB_listIterAddC_CAB_testIndexOfD", testIndexOf(AB_listIterAddC_CAB(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_listIterAddC_CAB_testIter", testIter(AB_listIterAddC_CAB(), Result.NoException));
			printTest("AB_listIterAddC_CAB_testIterHasNext", testIterHasNext(AB_listIterAddC_CAB().iterator(), Result.True));
			printTest("AB_listIterAddC_CAB_testIterNext", testIterNext(AB_listIterAddC_CAB().iterator(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testIterRemove", testIterRemove(AB_listIterAddC_CAB().iterator(), Result.IllegalState));
			printTest("AB_listIterAddC_CAB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterAddC_CAB(), 1), Result.True));
			printTest("AB_listIterAddC_CAB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_listIterAddC_CAB(), 1), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterAddC_CAB(), 1), Result.NoException));
			printTest("AB_listIterAddC_CAB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterAddC_CAB(), 1)), Result.True));
			printTest("AB_listIterAddC_CAB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterAddC_CAB(), 1)), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterAddC_CAB(), 1)), Result.IllegalState));
			printTest("AB_listIterAddC_CAB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterAddC_CAB(), 2), Result.True));
			printTest("AB_listIterAddC_CAB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_listIterAddC_CAB(), 2), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterAddC_CAB(), 2), Result.NoException));
			printTest("AB_listIterAddC_CAB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterAddC_CAB(), 3)), Result.False));
			printTest("AB_listIterAddC_CAB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterAddC_CAB(), 3)), null, Result.NoSuchElement));
			printTest("AB_listIterAddC_CAB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterAddC_CAB(), 3)), Result.IllegalState));
			// List Iterator
			printTest("AB_listIterAddC_CAB_testListIter", testListIter(AB_listIterAddC_CAB(), Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIter", testListIter(AB_listIterAddC_CAB(), 0, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterHas0Prev", testListIterHasPrev(AB_listIterAddC_CAB(), 0, Result.False));
			printTest("AB_listIterAddC_CAB_testListIterHas1Prev", testListIterHasPrev(AB_listIterAddC_CAB(), 1, Result.True));
			printTest("AB_listIterAddC_CAB_testListIterHas2Prev", testListIterHasPrev(AB_listIterAddC_CAB(), 2, Result.True));
			printTest("AB_listIterAddC_CAB_testListIterHas3Prev", testListIterHasPrev(AB_listIterAddC_CAB(), 3, Result.True));
			printTest("AB_listIterAddC_CAB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterAddC_CAB_testListIter1Prev1", testListIterPrev(AB_listIterAddC_CAB(), 1, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testListIter2Prev2", testListIterPrev(AB_listIterAddC_CAB(), 2, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testListIter2Prev1", testListIterPrev(AB_listIterAddC_CAB(), 2, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testListIter3Prev1", testListIterPrev(AB_listIterAddC_CAB(), 3, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testListIter3Prev2", testListIterPrev(AB_listIterAddC_CAB(), 3, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testListIter3Prev3", testListIterPrev(AB_listIterAddC_CAB(), 3, 3, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterAddC_CAB_testListIterAddNeg1D", testListIterAdd(AB_listIterAddC_CAB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testListIterAdd0D", testListIterAdd(AB_listIterAddC_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterAdd1D", testListIterAdd(AB_listIterAddC_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterAdd2D", testListIterAdd(AB_listIterAddC_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterAdd3D", testListIterAdd(AB_listIterAddC_CAB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterAdd4D", testListIterAdd(AB_listIterAddC_CAB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testListIterNextIndex0", testListIterNextIndex(AB_listIterAddC_CAB(), 0, 0));
			printTest("AB_listIterAddC_CAB_testListIterNextIndex1", testListIterNextIndex(AB_listIterAddC_CAB(), 1, 1));
			printTest("AB_listIterAddC_CAB_testListIterNextIndex2", testListIterNextIndex(AB_listIterAddC_CAB(), 2, 2));
			printTest("AB_listIterAddC_CAB_testListIterNextIndex3", testListIterNextIndex(AB_listIterAddC_CAB(), 3, 3));
			printTest("AB_listIterAddC_CAB_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterAddC_CAB(), 0, -1));
			printTest("AB_listIterAddC_CAB_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterAddC_CAB(), 1, 0));
			printTest("AB_listIterAddC_CAB_testListIterPreviousIndex2", testListIterPrevIndex(AB_listIterAddC_CAB(), 2, 1));
			printTest("AB_listIterAddC_CAB_testListIterPreviousIndex3", testListIterPrevIndex(AB_listIterAddC_CAB(), 3, 2));
			printTest("AB_listIterAddC_CAB_testListIterNext0AddD", testListNextAdd(AB_listIterAddC_CAB(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterNext1AddD", testListNextAdd(AB_listIterAddC_CAB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterNext2AddD", testListNextAdd(AB_listIterAddC_CAB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterNext3AddD", testListNextAdd(AB_listIterAddC_CAB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterNext4AddD", testListNextAdd(AB_listIterAddC_CAB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_listIterAddC_CAB_testListIterPrev1Index0AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterAddC_CAB_testListIterPrev0Index0AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev0Index1AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev1Index1AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev0Index2AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev1Index2AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev2Index2AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev0Index3AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev1Index3AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev2Index3AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev3Index3AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev0Index4AddD", testListPrevAdd(AB_listIterAddC_CAB(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_listIterAddC_CAB_testListIterNext0SetD", testListNextSet(AB_listIterAddC_CAB(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_listIterAddC_CAB_testListIterNext1SetD", testListNextSet(AB_listIterAddC_CAB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterNext2SetD", testListNextSet(AB_listIterAddC_CAB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterNext3SetD", testListNextSet(AB_listIterAddC_CAB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterNext4SetD", testListNextSet(AB_listIterAddC_CAB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_listIterAddC_CAB_testListIterPrev0SetD", testListPrevSet(AB_listIterAddC_CAB(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_listIterAddC_CAB_testListIterPrev1SetD", testListPrevSet(AB_listIterAddC_CAB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev2SetD", testListPrevSet(AB_listIterAddC_CAB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_listIterAddC_CAB_testListIterPrev3SetD", testListPrevSet(AB_listIterAddC_CAB(), ELEMENT_D, 3, 3, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterAddC_CAB");
			e.printStackTrace();
		}
	}
	
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> lit.next() -> lit.add(C) -> [A,C,B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B] -> listIterNextAddC -> [A,C,B] 
	 * @return [A,C,B] after listIterNextAddC
	 */
	private IndexedUnsortedList<Integer> AB_listIterNextAddC_ACB(){
		IndexedUnsortedList<Integer> list = A_listIterNextAddB_AB(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.add(ELEMENT_C);
		
		return list;
	}
	
	private void test_AB_listIterNextAddC_ACB() {
		System.out.println("\nSCENARIO: [A,B] -> listIterNext->listIterAddC -> [A,C,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_listIterNextAddC_ACB_testAddToFrontD", testAddToFront(AB_listIterNextAddC_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testAddToRearD", testAddToRear(AB_listIterNextAddC_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testAddAfterAD", testAddAfter(AB_listIterNextAddC_ACB(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testAddAfterBD", testAddAfter(AB_listIterNextAddC_ACB(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testAddAfterCD", testAddAfter(AB_listIterNextAddC_ACB(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testAddAfterDD", testAddAfter(AB_listIterNextAddC_ACB(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_listIterNextAddC_ACB_testAddAtIndexNeg1D", testAddAtIndex(AB_listIterNextAddC_ACB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testAddAtIndex0D", testAddAtIndex(AB_listIterNextAddC_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testAddAtIndex1D", testAddAtIndex(AB_listIterNextAddC_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testAddAtIndex2D", testAddAtIndex(AB_listIterNextAddC_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testAddAtIndex3D", testAddAtIndex(AB_listIterNextAddC_ACB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testAddAtIndex4D", testAddAtIndex(AB_listIterNextAddC_ACB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testAddD", testAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testRemoveFirst", testRemoveFirst(AB_listIterNextAddC_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testRemoveLast", testRemoveLast(AB_listIterNextAddC_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testRemoveA", testRemoveElement(AB_listIterNextAddC_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testRemoveB", testRemoveElement(AB_listIterNextAddC_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testRemoveB", testRemoveElement(AB_listIterNextAddC_ACB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testRemoveC", testRemoveElement(AB_listIterNextAddC_ACB(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_listIterNextAddC_ACB_testRemoveNeg1", testRemoveIndex(AB_listIterNextAddC_ACB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testRemove0", testRemoveIndex(AB_listIterNextAddC_ACB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testRemove1", testRemoveIndex(AB_listIterNextAddC_ACB(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testRemove2", testRemoveIndex(AB_listIterNextAddC_ACB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testRemove3", testRemoveIndex(AB_listIterNextAddC_ACB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testFirst", testFirst(AB_listIterNextAddC_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testLast", testLast(AB_listIterNextAddC_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testContainsA", testContains(AB_listIterNextAddC_ACB(), ELEMENT_A, Result.True));
			printTest("AB_listIterNextAddC_ACB_testContainsB", testContains(AB_listIterNextAddC_ACB(), ELEMENT_B, Result.True));
			printTest("AB_listIterNextAddC_ACB_testContainsC", testContains(AB_listIterNextAddC_ACB(), ELEMENT_C, Result.True));
			printTest("AB_listIterNextAddC_ACB_testContainsD", testContains(AB_listIterNextAddC_ACB(), ELEMENT_D, Result.False));
			printTest("AB_listIterNextAddC_ACB_testIsEmpty", testIsEmpty(AB_listIterNextAddC_ACB(), Result.False));
			printTest("AB_listIterNextAddC_ACB_testSize", testSize(AB_listIterNextAddC_ACB(), 3));
			printTest("AB_listIterNextAddC_ACB_testToString", testToString(AB_listIterNextAddC_ACB(), Result.ValidString));
			printTest("AB_listIterNextAddC_ACB_testSetNeg1D", testSet(AB_listIterNextAddC_ACB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testSet0D", testSet(AB_listIterNextAddC_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testSet1D", testSet(AB_listIterNextAddC_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testSet2D", testSet(AB_listIterNextAddC_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testSet3D", testSet(AB_listIterNextAddC_ACB(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testGetNeg1", testGet(AB_listIterNextAddC_ACB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testGet0", testGet(AB_listIterNextAddC_ACB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testGet1", testGet(AB_listIterNextAddC_ACB(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testGet2", testGet(AB_listIterNextAddC_ACB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testGet3", testGet(AB_listIterNextAddC_ACB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testIndexOfA", testIndexOf(AB_listIterNextAddC_ACB(), ELEMENT_A, 0));
			printTest("AB_listIterNextAddC_ACB_testIndexOfB", testIndexOf(AB_listIterNextAddC_ACB(), ELEMENT_B, 2));
			printTest("AB_listIterNextAddC_ACB_testIndexOfC", testIndexOf(AB_listIterNextAddC_ACB(), ELEMENT_C, 1));
			printTest("AB_listIterNextAddC_ACB_testIndexOfD", testIndexOf(AB_listIterNextAddC_ACB(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_listIterNextAddC_ACB_testIter", testIter(AB_listIterNextAddC_ACB(), Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testIterHasNext", testIterHasNext(AB_listIterNextAddC_ACB().iterator(), Result.True));
			printTest("AB_listIterNextAddC_ACB_testIterNext", testIterNext(AB_listIterNextAddC_ACB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testIterRemove", testIterRemove(AB_listIterNextAddC_ACB().iterator(), Result.IllegalState));
			printTest("AB_listIterNextAddC_ACB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterNextAddC_ACB(), 1), Result.True));
			printTest("AB_listIterNextAddC_ACB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_listIterNextAddC_ACB(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterNextAddC_ACB(), 1), Result.NoException));
			printTest("AB_listIterNextAddC_ACB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterNextAddC_ACB(), 1)), Result.True));
			printTest("AB_listIterNextAddC_ACB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterNextAddC_ACB(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterNextAddC_ACB(), 1)), Result.IllegalState));
			printTest("AB_listIterNextAddC_ACB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterNextAddC_ACB(), 2), Result.True));
			printTest("AB_listIterNextAddC_ACB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_listIterNextAddC_ACB(), 2), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterNextAddC_ACB(), 2), Result.NoException));
			printTest("AB_listIterNextAddC_ACB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterNextAddC_ACB(), 3)), Result.False));
			printTest("AB_listIterNextAddC_ACB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterNextAddC_ACB(), 3)), null, Result.NoSuchElement));
			printTest("AB_listIterNextAddC_ACB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterNextAddC_ACB(), 3)), Result.IllegalState));
			// List Iterator
			printTest("AB_listIterNextAddC_ACB_testListIter", testListIter(AB_listIterNextAddC_ACB(), Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIter", testListIter(AB_listIterNextAddC_ACB(), 0, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterHas0Prev", testListIterHasPrev(AB_listIterNextAddC_ACB(), 0, Result.False));
			printTest("AB_listIterNextAddC_ACB_testListIterHas1Prev", testListIterHasPrev(AB_listIterNextAddC_ACB(), 1, Result.True));
			printTest("AB_listIterNextAddC_ACB_testListIterHas2Prev", testListIterHasPrev(AB_listIterNextAddC_ACB(), 2, Result.True));
			printTest("AB_listIterNextAddC_ACB_testListIterHas3Prev", testListIterHasPrev(AB_listIterNextAddC_ACB(), 3, Result.True));
			printTest("AB_listIterNextAddC_ACB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterNextAddC_ACB_testListIter1Prev1", testListIterPrev(AB_listIterNextAddC_ACB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testListIter2Prev2", testListIterPrev(AB_listIterNextAddC_ACB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testListIter2Prev1", testListIterPrev(AB_listIterNextAddC_ACB(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testListIter3Prev1", testListIterPrev(AB_listIterNextAddC_ACB(), 3, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testListIter3Prev2", testListIterPrev(AB_listIterNextAddC_ACB(), 3, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testListIter3Prev3", testListIterPrev(AB_listIterNextAddC_ACB(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextAddC_ACB_testListIterAddNeg1D", testListIterAdd(AB_listIterNextAddC_ACB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testListIterAdd0D", testListIterAdd(AB_listIterNextAddC_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterAdd1D", testListIterAdd(AB_listIterNextAddC_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterAdd2D", testListIterAdd(AB_listIterNextAddC_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterAdd3D", testListIterAdd(AB_listIterNextAddC_ACB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterAdd4D", testListIterAdd(AB_listIterNextAddC_ACB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testListIterNextIndex0", testListIterNextIndex(AB_listIterNextAddC_ACB(), 0, 0));
			printTest("AB_listIterNextAddC_ACB_testListIterNextIndex1", testListIterNextIndex(AB_listIterNextAddC_ACB(), 1, 1));
			printTest("AB_listIterNextAddC_ACB_testListIterNextIndex2", testListIterNextIndex(AB_listIterNextAddC_ACB(), 2, 2));
			printTest("AB_listIterNextAddC_ACB_testListIterNextIndex3", testListIterNextIndex(AB_listIterNextAddC_ACB(), 3, 3));
			printTest("AB_listIterNextAddC_ACB_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterNextAddC_ACB(), 0, -1));
			printTest("AB_listIterNextAddC_ACB_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterNextAddC_ACB(), 1, 0));
			printTest("AB_listIterNextAddC_ACB_testListIterPreviousIndex2", testListIterPrevIndex(AB_listIterNextAddC_ACB(), 2, 1));
			printTest("AB_listIterNextAddC_ACB_testListIterPreviousIndex3", testListIterPrevIndex(AB_listIterNextAddC_ACB(), 3, 2));
			printTest("AB_listIterNextAddC_ACB_testListIterNext0AddD", testListNextAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterNext1AddD", testListNextAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterNext2AddD", testListNextAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterNext3AddD", testListNextAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterNext4AddD", testListNextAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev1Index0AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev0Index0AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev0Index1AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev1Index1AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev0Index2AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev1Index2AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev2Index2AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev0Index3AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev1Index3AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev2Index3AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev3Index3AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev0Index4AddD", testListPrevAdd(AB_listIterNextAddC_ACB(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_listIterNextAddC_ACB_testListIterNext0SetD", testListNextSet(AB_listIterNextAddC_ACB(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_listIterNextAddC_ACB_testListIterNext1SetD", testListNextSet(AB_listIterNextAddC_ACB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterNext2SetD", testListNextSet(AB_listIterNextAddC_ACB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterNext3SetD", testListNextSet(AB_listIterNextAddC_ACB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterNext4SetD", testListNextSet(AB_listIterNextAddC_ACB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev0SetD", testListPrevSet(AB_listIterNextAddC_ACB(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev1SetD", testListPrevSet(AB_listIterNextAddC_ACB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev2SetD", testListPrevSet(AB_listIterNextAddC_ACB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_listIterNextAddC_ACB_testListIterPrev3SetD", testListPrevSet(AB_listIterNextAddC_ACB(), ELEMENT_D, 3, 3, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterNextAddC_ACB");
			e.printStackTrace();
		}
	}
	
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> lit.next() -> lit.next() -> lit.add(C) -> [A,B,C]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B] --> lit.next() -> lit.next() -> lit.add(C) -> [A,B,C] 
	 * @return [A,C,B] after listIterNextNextAddC
	 */
	private IndexedUnsortedList<Integer> AB_listIterNextNextAddC_ABC(){
		IndexedUnsortedList<Integer> list = A_listIterNextAddB_AB(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.next();
		lit.add(ELEMENT_C);
		
		return list;
	}
	
	private void test_AB_listIterNextNextAddC_ABC() {
		System.out.println("\nSCENARIO: [A,B] -> lit.next() -> lit.next() -> lit.add(C) -> [A,B,C] \n");
		try {
			// IndexedUnsortedList
			printTest("AB_listIterNextNextAddC_ABC_testAddToFrontD", testAddToFront(AB_listIterNextNextAddC_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testAddToRearD", testAddToRear(AB_listIterNextNextAddC_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testAddAfterAD", testAddAfter(AB_listIterNextNextAddC_ABC(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testAddAfterBD", testAddAfter(AB_listIterNextNextAddC_ABC(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testAddAfterCD", testAddAfter(AB_listIterNextNextAddC_ABC(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testAddAfterDD", testAddAfter(AB_listIterNextNextAddC_ABC(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_listIterNextNextAddC_ABC_testAddAtIndexNeg1D", testAddAtIndex(AB_listIterNextNextAddC_ABC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testAddAtIndex0D", testAddAtIndex(AB_listIterNextNextAddC_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testAddAtIndex1D", testAddAtIndex(AB_listIterNextNextAddC_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testAddAtIndex2D", testAddAtIndex(AB_listIterNextNextAddC_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testAddAtIndex3D", testAddAtIndex(AB_listIterNextNextAddC_ABC(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testAddAtIndex3D", testAddAtIndex(AB_listIterNextNextAddC_ABC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testAddC", testAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testRemoveFirst", testRemoveFirst(AB_listIterNextNextAddC_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testRemoveLast", testRemoveLast(AB_listIterNextNextAddC_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testRemoveA", testRemoveElement(AB_listIterNextNextAddC_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testRemoveB", testRemoveElement(AB_listIterNextNextAddC_ABC(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testRemoveC", testRemoveElement(AB_listIterNextNextAddC_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testRemoveD", testRemoveElement(AB_listIterNextNextAddC_ABC(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_listIterNextNextAddC_ABC_testRemoveNeg1", testRemoveIndex(AB_listIterNextNextAddC_ABC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testRemove0", testRemoveIndex(AB_listIterNextNextAddC_ABC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testRemove1", testRemoveIndex(AB_listIterNextNextAddC_ABC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testRemove2", testRemoveIndex(AB_listIterNextNextAddC_ABC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testRemove3", testRemoveIndex(AB_listIterNextNextAddC_ABC(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testFirst", testFirst(AB_listIterNextNextAddC_ABC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testLast", testLast(AB_listIterNextNextAddC_ABC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testContainsA", testContains(AB_listIterNextNextAddC_ABC(), ELEMENT_A, Result.True));
			printTest("AB_listIterNextNextAddC_ABC_testContainsB", testContains(AB_listIterNextNextAddC_ABC(), ELEMENT_B, Result.True));
			printTest("AB_listIterNextNextAddC_ABC_testContainsC", testContains(AB_listIterNextNextAddC_ABC(), ELEMENT_C, Result.True));
			printTest("AB_listIterNextNextAddC_ABC_testContainsC", testContains(AB_listIterNextNextAddC_ABC(), ELEMENT_D, Result.False));
			printTest("AB_listIterNextNextAddC_ABC_testIsEmpty", testIsEmpty(AB_listIterNextNextAddC_ABC(), Result.False));
			printTest("AB_listIterNextNextAddC_ABC_testSize", testSize(AB_listIterNextNextAddC_ABC(), 3));
			printTest("AB_listIterNextNextAddC_ABC_testToString", testToString(AB_listIterNextNextAddC_ABC(), Result.ValidString));
			printTest("AB_listIterNextNextAddC_ABC_testSetNeg1D", testSet(AB_listIterNextNextAddC_ABC(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testSet0D", testSet(AB_listIterNextNextAddC_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testSet1D", testSet(AB_listIterNextNextAddC_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testSet2D", testSet(AB_listIterNextNextAddC_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testSet3D", testSet(AB_listIterNextNextAddC_ABC(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testGetNeg1", testGet(AB_listIterNextNextAddC_ABC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testGet0", testGet(AB_listIterNextNextAddC_ABC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testGet1", testGet(AB_listIterNextNextAddC_ABC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testGet2", testGet(AB_listIterNextNextAddC_ABC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testGet3", testGet(AB_listIterNextNextAddC_ABC(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testIndexOfA", testIndexOf(AB_listIterNextNextAddC_ABC(), ELEMENT_A, 0));
			printTest("AB_listIterNextNextAddC_ABC_testIndexOfB", testIndexOf(AB_listIterNextNextAddC_ABC(), ELEMENT_B, 1));
			printTest("AB_listIterNextNextAddC_ABC_testIndexOfC", testIndexOf(AB_listIterNextNextAddC_ABC(), ELEMENT_C, 2));
			printTest("AB_listIterNextNextAddC_ABC_testIndexOfD", testIndexOf(AB_listIterNextNextAddC_ABC(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_listIterNextNextAddC_ABC_testIter", testIter(AB_listIterNextNextAddC_ABC(), Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testIterHasNext", testIterHasNext(AB_listIterNextNextAddC_ABC().iterator(), Result.True));
			printTest("AB_listIterNextNextAddC_ABC_testIterNext", testIterNext(AB_listIterNextNextAddC_ABC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testIterRemove", testIterRemove(AB_listIterNextNextAddC_ABC().iterator(), Result.IllegalState));
			printTest("AB_listIterNextNextAddC_ABC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterNextNextAddC_ABC(), 1), Result.True));
			printTest("AB_listIterNextNextAddC_ABC_iterNext_testIterNext", testIterNext(iterAfterNext(AB_listIterNextNextAddC_ABC(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterNextNextAddC_ABC(), 1), Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterNextNextAddC_ABC(), 1)), Result.True));
			printTest("AB_listIterNextNextAddC_ABC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterNextNextAddC_ABC(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterNextNextAddC_ABC(), 1)), Result.IllegalState));
			printTest("AB_listIterNextNextAddC_ABC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterNextNextAddC_ABC(), 2), Result.True));
			printTest("AB_listIterNextNextAddC_ABC_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_listIterNextNextAddC_ABC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterNextNextAddC_ABC(), 2), Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterNextNextAddC_ABC(), 3)), Result.False));
			printTest("AB_listIterNextNextAddC_ABC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterNextNextAddC_ABC(), 3)), null, Result.NoSuchElement));
			printTest("AB_listIterNextNextAddC_ABC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterNextNextAddC_ABC(), 3)), Result.IllegalState));
			// ListIterator
			printTest("AB_listIterNextNextAddC_ABC_testListIter", testListIter(AB_listIterNextNextAddC_ABC(), Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIter", testListIter(AB_listIterNextNextAddC_ABC(), 0, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterHas0Prev", testListIterHasPrev(AB_listIterNextNextAddC_ABC(), 0, Result.False));
			printTest("AB_listIterNextNextAddC_ABC_testListIterHas1Prev", testListIterHasPrev(AB_listIterNextNextAddC_ABC(), 1, Result.True));
			printTest("AB_listIterNextNextAddC_ABC_testListIterHas2Prev", testListIterHasPrev(AB_listIterNextNextAddC_ABC(), 2, Result.True));
			printTest("AB_listIterNextNextAddC_ABC_testListIterHas3Prev", testListIterHasPrev(AB_listIterNextNextAddC_ABC(), 3, Result.True));
			printTest("AB_listIterNextNextAddC_ABC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterNextNextAddC_ABC_testListIter1Prev1", testListIterPrev(AB_listIterNextNextAddC_ABC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testListIter2Prev2", testListIterPrev(AB_listIterNextNextAddC_ABC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testListIter2Prev1", testListIterPrev(AB_listIterNextNextAddC_ABC(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testListIter3Prev1", testListIterPrev(AB_listIterNextNextAddC_ABC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testListIter3Prev2", testListIterPrev(AB_listIterNextNextAddC_ABC(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testListIter3Prev3", testListIterPrev(AB_listIterNextNextAddC_ABC(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextAddC_ABC_testListIterAddNeg1D", testListIterAdd(AB_listIterNextNextAddC_ABC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testListIterAdd0D", testListIterAdd(AB_listIterNextNextAddC_ABC(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterAdd1D", testListIterAdd(AB_listIterNextNextAddC_ABC(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterAdd2D", testListIterAdd(AB_listIterNextNextAddC_ABC(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterAdd3D", testListIterAdd(AB_listIterNextNextAddC_ABC(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterAdd4D", testListIterAdd(AB_listIterNextNextAddC_ABC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNextIndex0", testListIterNextIndex(AB_listIterNextNextAddC_ABC(), 0, 0));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNextIndex1", testListIterNextIndex(AB_listIterNextNextAddC_ABC(), 1, 1));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNextIndex2", testListIterNextIndex(AB_listIterNextNextAddC_ABC(), 2, 2));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNextIndex3", testListIterNextIndex(AB_listIterNextNextAddC_ABC(), 3, 3));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterNextNextAddC_ABC(), 0, -1));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterNextNextAddC_ABC(), 1, 0));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPreviousIndex2", testListIterPrevIndex(AB_listIterNextNextAddC_ABC(), 2, 1));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPreviousIndex3", testListIterPrevIndex(AB_listIterNextNextAddC_ABC(), 3, 2));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNext0AddD", testListNextAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNext1AddD", testListNextAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNext2AddD", testListNextAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNext3AddD", testListNextAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNext4AddD", testListNextAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev1Index0AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev0Index0AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev0Index1AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev1Index1AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev0Index2AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev1Index2AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev2Index2AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev0Index3AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev1Index3AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev2Index3AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev3Index3AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev0Index4AddD", testListPrevAdd(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNext0SetD", testListNextSet(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNext1SetD", testListNextSet(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNext2SetD", testListNextSet(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNext3SetD", testListNextSet(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterNext4SetD", testListNextSet(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev0SetD", testListPrevSet(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev1SetD", testListPrevSet(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev2SetD", testListPrevSet(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_listIterNextNextAddC_ABC_testListIterPrev3SetD", testListPrevSet(AB_listIterNextNextAddC_ABC(), ELEMENT_D, 3, 3, Result.NoException));
			
		
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterNextNextAddC_ABC");
			e.printStackTrace();
		}
	}
	
		
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> lit.prev() -> lit.prev() -> lit.add(C) -> [C,A,B]
	////////////////////////////////////////////////
	
		
	/** Scenario: [A,B] -> listIterPrevPrevAddC -> [C,A,B] 
	 * @return [C,A,B] after listIterPrevPrevAddC
	 */
	private IndexedUnsortedList<Integer> AB_listIterPrevPrevAddC_CAB(){
		IndexedUnsortedList<Integer> list = A_listIterNextAddB_AB(); 
		ListIterator<Integer> lit = list.listIterator(2);
		lit.previous();
		lit.previous();
		lit.add(ELEMENT_C);
		
		return list;
	}
	
	private void test_AB_listIterPrevPrevAddC_CAB() {
		System.out.println("\nSCENARIO: [A,B] -> lit.prev() -> lit.prev() -> lit.add(C) -> [C,A,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_listIterPrevPrevAddC_CAB_testAddToFrontD", testAddToFront(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddToRearD", testAddToRear(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddAfterAD", testAddAfter(AB_listIterPrevPrevAddC_CAB(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddAfterBD", testAddAfter(AB_listIterPrevPrevAddC_CAB(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddAfterCD", testAddAfter(AB_listIterPrevPrevAddC_CAB(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddAfterDD", testAddAfter(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddAtIndexNeg1D", testAddAtIndex(AB_listIterPrevPrevAddC_CAB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddAtIndex0C", testAddAtIndex(AB_listIterPrevPrevAddC_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddAtIndex1D", testAddAtIndex(AB_listIterPrevPrevAddC_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddAtIndex2D", testAddAtIndex(AB_listIterPrevPrevAddC_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddAtIndex3D", testAddAtIndex(AB_listIterPrevPrevAddC_CAB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddAtIndex3D", testAddAtIndex(AB_listIterPrevPrevAddC_CAB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testAddC", testAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemoveFirst", testRemoveFirst(AB_listIterPrevPrevAddC_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemoveLast", testRemoveLast(AB_listIterPrevPrevAddC_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemoveA", testRemoveElement(AB_listIterPrevPrevAddC_CAB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemoveB", testRemoveElement(AB_listIterPrevPrevAddC_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemoveB", testRemoveElement(AB_listIterPrevPrevAddC_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemoveC", testRemoveElement(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemoveNeg1", testRemoveIndex(AB_listIterPrevPrevAddC_CAB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemove0", testRemoveIndex(AB_listIterPrevPrevAddC_CAB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemove1", testRemoveIndex(AB_listIterPrevPrevAddC_CAB(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemove2", testRemoveIndex(AB_listIterPrevPrevAddC_CAB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testRemove3", testRemoveIndex(AB_listIterPrevPrevAddC_CAB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testFirst", testFirst(AB_listIterPrevPrevAddC_CAB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testLast", testLast(AB_listIterPrevPrevAddC_CAB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testContainsA", testContains(AB_listIterPrevPrevAddC_CAB(), ELEMENT_A, Result.True));
			printTest("AB_listIterPrevPrevAddC_CAB_testContainsB", testContains(AB_listIterPrevPrevAddC_CAB(), ELEMENT_B, Result.True));
			printTest("AB_listIterPrevPrevAddC_CAB_testContainsC", testContains(AB_listIterPrevPrevAddC_CAB(), ELEMENT_C, Result.True));
			printTest("AB_listIterPrevPrevAddC_CAB_testContainsC", testContains(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, Result.False));
			printTest("AB_listIterPrevPrevAddC_CAB_testIsEmpty", testIsEmpty(AB_listIterPrevPrevAddC_CAB(), Result.False));
			printTest("AB_listIterPrevPrevAddC_CAB_testSize", testSize(AB_listIterPrevPrevAddC_CAB(), 3));
			printTest("AB_listIterPrevPrevAddC_CAB_testToString", testToString(AB_listIterPrevPrevAddC_CAB(), Result.ValidString));
			printTest("AB_listIterPrevPrevAddC_CAB_testSetNeg1D", testSet(AB_listIterPrevPrevAddC_CAB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testSet0D", testSet(AB_listIterPrevPrevAddC_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testSet1D", testSet(AB_listIterPrevPrevAddC_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testSet2D", testSet(AB_listIterPrevPrevAddC_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testSet3D", testSet(AB_listIterPrevPrevAddC_CAB(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testGetNeg1", testGet(AB_listIterPrevPrevAddC_CAB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testGet0", testGet(AB_listIterPrevPrevAddC_CAB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testGet1", testGet(AB_listIterPrevPrevAddC_CAB(), 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testGet2", testGet(AB_listIterPrevPrevAddC_CAB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testGet3", testGet(AB_listIterPrevPrevAddC_CAB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testIndexOfA", testIndexOf(AB_listIterPrevPrevAddC_CAB(), ELEMENT_A, 1));
			printTest("AB_listIterPrevPrevAddC_CAB_testIndexOfB", testIndexOf(AB_listIterPrevPrevAddC_CAB(), ELEMENT_B, 2));
			printTest("AB_listIterPrevPrevAddC_CAB_testIndexOfC", testIndexOf(AB_listIterPrevPrevAddC_CAB(), ELEMENT_C, 0));
			printTest("AB_listIterPrevPrevAddC_CAB_testIndexOfD", testIndexOf(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_listIterPrevPrevAddC_CAB_testIter", testIter(AB_listIterPrevPrevAddC_CAB(), Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testIterHasNext", testIterHasNext(AB_listIterPrevPrevAddC_CAB().iterator(), Result.True));
			printTest("AB_listIterPrevPrevAddC_CAB_testIterNext", testIterNext(AB_listIterPrevPrevAddC_CAB().iterator(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testIterRemove", testIterRemove(AB_listIterPrevPrevAddC_CAB().iterator(), Result.IllegalState));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 1), Result.True));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 1), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 1), Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 1)), Result.True));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 1)), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 1)), Result.IllegalState));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 2), Result.True));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 2), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 2), Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 3)), Result.False));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 3)), null, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevAddC_CAB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevAddC_CAB(), 3)), Result.IllegalState));
			// List Iterator
			printTest("AB_listIterPrevPrevAddC_CAB_testListIter", testListIter(AB_listIterPrevPrevAddC_CAB(), Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIter", testListIter(AB_listIterPrevPrevAddC_CAB(), 0, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterHas0Prev", testListIterHasPrev(AB_listIterPrevPrevAddC_CAB(), 0, Result.False));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterHas1Prev", testListIterHasPrev(AB_listIterPrevPrevAddC_CAB(), 1, Result.True));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterHas2Prev", testListIterHasPrev(AB_listIterPrevPrevAddC_CAB(), 2, Result.True));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterHas3Prev", testListIterHasPrev(AB_listIterPrevPrevAddC_CAB(), 3, Result.True));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIter1Prev1", testListIterPrev(AB_listIterPrevPrevAddC_CAB(), 1, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIter2Prev2", testListIterPrev(AB_listIterPrevPrevAddC_CAB(), 2, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIter2Prev1", testListIterPrev(AB_listIterPrevPrevAddC_CAB(), 2, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIter3Prev1", testListIterPrev(AB_listIterPrevPrevAddC_CAB(), 3, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIter3Prev2", testListIterPrev(AB_listIterPrevPrevAddC_CAB(), 3, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIter3Prev3", testListIterPrev(AB_listIterPrevPrevAddC_CAB(), 3, 3, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterAddNeg1D", testListIterAdd(AB_listIterPrevPrevAddC_CAB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterAdd0D", testListIterAdd(AB_listIterPrevPrevAddC_CAB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterAdd1D", testListIterAdd(AB_listIterPrevPrevAddC_CAB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterAdd2D", testListIterAdd(AB_listIterPrevPrevAddC_CAB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterAdd3D", testListIterAdd(AB_listIterPrevPrevAddC_CAB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterAdd4D", testListIterAdd(AB_listIterPrevPrevAddC_CAB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNextIndex0", testListIterNextIndex(AB_listIterPrevPrevAddC_CAB(), 0, 0));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNextIndex1", testListIterNextIndex(AB_listIterPrevPrevAddC_CAB(), 1, 1));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNextIndex2", testListIterNextIndex(AB_listIterPrevPrevAddC_CAB(), 2, 2));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNextIndex3", testListIterNextIndex(AB_listIterPrevPrevAddC_CAB(), 3, 3));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterPrevPrevAddC_CAB(), 0, -1));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterPrevPrevAddC_CAB(), 1, 0));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPreviousIndex2", testListIterPrevIndex(AB_listIterPrevPrevAddC_CAB(), 2, 1));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPreviousIndex3", testListIterPrevIndex(AB_listIterPrevPrevAddC_CAB(), 3, 2));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNext0AddD", testListNextAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNext1AddD", testListNextAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNext2AddD", testListNextAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNext3AddD", testListNextAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNext4AddD", testListNextAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev1Index0AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev0Index0AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev0Index1AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev1Index1AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev0Index2AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev1Index2AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev2Index2AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev0Index3AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev1Index3AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev2Index3AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev3Index3AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev0Index4AddD", testListPrevAdd(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNext0SetD", testListNextSet(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNext1SetD", testListNextSet(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNext2SetD", testListNextSet(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNext3SetD", testListNextSet(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterNext4SetD", testListNextSet(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev0SetD", testListPrevSet(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev1SetD", testListPrevSet(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev2SetD", testListPrevSet(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_listIterPrevPrevAddC_CAB_testListIterPrev3SetD", testListPrevSet(AB_listIterPrevPrevAddC_CAB(), ELEMENT_D, 3, 3, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterPrevPrevAddC_CAB");
			e.printStackTrace();
		}
	}
	

	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> lit.prev() -> lit.add(C) -> [A,C,B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B] -> listIterPrevAddC -> [A,C,B] 
	 * @return [A,C,B] after listIterPrevAddC
	 */
	private IndexedUnsortedList<Integer> AB_listIterPrevAddC_ACB(){
		IndexedUnsortedList<Integer> list = A_listIterNextAddB_AB(); 
		ListIterator<Integer> lit = list.listIterator(2);
		lit.previous();
		lit.add(ELEMENT_C);
		
		return list;
	}
	
	private void test_AB_listIterPrevAddC_ACB() {
		System.out.println("\nSCENARIO: [A,B] -> listIterPrev->listIterAddC -> [A,C,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_listIterPrevAddC_ACB_testAddToFrontD", testAddToFront(AB_listIterPrevAddC_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testAddToRearD", testAddToRear(AB_listIterPrevAddC_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testAddAfterAD", testAddAfter(AB_listIterPrevAddC_ACB(), ELEMENT_A, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testAddAfterBD", testAddAfter(AB_listIterPrevAddC_ACB(), ELEMENT_B, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testAddAfterCD", testAddAfter(AB_listIterPrevAddC_ACB(), ELEMENT_C, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testAddAfterDD", testAddAfter(AB_listIterPrevAddC_ACB(), ELEMENT_D, ELEMENT_D, Result.NoSuchElement));
			printTest("AB_listIterPrevAddC_ACB_testAddAtIndexNeg1D", testAddAtIndex(AB_listIterPrevAddC_ACB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testAddAtIndex0D", testAddAtIndex(AB_listIterPrevAddC_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testAddAtIndex1D", testAddAtIndex(AB_listIterPrevAddC_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testAddAtIndex2D", testAddAtIndex(AB_listIterPrevAddC_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testAddAtIndex3D", testAddAtIndex(AB_listIterPrevAddC_ACB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testAddAtIndex4D", testAddAtIndex(AB_listIterPrevAddC_ACB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testAddD", testAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testRemoveFirst", testRemoveFirst(AB_listIterPrevAddC_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testRemoveLast", testRemoveLast(AB_listIterPrevAddC_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testRemoveA", testRemoveElement(AB_listIterPrevAddC_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testRemoveB", testRemoveElement(AB_listIterPrevAddC_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testRemoveB", testRemoveElement(AB_listIterPrevAddC_ACB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testRemoveC", testRemoveElement(AB_listIterPrevAddC_ACB(), ELEMENT_D, Result.NoSuchElement));
			printTest("AB_listIterPrevAddC_ACB_testRemoveNeg1", testRemoveIndex(AB_listIterPrevAddC_ACB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testRemove0", testRemoveIndex(AB_listIterPrevAddC_ACB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testRemove1", testRemoveIndex(AB_listIterPrevAddC_ACB(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testRemove2", testRemoveIndex(AB_listIterPrevAddC_ACB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testRemove3", testRemoveIndex(AB_listIterPrevAddC_ACB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testFirst", testFirst(AB_listIterPrevAddC_ACB(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testLast", testLast(AB_listIterPrevAddC_ACB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testContainsA", testContains(AB_listIterPrevAddC_ACB(), ELEMENT_A, Result.True));
			printTest("AB_listIterPrevAddC_ACB_testContainsB", testContains(AB_listIterPrevAddC_ACB(), ELEMENT_B, Result.True));
			printTest("AB_listIterPrevAddC_ACB_testContainsC", testContains(AB_listIterPrevAddC_ACB(), ELEMENT_C, Result.True));
			printTest("AB_listIterPrevAddC_ACB_testContainsD", testContains(AB_listIterPrevAddC_ACB(), ELEMENT_D, Result.False));
			printTest("AB_listIterPrevAddC_ACB_testIsEmpty", testIsEmpty(AB_listIterPrevAddC_ACB(), Result.False));
			printTest("AB_listIterPrevAddC_ACB_testSize", testSize(AB_listIterPrevAddC_ACB(), 3));
			printTest("AB_listIterPrevAddC_ACB_testToString", testToString(AB_listIterPrevAddC_ACB(), Result.ValidString));
			printTest("AB_listIterPrevAddC_ACB_testSetNeg1D", testSet(AB_listIterPrevAddC_ACB(), -1, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testSet0D", testSet(AB_listIterPrevAddC_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testSet1D", testSet(AB_listIterPrevAddC_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testSet2D", testSet(AB_listIterPrevAddC_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testSet3D", testSet(AB_listIterPrevAddC_ACB(), 3, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testGetNeg1", testGet(AB_listIterPrevAddC_ACB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testGet0", testGet(AB_listIterPrevAddC_ACB(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testGet1", testGet(AB_listIterPrevAddC_ACB(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testGet2", testGet(AB_listIterPrevAddC_ACB(), 2, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testGet3", testGet(AB_listIterPrevAddC_ACB(), 3, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testIndexOfA", testIndexOf(AB_listIterPrevAddC_ACB(), ELEMENT_A, 0));
			printTest("AB_listIterPrevAddC_ACB_testIndexOfB", testIndexOf(AB_listIterPrevAddC_ACB(), ELEMENT_B, 2));
			printTest("AB_listIterPrevAddC_ACB_testIndexOfC", testIndexOf(AB_listIterPrevAddC_ACB(), ELEMENT_C, 1));
			printTest("AB_listIterPrevAddC_ACB_testIndexOfD", testIndexOf(AB_listIterPrevAddC_ACB(), ELEMENT_D, -1));
			// Iterator
			printTest("AB_listIterPrevAddC_ACB_testIter", testIter(AB_listIterPrevAddC_ACB(), Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testIterHasNext", testIterHasNext(AB_listIterPrevAddC_ACB().iterator(), Result.True));
			printTest("AB_listIterPrevAddC_ACB_testIterNext", testIterNext(AB_listIterPrevAddC_ACB().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testIterRemove", testIterRemove(AB_listIterPrevAddC_ACB().iterator(), Result.IllegalState));
			printTest("AB_listIterPrevAddC_ACB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterPrevAddC_ACB(), 1), Result.True));
			printTest("AB_listIterPrevAddC_ACB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_listIterPrevAddC_ACB(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterPrevAddC_ACB(), 1), Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterPrevAddC_ACB(), 1)), Result.True));
			printTest("AB_listIterPrevAddC_ACB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterPrevAddC_ACB(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterPrevAddC_ACB(), 1)), Result.IllegalState));
			printTest("AB_listIterPrevAddC_ACB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterPrevAddC_ACB(), 2), Result.True));
			printTest("AB_listIterPrevAddC_ACB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_listIterPrevAddC_ACB(), 2), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterPrevAddC_ACB(), 2), Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterPrevAddC_ACB(), 3)), Result.False));
			printTest("AB_listIterPrevAddC_ACB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterPrevAddC_ACB(), 3)), null, Result.NoSuchElement));
			printTest("AB_listIterPrevAddC_ACB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterPrevAddC_ACB(), 3)), Result.IllegalState));
			// List Iterator
			printTest("AB_listIterPrevAddC_ACB_testListIter", testListIter(AB_listIterPrevAddC_ACB(), Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIter", testListIter(AB_listIterPrevAddC_ACB(), 0, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterHas0Prev", testListIterHasPrev(AB_listIterPrevAddC_ACB(), 0, Result.False));
			printTest("AB_listIterPrevAddC_ACB_testListIterHas1Prev", testListIterHasPrev(AB_listIterPrevAddC_ACB(), 1, Result.True));
			printTest("AB_listIterPrevAddC_ACB_testListIterHas2Prev", testListIterHasPrev(AB_listIterPrevAddC_ACB(), 2, Result.True));
			printTest("AB_listIterPrevAddC_ACB_testListIterHas3Prev", testListIterHasPrev(AB_listIterPrevAddC_ACB(), 3, Result.True));
			printTest("AB_listIterPrevAddC_ACB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterPrevAddC_ACB_testListIter1Prev1", testListIterPrev(AB_listIterPrevAddC_ACB(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testListIter2Prev2", testListIterPrev(AB_listIterPrevAddC_ACB(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testListIter2Prev1", testListIterPrev(AB_listIterPrevAddC_ACB(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testListIter3Prev1", testListIterPrev(AB_listIterPrevAddC_ACB(), 3, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testListIter3Prev2", testListIterPrev(AB_listIterPrevAddC_ACB(), 3, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testListIter3Prev3", testListIterPrev(AB_listIterPrevAddC_ACB(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevAddC_ACB_testListIterAddNeg1D", testListIterAdd(AB_listIterPrevAddC_ACB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testListIterAdd0D", testListIterAdd(AB_listIterPrevAddC_ACB(), 0, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterAdd1D", testListIterAdd(AB_listIterPrevAddC_ACB(), 1, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterAdd2D", testListIterAdd(AB_listIterPrevAddC_ACB(), 2, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterAdd3D", testListIterAdd(AB_listIterPrevAddC_ACB(), 3, ELEMENT_D, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterAdd4D", testListIterAdd(AB_listIterPrevAddC_ACB(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testListIterNextIndex0", testListIterNextIndex(AB_listIterPrevAddC_ACB(), 0, 0));
			printTest("AB_listIterPrevAddC_ACB_testListIterNextIndex1", testListIterNextIndex(AB_listIterPrevAddC_ACB(), 1, 1));
			printTest("AB_listIterPrevAddC_ACB_testListIterNextIndex2", testListIterNextIndex(AB_listIterPrevAddC_ACB(), 2, 2));
			printTest("AB_listIterPrevAddC_ACB_testListIterNextIndex3", testListIterNextIndex(AB_listIterPrevAddC_ACB(), 3, 3));
			printTest("AB_listIterPrevAddC_ACB_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterPrevAddC_ACB(), 0, -1));
			printTest("AB_listIterPrevAddC_ACB_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterPrevAddC_ACB(), 1, 0));
			printTest("AB_listIterPrevAddC_ACB_testListIterPreviousIndex2", testListIterPrevIndex(AB_listIterPrevAddC_ACB(), 2, 1));
			printTest("AB_listIterPrevAddC_ACB_testListIterPreviousIndex3", testListIterPrevIndex(AB_listIterPrevAddC_ACB(), 3, 2));
			printTest("AB_listIterPrevAddC_ACB_testListIterNext0AddD", testListNextAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 0, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterNext1AddD", testListNextAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterNext2AddD", testListNextAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterNext3AddD", testListNextAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterNext4AddD", testListNextAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev1Index0AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev0Index0AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev0Index1AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev1Index1AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev0Index2AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev1Index2AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev2Index2AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev0Index3AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev1Index3AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev2Index3AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev3Index3AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev0Index4AddD", testListPrevAdd(AB_listIterPrevAddC_ACB(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevAddC_ACB_testListIterNext0SetD", testListNextSet(AB_listIterPrevAddC_ACB(), ELEMENT_D, 0, Result.IllegalState));
			printTest("AB_listIterPrevAddC_ACB_testListIterNext1SetD", testListNextSet(AB_listIterPrevAddC_ACB(), ELEMENT_D, 1, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterNext2SetD", testListNextSet(AB_listIterPrevAddC_ACB(), ELEMENT_D, 2, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterNext3SetD", testListNextSet(AB_listIterPrevAddC_ACB(), ELEMENT_D, 3, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterNext4SetD", testListNextSet(AB_listIterPrevAddC_ACB(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev0SetD", testListPrevSet(AB_listIterPrevAddC_ACB(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev1SetD", testListPrevSet(AB_listIterPrevAddC_ACB(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev2SetD", testListPrevSet(AB_listIterPrevAddC_ACB(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("AB_listIterPrevAddC_ACB_testListIterPrev3SetD", testListPrevSet(AB_listIterPrevAddC_ACB(), ELEMENT_D, 3, 3, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterPrevAddC_ACB");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> lit.next() -> lit.set(B) -> [B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A] -> lit.next() -> lit.set(B) -> [B]
	 * @return [B] after listIterNextSetB
	 */
	private IndexedUnsortedList<Integer> A_listIterNextSetB_B(){
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.set(ELEMENT_B);
		
		return list;
	}
	
	private void test_A_listIterNextSetB_B() {
		System.out.println("\nSCENARIO: [A] -> lit.next() -> lit.set(B) -> [B]\n");
		try {
			printTest("A_listIterNextSetB_B_testAddToFrontA", testAddToFront(A_listIterNextSetB_B(), ELEMENT_A, Result.NoException));
			printTest("A_listIterNextSetB_B_testAddToRearA", testAddToRear(A_listIterNextSetB_B(), ELEMENT_A, Result.NoException));
			printTest("A_listIterNextSetB_B_testAddAfterBA", testAddAfter(A_listIterNextSetB_B(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("A_listIterNextSetB_B_testAddAfterCA", testAddAfter(A_listIterNextSetB_B(), ELEMENT_C, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterNextSetB_B_testAddAtIndexNeg1A", testAddAtIndex(A_listIterNextSetB_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterNextSetB_B_testAddAtIndex0A", testAddAtIndex(A_listIterNextSetB_B(), 0, ELEMENT_A, Result.NoException));
			printTest("A_listIterNextSetB_B_testAddAtIndex1A", testAddAtIndex(A_listIterNextSetB_B(), 1, ELEMENT_A, Result.NoException));
			printTest("A_listIterNextSetB_B_testAddB", testAdd(A_listIterNextSetB_B(), ELEMENT_A, Result.NoException));
			printTest("A_listIterNextSetB_B_testRemoveFirst", testRemoveFirst(A_listIterNextSetB_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextSetB_B_testRemoveLast", testRemoveLast(A_listIterNextSetB_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextSetB_B_testRemoveA", testRemoveElement(A_listIterNextSetB_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextSetB_B_testRemoveB", testRemoveElement(A_listIterNextSetB_B(), ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterNextSetB_B_testRemoveNeg1", testRemoveIndex(A_listIterNextSetB_B(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterNextSetB_B_testRemove0", testRemoveIndex(A_listIterNextSetB_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextSetB_B_testRemove1", testRemoveIndex(A_listIterNextSetB_B(), 1, null, Result.IndexOutOfBounds));
			printTest("A_listIterNextSetB_B_testFirst", testFirst(A_listIterNextSetB_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextSetB_B_testLast", testLast(A_listIterNextSetB_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextSetB_B_testContainsA", testContains(A_listIterNextSetB_B(), ELEMENT_B, Result.True));
			printTest("A_listIterNextSetB_B_testContainsB", testContains(A_listIterNextSetB_B(), ELEMENT_A, Result.False));
			printTest("A_listIterNextSetB_B_testIsEmpty", testIsEmpty(A_listIterNextSetB_B(), Result.False));
			printTest("A_listIterNextSetB_B_testSize", testSize(A_listIterNextSetB_B(), 1));
			printTest("A_listIterNextSetB_B_testToString", testToString(A_listIterNextSetB_B(), Result.ValidString));			
			printTest("A_listIterNextSetB_B_testSetNeg1A", testSet(A_listIterNextSetB_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterNextSetB_B_testSet0A", testSet(A_listIterNextSetB_B(), 0, ELEMENT_A, Result.NoException));
			printTest("A_listIterNextSetB_B_testGetNeg1", testGet(A_listIterNextSetB_B(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterNextSetB_B_testGet0", testGet(A_listIterNextSetB_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextSetB_B_testIndexOfA", testIndexOf(A_listIterNextSetB_B(), ELEMENT_A, -1));
			printTest("A_listIterNextSetB_B_testIndexOfB", testIndexOf(A_listIterNextSetB_B(), ELEMENT_B, 0));
			// Iterator
			printTest("A_listIterNextSetB_B_testIter", testIter(A_listIterNextSetB_B(), Result.NoException));
			printTest("A_listIterNextSetB_B_testIterHasNext", testIterHasNext(A_listIterNextSetB_B().iterator(), Result.True));
			printTest("A_listIterNextSetB_B_testIterNext", testIterNext(A_listIterNextSetB_B().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextSetB_B_testIterRemove", testIterRemove(A_listIterNextSetB_B().iterator(), Result.IllegalState));
			printTest("A_listIterNextSetB_B_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(A_listIterNextSetB_B(), 1), Result.False));
			printTest("A_listIterNextSetB_B_iteratorNext_testIterNext", testIterNext(iterAfterNext(A_listIterNextSetB_B(), 1), null, Result.NoSuchElement));
			printTest("A_listIterNextSetB_B_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(A_listIterNextSetB_B(), 1), Result.NoException));
			printTest("A_listIterNextSetB_B_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_listIterNextSetB_B(), 1)), Result.False));
			printTest("A_listIterNextSetB_B_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_listIterNextSetB_B(), 1)), null, Result.NoSuchElement));
			printTest("A_listIterNextSetB_B_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_listIterNextSetB_B(), 1)), Result.IllegalState));
			// ListIterator
			printTest("A_listIterNextSetB_B_testListIter", testListIter(A_listIterNextSetB_B(), Result.NoException));
			printTest("A_listIterNextSetB_B_testListIter", testListIter(A_listIterNextSetB_B(), 0, Result.NoException));
			printTest("A_listIterNextSetB_B_testListIterHasPrev", testListIterHasPrev(A_listIterNextSetB_B(), 0, Result.False));
			printTest("A_listIterNextSetB_B_testListIterHasPrev", testListIterHasPrev(A_listIterNextSetB_B(), 1, Result.True));
			printTest("A_listIterNextSetB_B_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterNextSetB_B_testListIter1Prev1", testListIterPrev(A_listIterNextSetB_B(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterNextSetB_B_testListIterAddNeg1B", testListIterAdd(A_listIterNextSetB_B(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("A_listIterNextSetB_B_testListIterAdd0B", testListIterAdd(A_listIterNextSetB_B(), 0, ELEMENT_B, Result.NoException));
			printTest("A_listIterNextSetB_B_testListIterAdd1B", testListIterAdd(A_listIterNextSetB_B(), 1, ELEMENT_B, Result.NoException));
			printTest("A_listIterNextSetB_B_testListIterAdd2B", testListIterAdd(A_listIterNextSetB_B(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("A_listIterNextSetB_B_testListIterNextIndex0", testListIterNextIndex(A_listIterNextSetB_B(), 0, 0));
			printTest("A_listIterNextSetB_B_testListIterNextIndex1", testListIterNextIndex(A_listIterNextSetB_B(), 1, 1));
			printTest("A_listIterNextSetB_B_testListIterPreviousIndex0", testListIterPrevIndex(A_listIterNextSetB_B(), 0, -1));
			printTest("A_listIterNextSetB_B_testListIterPreviousIndex1", testListIterPrevIndex(A_listIterNextSetB_B(), 1, 0));
			printTest("A_listIterNextSetB_B_testListIterNext0AddB", testListNextAdd(A_listIterNextSetB_B(), ELEMENT_B, 0, Result.NoException));
			printTest("A_listIterNextSetB_B_testListIterNext1AddB", testListNextAdd(A_listIterNextSetB_B(), ELEMENT_B, 1, Result.NoException));
			printTest("A_listIterNextSetB_B_testListIterNext2AddB", testListNextAdd(A_listIterNextSetB_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("A_listIterNextSetB_B_testListIterPrev1Index0AddB", testListPrevAdd(A_listIterNextSetB_B(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("A_listIterNextSetB_B_testListIterPrev0Index0AddB", testListPrevAdd(A_listIterNextSetB_B(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("A_listIterNextSetB_B_testListIterPrev0Index1AddB", testListPrevAdd(A_listIterNextSetB_B(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("A_listIterNextSetB_B_testListIterPrev1Index1AddB", testListPrevAdd(A_listIterNextSetB_B(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("A_listIterNextSetB_B_testListIterPrev0Index2AddB", testListPrevAdd(A_listIterNextSetB_B(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("A_listIterNextSetB_B_testListIterNext0SetB", testListNextSet(A_listIterNextSetB_B(), ELEMENT_B, 0, Result.IllegalState));
			printTest("A_listIterNextSetB_B_testListIterNext1SetB", testListNextSet(A_listIterNextSetB_B(), ELEMENT_B, 1, Result.NoException));
			printTest("A_listIterNextSetB_B_testListIterNext2SetB", testListNextSet(A_listIterNextSetB_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("A_listIterNextSetB_B_testListIterPrev0SetB", testListPrevSet(A_listIterNextSetB_B(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("A_listIterNextSetB_B_testListIterPrev1SetB", testListPrevSet(A_listIterNextSetB_B(), ELEMENT_B, 1, 1, Result.NoException));
			
					
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_listIterNextSetB_B");
			e.printStackTrace();
		}
	}

	
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A] -> lit.prev() -> lit.set(B) -> [B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A] -> lit.prev() -> lit.set(B) -> [B]
	 * @return [B] after listIterPrevSetB
	 */
	private IndexedUnsortedList<Integer> A_listIterPrevSetB_B(){
		IndexedUnsortedList<Integer> list = emptyList_addToFrontA_A(); 
		ListIterator<Integer> lit = list.listIterator(1);
		lit.previous();
		lit.set(ELEMENT_B);
		
		return list;
	}
	
	private void test_A_listIterPrevSetB_B() {
		System.out.println("\nSCENARIO: [A] -> lit.prev() -> lit.set(B) -> [B]\n");
		try {
			printTest("A_listIterPrevSetB_B_testAddToFrontA", testAddToFront(A_listIterPrevSetB_B(), ELEMENT_A, Result.NoException));
			printTest("A_listIterPrevSetB_B_testAddToRearA", testAddToRear(A_listIterPrevSetB_B(), ELEMENT_A, Result.NoException));
			printTest("A_listIterPrevSetB_B_testAddAfterBA", testAddAfter(A_listIterPrevSetB_B(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("A_listIterPrevSetB_B_testAddAfterCA", testAddAfter(A_listIterPrevSetB_B(), ELEMENT_C, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterPrevSetB_B_testAddAtIndexNeg1A", testAddAtIndex(A_listIterPrevSetB_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterPrevSetB_B_testAddAtIndex0A", testAddAtIndex(A_listIterPrevSetB_B(), 0, ELEMENT_A, Result.NoException));
			printTest("A_listIterPrevSetB_B_testAddAtIndex1A", testAddAtIndex(A_listIterPrevSetB_B(), 1, ELEMENT_A, Result.NoException));
			printTest("A_listIterPrevSetB_B_testAddB", testAdd(A_listIterPrevSetB_B(), ELEMENT_A, Result.NoException));
			printTest("A_listIterPrevSetB_B_testRemoveFirst", testRemoveFirst(A_listIterPrevSetB_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevSetB_B_testRemoveLast", testRemoveLast(A_listIterPrevSetB_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevSetB_B_testRemoveA", testRemoveElement(A_listIterPrevSetB_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevSetB_B_testRemoveB", testRemoveElement(A_listIterPrevSetB_B(), ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterPrevSetB_B_testRemoveNeg1", testRemoveIndex(A_listIterPrevSetB_B(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterPrevSetB_B_testRemove0", testRemoveIndex(A_listIterPrevSetB_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevSetB_B_testRemove1", testRemoveIndex(A_listIterPrevSetB_B(), 1, null, Result.IndexOutOfBounds));
			printTest("A_listIterPrevSetB_B_testFirst", testFirst(A_listIterPrevSetB_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevSetB_B_testLast", testLast(A_listIterPrevSetB_B(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevSetB_B_testContainsA", testContains(A_listIterPrevSetB_B(), ELEMENT_B, Result.True));
			printTest("A_listIterPrevSetB_B_testContainsB", testContains(A_listIterPrevSetB_B(), ELEMENT_A, Result.False));
			printTest("A_listIterPrevSetB_B_testIsEmpty", testIsEmpty(A_listIterPrevSetB_B(), Result.False));
			printTest("A_listIterPrevSetB_B_testSize", testSize(A_listIterPrevSetB_B(), 1));
			printTest("A_listIterPrevSetB_B_testToString", testToString(A_listIterPrevSetB_B(), Result.ValidString));			
			printTest("A_listIterPrevSetB_B_testSetNeg1A", testSet(A_listIterPrevSetB_B(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("A_listIterPrevSetB_B_testSet0A", testSet(A_listIterPrevSetB_B(), 0, ELEMENT_A, Result.NoException));
			printTest("A_listIterPrevSetB_B_testGetNeg1", testGet(A_listIterPrevSetB_B(), -1, null, Result.IndexOutOfBounds));
			printTest("A_listIterPrevSetB_B_testGet0", testGet(A_listIterPrevSetB_B(), 0, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevSetB_B_testIndexOfA", testIndexOf(A_listIterPrevSetB_B(), ELEMENT_A, -1));
			printTest("A_listIterPrevSetB_B_testIndexOfB", testIndexOf(A_listIterPrevSetB_B(), ELEMENT_B, 0));
			// Iterator
			printTest("A_listIterPrevSetB_B_testIter", testIter(A_listIterPrevSetB_B(), Result.NoException));
			printTest("A_listIterPrevSetB_B_testIterHasNext", testIterHasNext(A_listIterPrevSetB_B().iterator(), Result.True));
			printTest("A_listIterPrevSetB_B_testIterNext", testIterNext(A_listIterPrevSetB_B().iterator(), ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevSetB_B_testIterRemove", testIterRemove(A_listIterPrevSetB_B().iterator(), Result.IllegalState));
			printTest("A_listIterPrevSetB_B_iteratorNext_testIterHasNext", testIterHasNext(iterAfterNext(A_listIterPrevSetB_B(), 1), Result.False));
			printTest("A_listIterPrevSetB_B_iteratorNext_testIterNext", testIterNext(iterAfterNext(A_listIterPrevSetB_B(), 1), null, Result.NoSuchElement));
			printTest("A_listIterPrevSetB_B_iteratorNext_testIterRemove", testIterRemove(iterAfterNext(A_listIterPrevSetB_B(), 1), Result.NoException));
			printTest("A_listIterPrevSetB_B_iteratorNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(A_listIterPrevSetB_B(), 1)), Result.False));
			printTest("A_listIterPrevSetB_B_iteratorNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(A_listIterPrevSetB_B(), 1)), null, Result.NoSuchElement));
			printTest("A_listIterPrevSetB_B_iteratorNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(A_listIterPrevSetB_B(), 1)), Result.IllegalState));
			// ListIterator
			printTest("A_listIterPrevSetB_B_testListIter", testListIter(A_listIterPrevSetB_B(), Result.NoException));
			printTest("A_listIterPrevSetB_B_testListIter", testListIter(A_listIterPrevSetB_B(), 0, Result.NoException));
			printTest("A_listIterPrevSetB_B_testListIterHasPrev", testListIterHasPrev(A_listIterPrevSetB_B(), 0, Result.False));
			printTest("A_listIterPrevSetB_B_testListIterHasPrev", testListIterHasPrev(A_listIterPrevSetB_B(), 1, Result.True));
			printTest("A_listIterPrevSetB_B_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("A_listIterPrevSetB_B_testListIter1Prev1", testListIterPrev(A_listIterPrevSetB_B(), 1, 1, ELEMENT_B, Result.MatchingValue));
			printTest("A_listIterPrevSetB_B_testListIterAddNeg1B", testListIterAdd(A_listIterPrevSetB_B(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("A_listIterPrevSetB_B_testListIterAdd0B", testListIterAdd(A_listIterPrevSetB_B(), 0, ELEMENT_B, Result.NoException));
			printTest("A_listIterPrevSetB_B_testListIterAdd1B", testListIterAdd(A_listIterPrevSetB_B(), 1, ELEMENT_B, Result.NoException));
			printTest("A_listIterPrevSetB_B_testListIterAdd2B", testListIterAdd(A_listIterPrevSetB_B(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("A_listIterPrevSetB_B_testListIterNextIndex0", testListIterNextIndex(A_listIterPrevSetB_B(), 0, 0));
			printTest("A_listIterPrevSetB_B_testListIterNextIndex1", testListIterNextIndex(A_listIterPrevSetB_B(), 1, 1));
			printTest("A_listIterPrevSetB_B_testListIterPreviousIndex0", testListIterPrevIndex(A_listIterPrevSetB_B(), 0, -1));
			printTest("A_listIterPrevSetB_B_testListIterPreviousIndex1", testListIterPrevIndex(A_listIterPrevSetB_B(), 1, 0));
			printTest("A_listIterPrevSetB_B_testListIterNext0AddB", testListNextAdd(A_listIterPrevSetB_B(), ELEMENT_B, 0, Result.NoException));
			printTest("A_listIterPrevSetB_B_testListIterNext1AddB", testListNextAdd(A_listIterPrevSetB_B(), ELEMENT_B, 1, Result.NoException));
			printTest("A_listIterPrevSetB_B_testListIterNext2AddB", testListNextAdd(A_listIterPrevSetB_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("A_listIterPrevSetB_B_testListIterPrev1Index0AddB", testListPrevAdd(A_listIterPrevSetB_B(), ELEMENT_B, 1, 0, Result.NoSuchElement));
			printTest("A_listIterPrevSetB_B_testListIterPrev0Index0AddB", testListPrevAdd(A_listIterPrevSetB_B(), ELEMENT_B, 0, 0, Result.NoException));
			printTest("A_listIterPrevSetB_B_testListIterPrev0Index1AddB", testListPrevAdd(A_listIterPrevSetB_B(), ELEMENT_B, 0, 1, Result.NoException));
			printTest("A_listIterPrevSetB_B_testListIterPrev1Index1AddB", testListPrevAdd(A_listIterPrevSetB_B(), ELEMENT_B, 1, 1, Result.NoException));
			printTest("A_listIterPrevSetB_B_testListIterPrev0Index2AddB", testListPrevAdd(A_listIterPrevSetB_B(), ELEMENT_B, 0, 2, Result.IndexOutOfBounds));
			printTest("A_listIterPrevSetB_B_testListIterNext0SetB", testListNextSet(A_listIterPrevSetB_B(), ELEMENT_B, 0, Result.IllegalState));
			printTest("A_listIterPrevSetB_B_testListIterNext1SetB", testListNextSet(A_listIterPrevSetB_B(), ELEMENT_B, 1, Result.NoException));
			printTest("A_listIterPrevSetB_B_testListIterNext2SetB", testListNextSet(A_listIterPrevSetB_B(), ELEMENT_B, 2, Result.NoSuchElement));
			printTest("A_listIterPrevSetB_B_testListIterPrev0SetB", testListPrevSet(A_listIterPrevSetB_B(), ELEMENT_B, 0, 0, Result.IllegalState));
			printTest("A_listIterPrevSetB_B_testListIterPrev1SetB", testListPrevSet(A_listIterPrevSetB_B(), ELEMENT_B, 1, 1, Result.NoException));
			
						
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_A_listIterPrevSetB_B");
			e.printStackTrace();
		}
	}
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A.B] -> lit.next() -> lit.set(C) -> [C,B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A.B] -> lit.next() -> lit.set(C) -> [C,B]
	 * @return [C,B] after listIterNextSetC
	 */
	private IndexedUnsortedList<Integer> AB_listIterNextSetC_CB(){
		IndexedUnsortedList<Integer> list = A_add1B_AB(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.set(ELEMENT_C);
		
		return list;
	}
	
	private void test_AB_listIterNextSetC_CB() {
		System.out.println("\nSCENARIO: [A.B] -> lit.next() -> lit.set(C) -> [C,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_listIterNextSetC_CB_testAddToFrontA", testAddToFront(AB_listIterNextSetC_CB(), ELEMENT_A, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testAddToRearA", testAddToRear(AB_listIterNextSetC_CB(), ELEMENT_A, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testAddAfterBA", testAddAfter(AB_listIterNextSetC_CB(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testAddAfterCA", testAddAfter(AB_listIterNextSetC_CB(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testAddAfterDA", testAddAfter(AB_listIterNextSetC_CB(), ELEMENT_D, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterNextSetC_CB_testAddAtIndexNeg1A", testAddAtIndex(AB_listIterNextSetC_CB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testAddAtIndex0A", testAddAtIndex(AB_listIterNextSetC_CB(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testAddAtIndex1A", testAddAtIndex(AB_listIterNextSetC_CB(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testAddAtIndex2A", testAddAtIndex(AB_listIterNextSetC_CB(), 2, ELEMENT_A, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testAddAtIndex3A", testAddAtIndex(AB_listIterNextSetC_CB(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testAddC", testAdd(AB_listIterNextSetC_CB(), ELEMENT_C, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testRemoveFirst", testRemoveFirst(AB_listIterNextSetC_CB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testRemoveLast", testRemoveLast(AB_listIterNextSetC_CB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testRemoveA", testRemoveElement(AB_listIterNextSetC_CB(), ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterNextSetC_CB_testRemoveB", testRemoveElement(AB_listIterNextSetC_CB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testRemoveC", testRemoveElement(AB_listIterNextSetC_CB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testRemoveNeg1", testRemoveIndex(AB_listIterNextSetC_CB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testRemove0", testRemoveIndex(AB_listIterNextSetC_CB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testRemove1", testRemoveIndex(AB_listIterNextSetC_CB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testRemove2", testRemoveIndex(AB_listIterNextSetC_CB(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testFirst", testFirst(AB_listIterNextSetC_CB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testLast", testLast(AB_listIterNextSetC_CB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testContainsA", testContains(AB_listIterNextSetC_CB(), ELEMENT_A, Result.False));
			printTest("AB_listIterNextSetC_CB_testContainsB", testContains(AB_listIterNextSetC_CB(), ELEMENT_B, Result.True));
			printTest("AB_listIterNextSetC_CB_testContainsC", testContains(AB_listIterNextSetC_CB(), ELEMENT_C, Result.True));
			printTest("AB_listIterNextSetC_CB_testIsEmpty", testIsEmpty(AB_listIterNextSetC_CB(), Result.False));
			printTest("AB_listIterNextSetC_CB_testSize", testSize(AB_listIterNextSetC_CB(), 2));
			printTest("AB_listIterNextSetC_CB_testToString", testToString(AB_listIterNextSetC_CB(), Result.ValidString));
			printTest("AB_listIterNextSetC_CB_testSetNeg1A", testSet(AB_listIterNextSetC_CB(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testSet0A", testSet(AB_listIterNextSetC_CB(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testSet1A", testSet(AB_listIterNextSetC_CB(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testSet2A", testSet(AB_listIterNextSetC_CB(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testGetNeg1", testGet(AB_listIterNextSetC_CB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testGet0", testGet(AB_listIterNextSetC_CB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testGet1", testGet(AB_listIterNextSetC_CB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testGet2", testGet(AB_listIterNextSetC_CB(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testIndexOfA", testIndexOf(AB_listIterNextSetC_CB(), ELEMENT_A, -1));
			printTest("AB_listIterNextSetC_CB_testIndexOfB", testIndexOf(AB_listIterNextSetC_CB(), ELEMENT_B, 1));
			printTest("AB_listIterNextSetC_CB_testIndexOfC", testIndexOf(AB_listIterNextSetC_CB(), ELEMENT_C, 0));
			// Iterator
			printTest("AB_listIterNextSetC_CB_testIter", testIter(AB_listIterNextSetC_CB(), Result.NoException));
			printTest("AB_listIterNextSetC_CB_testIterHasNext", testIterHasNext(AB_listIterNextSetC_CB().iterator(), Result.True));
			printTest("AB_listIterNextSetC_CB_testIterNext", testIterNext(AB_listIterNextSetC_CB().iterator(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testIterRemove", testIterRemove(AB_listIterNextSetC_CB().iterator(), Result.IllegalState));
			printTest("AB_listIterNextSetC_CB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterNextSetC_CB(), 1), Result.True));
			printTest("AB_listIterNextSetC_CB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_listIterNextSetC_CB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterNextSetC_CB(), 1), Result.NoException));
			printTest("AB_listIterNextSetC_CB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterNextSetC_CB(), 1)), Result.True));
			printTest("AB_listIterNextSetC_CB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterNextSetC_CB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterNextSetC_CB(), 1)), Result.IllegalState));
			printTest("AB_listIterNextSetC_CB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterNextSetC_CB(), 2), Result.False));
			printTest("AB_listIterNextSetC_CB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_listIterNextSetC_CB(), 2), null, Result.NoSuchElement));
			printTest("AB_listIterNextSetC_CB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterNextSetC_CB(), 2), Result.NoException));
			printTest("AB_listIterNextSetC_CB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterNextSetC_CB(), 2)), Result.False));
			printTest("AB_listIterNextSetC_CB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterNextSetC_CB(), 2)), null, Result.NoSuchElement));
			printTest("AB_listIterNextSetC_CB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterNextSetC_CB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("AB_listIterNextSetC_CB_testListIter", testListIter(AB_listIterNextSetC_CB(), Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIter", testListIter(AB_listIterNextSetC_CB(), 0, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterHas0Prev", testListIterHasPrev(AB_listIterNextSetC_CB(), 0, Result.False));
			printTest("AB_listIterNextSetC_CB_testListIterHas1Prev", testListIterHasPrev(AB_listIterNextSetC_CB(), 1, Result.True));
			printTest("AB_listIterNextSetC_CB_testListIterHas2Prev", testListIterHasPrev(AB_listIterNextSetC_CB(), 2, Result.True));
			printTest("AB_listIterNextSetC_CB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterNextSetC_CB_testListIter1Prev1", testListIterPrev(AB_listIterNextSetC_CB(), 1, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testListIter2Prev2", testListIterPrev(AB_listIterNextSetC_CB(), 2, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testListIter2Prev1", testListIterPrev(AB_listIterNextSetC_CB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterNextSetC_CB_testListIterAddNeg1C", testListIterAdd(AB_listIterNextSetC_CB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testListIterAdd0C", testListIterAdd(AB_listIterNextSetC_CB(), 0, ELEMENT_C, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterAdd1C", testListIterAdd(AB_listIterNextSetC_CB(), 1, ELEMENT_C, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterAdd2C", testListIterAdd(AB_listIterNextSetC_CB(), 2, ELEMENT_C, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterAdd3C", testListIterAdd(AB_listIterNextSetC_CB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testListIterNextIndex0", testListIterNextIndex(AB_listIterNextSetC_CB(), 0, 0));
			printTest("AB_listIterNextSetC_CB_testListIterNextIndex1", testListIterNextIndex(AB_listIterNextSetC_CB(), 1, 1));
			printTest("AB_listIterNextSetC_CB_testListIterNextIndex2", testListIterNextIndex(AB_listIterNextSetC_CB(), 2, 2));
			printTest("AB_listIterNextSetC_CB_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterNextSetC_CB(), 0, -1));
			printTest("AB_listIterNextSetC_CB_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterNextSetC_CB(), 1, 0));
			printTest("AB_listIterNextSetC_CB_testListIterPreviousIndex2", testListIterPrevIndex(AB_listIterNextSetC_CB(), 2, 1));
			printTest("AB_listIterNextSetC_CB_testListIterNext0AddC", testListNextAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 0, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterNext1AddC", testListNextAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterNext2AddC", testListNextAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterNext3AddC", testListNextAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_listIterNextSetC_CB_testListIterPrev1Index0AddC", testListPrevAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterNextSetC_CB_testListIterPrev0Index0AddC", testListPrevAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterPrev0Index1AddC", testListPrevAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterPrev1Index1AddC", testListPrevAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterPrev0Index2AddC", testListPrevAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterPrev1Index2AddC", testListPrevAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterPrev2Index2AddC", testListPrevAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterPrev0Index3AddC", testListPrevAdd(AB_listIterNextSetC_CB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("AB_listIterNextSetC_CB_testListIterNext0SetC", testListNextSet(AB_listIterNextSetC_CB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("AB_listIterNextSetC_CB_testListIterNext1SetC", testListNextSet(AB_listIterNextSetC_CB(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterNext2SetC", testListNextSet(AB_listIterNextSetC_CB(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterNext3SetC", testListNextSet(AB_listIterNextSetC_CB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_listIterNextSetC_CB_testListIterPrev0SetC", testListPrevSet(AB_listIterNextSetC_CB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("AB_listIterNextSetC_CB_testListIterPrev1SetC", testListPrevSet(AB_listIterNextSetC_CB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_listIterNextSetC_CB_testListIterPrev2SetC", testListPrevSet(AB_listIterNextSetC_CB(), ELEMENT_C, 2, 2, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterNextSetC_CB()");
			e.printStackTrace();
		
		}
	}
	
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A.B] -> lit.next() -> lit.next() -> lit.set(C) -> [A,C]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A.B] -> lit.next() -> lit.next() -> lit.set(C) -> [A,C]
	 * @return [A,C] after listIterNextNextSetC
	 */
	private IndexedUnsortedList<Integer> AB_listIterNextNextSetC_AC(){
		IndexedUnsortedList<Integer> list = A_add1B_AB(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.next();
		lit.set(ELEMENT_C);
		
		return list;
	}
	
	private void test_AB_listIterNextNextSetC_AC() {
		System.out.println("\nSCENARIO: [A.B] -> lit.next() -> lit.next() -> lit.set(C) -> [A,C]\n");
		try {
			printTest("AB_listIterNextNextSetC_AC_testAddToFrontB", testAddToFront(AB_listIterNextNextSetC_AC(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testAddToRearB", testAddToRear(AB_listIterNextNextSetC_AC(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testAddAfterAB", testAddAfter(AB_listIterNextNextSetC_AC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testAddAfterBB", testAddAfter(AB_listIterNextNextSetC_AC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_listIterNextNextSetC_AC_testAddAfterCB", testAddAfter(AB_listIterNextNextSetC_AC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testAddAtIndexNeg1B", testAddAtIndex(AB_listIterNextNextSetC_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testAddAtIndex0B", testAddAtIndex(AB_listIterNextNextSetC_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testAddAtIndex1B", testAddAtIndex(AB_listIterNextNextSetC_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testAddAtIndex2B", testAddAtIndex(AB_listIterNextNextSetC_AC(), 2, ELEMENT_B, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testAddAtIndex3B", testAddAtIndex(AB_listIterNextNextSetC_AC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testAddB", testAdd(AB_listIterNextNextSetC_AC(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testRemoveFirst", testRemoveFirst(AB_listIterNextNextSetC_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testRemoveLast", testRemoveLast(AB_listIterNextNextSetC_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testRemoveA", testRemoveElement(AB_listIterNextNextSetC_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testRemoveB", testRemoveElement(AB_listIterNextNextSetC_AC(), ELEMENT_B, Result.NoSuchElement));
			printTest("AB_listIterNextNextSetC_AC_testRemoveC", testRemoveElement(AB_listIterNextNextSetC_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testRemoveNeg1", testRemoveIndex(AB_listIterNextNextSetC_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testRemove0", testRemoveIndex(AB_listIterNextNextSetC_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testRemove1", testRemoveIndex(AB_listIterNextNextSetC_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testRemove2", testRemoveIndex(AB_listIterNextNextSetC_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testFirst", testFirst(AB_listIterNextNextSetC_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testLast", testLast(AB_listIterNextNextSetC_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testContainsA", testContains(AB_listIterNextNextSetC_AC(), ELEMENT_A, Result.True));
			printTest("AB_listIterNextNextSetC_AC_testContainsB", testContains(AB_listIterNextNextSetC_AC(), ELEMENT_B, Result.False));
			printTest("AB_listIterNextNextSetC_AC_testContainsC", testContains(AB_listIterNextNextSetC_AC(), ELEMENT_C, Result.True));
			printTest("AB_listIterNextNextSetC_AC_testIsEmpty", testIsEmpty(AB_listIterNextNextSetC_AC(), Result.False));
			printTest("AB_listIterNextNextSetC_AC_testSize", testSize(AB_listIterNextNextSetC_AC(), 2));
			printTest("AB_listIterNextNextSetC_AC_testToString", testToString(AB_listIterNextNextSetC_AC(), Result.ValidString));
			printTest("AB_listIterNextNextSetC_AC_testSetNeg1B", testSet(AB_listIterNextNextSetC_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testSet0B", testSet(AB_listIterNextNextSetC_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testSet1B", testSet(AB_listIterNextNextSetC_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testSet2B", testSet(AB_listIterNextNextSetC_AC(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testGetNeg1", testGet(AB_listIterNextNextSetC_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testGet0", testGet(AB_listIterNextNextSetC_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testGet1", testGet(AB_listIterNextNextSetC_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testGet2", testGet(AB_listIterNextNextSetC_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testIndexOfA", testIndexOf(AB_listIterNextNextSetC_AC(), ELEMENT_A, 0));
			printTest("AB_listIterNextNextSetC_AC_testIndexOfB", testIndexOf(AB_listIterNextNextSetC_AC(), ELEMENT_B, -1));
			printTest("AB_listIterNextNextSetC_AC_testIndexOfC", testIndexOf(AB_listIterNextNextSetC_AC(), ELEMENT_C, 1));
			// Iterator
			printTest("AB_listIterNextNextSetC_AC_testIter", testIter(AB_listIterNextNextSetC_AC(), Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testIterHasNext", testIterHasNext(AB_listIterNextNextSetC_AC().iterator(), Result.True));
			printTest("AB_listIterNextNextSetC_AC_testIterNext", testIterNext(AB_listIterNextNextSetC_AC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testIterRemove", testIterRemove(AB_listIterNextNextSetC_AC().iterator(), Result.IllegalState));
			printTest("AB_listIterNextNextSetC_AC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterNextNextSetC_AC(), 1), Result.True));
			printTest("AB_listIterNextNextSetC_AC_iterNext_testIterNext", testIterNext(iterAfterNext(AB_listIterNextNextSetC_AC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterNextNextSetC_AC(), 1), Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterNextNextSetC_AC(), 1)), Result.True));
			printTest("AB_listIterNextNextSetC_AC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterNextNextSetC_AC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterNextNextSetC_AC(), 1)), Result.IllegalState));
			printTest("AB_listIterNextNextSetC_AC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterNextNextSetC_AC(), 2), Result.False));
			printTest("AB_listIterNextNextSetC_AC_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_listIterNextNextSetC_AC(), 2), null, Result.NoSuchElement));
			printTest("AB_listIterNextNextSetC_AC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterNextNextSetC_AC(), 2), Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterNextNextSetC_AC(), 2)), Result.False));
			printTest("AB_listIterNextNextSetC_AC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterNextNextSetC_AC(), 2)), null, Result.NoSuchElement));
			printTest("AB_listIterNextNextSetC_AC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterNextNextSetC_AC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("AB_listIterNextNextSetC_AC_testListIter", testListIter(AB_listIterNextNextSetC_AC(), Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIter", testListIter(AB_listIterNextNextSetC_AC(), 0, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterHas0Prev", testListIterHasPrev(AB_listIterNextNextSetC_AC(), 0, Result.False));
			printTest("AB_listIterNextNextSetC_AC_testListIterHas1Prev", testListIterHasPrev(AB_listIterNextNextSetC_AC(), 1, Result.True));
			printTest("AB_listIterNextNextSetC_AC_testListIterHas2Prev", testListIterHasPrev(AB_listIterNextNextSetC_AC(), 2, Result.True));
			printTest("AB_listIterNextNextSetC_AC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterNextNextSetC_AC_testListIter1Prev1", testListIterPrev(AB_listIterNextNextSetC_AC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testListIter2Prev2", testListIterPrev(AB_listIterNextNextSetC_AC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testListIter2Prev1", testListIterPrev(AB_listIterNextNextSetC_AC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterNextNextSetC_AC_testListIterAddNeg1C", testListIterAdd(AB_listIterNextNextSetC_AC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testListIterAdd0C", testListIterAdd(AB_listIterNextNextSetC_AC(), 0, ELEMENT_C, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterAdd1C", testListIterAdd(AB_listIterNextNextSetC_AC(), 1, ELEMENT_C, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterAdd2C", testListIterAdd(AB_listIterNextNextSetC_AC(), 2, ELEMENT_C, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterAdd3C", testListIterAdd(AB_listIterNextNextSetC_AC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testListIterNextIndex0", testListIterNextIndex(AB_listIterNextNextSetC_AC(), 0, 0));
			printTest("AB_listIterNextNextSetC_AC_testListIterNextIndex1", testListIterNextIndex(AB_listIterNextNextSetC_AC(), 1, 1));
			printTest("AB_listIterNextNextSetC_AC_testListIterNextIndex2", testListIterNextIndex(AB_listIterNextNextSetC_AC(), 2, 2));
			printTest("AB_listIterNextNextSetC_AC_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterNextNextSetC_AC(), 0, -1));
			printTest("AB_listIterNextNextSetC_AC_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterNextNextSetC_AC(), 1, 0));
			printTest("AB_listIterNextNextSetC_AC_testListIterPreviousIndex2", testListIterPrevIndex(AB_listIterNextNextSetC_AC(), 2, 1));
			printTest("AB_listIterNextNextSetC_AC_testListIterNext0AddC", testListNextAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 0, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterNext1AddC", testListNextAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterNext2AddC", testListNextAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterNext3AddC", testListNextAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev1Index0AddC", testListPrevAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev0Index0AddC", testListPrevAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev0Index1AddC", testListPrevAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev1Index1AddC", testListPrevAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev0Index2AddC", testListPrevAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev1Index2AddC", testListPrevAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev2Index2AddC", testListPrevAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev0Index3AddC", testListPrevAdd(AB_listIterNextNextSetC_AC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("AB_listIterNextNextSetC_AC_testListIterNext0SetC", testListNextSet(AB_listIterNextNextSetC_AC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("AB_listIterNextNextSetC_AC_testListIterNext1SetC", testListNextSet(AB_listIterNextNextSetC_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterNext2SetC", testListNextSet(AB_listIterNextNextSetC_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterNext3SetC", testListNextSet(AB_listIterNextNextSetC_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev0SetC", testListPrevSet(AB_listIterNextNextSetC_AC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev1SetC", testListPrevSet(AB_listIterNextNextSetC_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_listIterNextNextSetC_AC_testListIterPrev2SetC", testListPrevSet(AB_listIterNextNextSetC_AC(), ELEMENT_C, 2, 2, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterNextNextSetC_AC");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A.B] -> lit.prev() -> lit.prev() -> lit.set(C) -> [C,B]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A.B] -> lit.prev() -> lit.prev() -> lit.set(C) -> [C,B]
	 * @return [C,B] after listIterPrevPrevSetC
	 */
	private IndexedUnsortedList<Integer> AB_listIterPrevPrevSetC_CB(){
		IndexedUnsortedList<Integer> list = A_add1B_AB(); 
		ListIterator<Integer> lit = list.listIterator(2);
		lit.previous();
		lit.previous();
		lit.set(ELEMENT_C);
		
		return list;
	}
	
	private void test_AB_listIterPrevPrevSetC_CB() {
		System.out.println("\nSCENARIO:  [A.B] -> lit.prev() -> lit.prev() -> lit.set(C) -> [C,B]\n");
		try {
			// IndexedUnsortedList
			printTest("AB_listIterPrevPrevSetC_CB_testAddToFrontA", testAddToFront(AB_listIterPrevPrevSetC_CB(), ELEMENT_A, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testAddToRearA", testAddToRear(AB_listIterPrevPrevSetC_CB(), ELEMENT_A, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testAddAfterBA", testAddAfter(AB_listIterPrevPrevSetC_CB(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testAddAfterCA", testAddAfter(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testAddAfterDA", testAddAfter(AB_listIterPrevPrevSetC_CB(), ELEMENT_D, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevSetC_CB_testAddAtIndexNeg1A", testAddAtIndex(AB_listIterPrevPrevSetC_CB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testAddAtIndex0A", testAddAtIndex(AB_listIterPrevPrevSetC_CB(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testAddAtIndex1A", testAddAtIndex(AB_listIterPrevPrevSetC_CB(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testAddAtIndex2A", testAddAtIndex(AB_listIterPrevPrevSetC_CB(), 2, ELEMENT_A, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testAddAtIndex3A", testAddAtIndex(AB_listIterPrevPrevSetC_CB(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testAddC", testAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testRemoveFirst", testRemoveFirst(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testRemoveLast", testRemoveLast(AB_listIterPrevPrevSetC_CB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testRemoveA", testRemoveElement(AB_listIterPrevPrevSetC_CB(), ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevSetC_CB_testRemoveB", testRemoveElement(AB_listIterPrevPrevSetC_CB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testRemoveC", testRemoveElement(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testRemoveNeg1", testRemoveIndex(AB_listIterPrevPrevSetC_CB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testRemove0", testRemoveIndex(AB_listIterPrevPrevSetC_CB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testRemove1", testRemoveIndex(AB_listIterPrevPrevSetC_CB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testRemove2", testRemoveIndex(AB_listIterPrevPrevSetC_CB(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testFirst", testFirst(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testLast", testLast(AB_listIterPrevPrevSetC_CB(), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testContainsA", testContains(AB_listIterPrevPrevSetC_CB(), ELEMENT_A, Result.False));
			printTest("AB_listIterPrevPrevSetC_CB_testContainsB", testContains(AB_listIterPrevPrevSetC_CB(), ELEMENT_B, Result.True));
			printTest("AB_listIterPrevPrevSetC_CB_testContainsC", testContains(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, Result.True));
			printTest("AB_listIterPrevPrevSetC_CB_testIsEmpty", testIsEmpty(AB_listIterPrevPrevSetC_CB(), Result.False));
			printTest("AB_listIterPrevPrevSetC_CB_testSize", testSize(AB_listIterPrevPrevSetC_CB(), 2));
			printTest("AB_listIterPrevPrevSetC_CB_testToString", testToString(AB_listIterPrevPrevSetC_CB(), Result.ValidString));
			printTest("AB_listIterPrevPrevSetC_CB_testSetNeg1A", testSet(AB_listIterPrevPrevSetC_CB(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testSet0A", testSet(AB_listIterPrevPrevSetC_CB(), 0, ELEMENT_A, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testSet1A", testSet(AB_listIterPrevPrevSetC_CB(), 1, ELEMENT_A, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testSet2A", testSet(AB_listIterPrevPrevSetC_CB(), 2, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testGetNeg1", testGet(AB_listIterPrevPrevSetC_CB(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testGet0", testGet(AB_listIterPrevPrevSetC_CB(), 0, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testGet1", testGet(AB_listIterPrevPrevSetC_CB(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testGet2", testGet(AB_listIterPrevPrevSetC_CB(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testIndexOfA", testIndexOf(AB_listIterPrevPrevSetC_CB(), ELEMENT_A, -1));
			printTest("AB_listIterPrevPrevSetC_CB_testIndexOfB", testIndexOf(AB_listIterPrevPrevSetC_CB(), ELEMENT_B, 1));
			printTest("AB_listIterPrevPrevSetC_CB_testIndexOfC", testIndexOf(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 0));
			// Iterator
			printTest("AB_listIterPrevPrevSetC_CB_testIter", testIter(AB_listIterPrevPrevSetC_CB(), Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testIterHasNext", testIterHasNext(AB_listIterPrevPrevSetC_CB().iterator(), Result.True));
			printTest("AB_listIterPrevPrevSetC_CB_testIterNext", testIterNext(AB_listIterPrevPrevSetC_CB().iterator(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testIterRemove", testIterRemove(AB_listIterPrevPrevSetC_CB().iterator(), Result.IllegalState));
			printTest("AB_listIterPrevPrevSetC_CB_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 1), Result.True));
			printTest("AB_listIterPrevPrevSetC_CB_iterNext_testIterNext", testIterNext(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 1), Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 1)), Result.True));
			printTest("AB_listIterPrevPrevSetC_CB_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 1)), Result.IllegalState));
			printTest("AB_listIterPrevPrevSetC_CB_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 2), Result.False));
			printTest("AB_listIterPrevPrevSetC_CB_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 2), null, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevSetC_CB_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 2), Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 2)), Result.False));
			printTest("AB_listIterPrevPrevSetC_CB_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 2)), null, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevSetC_CB_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterPrevPrevSetC_CB(), 2)), Result.IllegalState));
			// ListIterator
			printTest("AB_listIterPrevPrevSetC_CB_testListIter", testListIter(AB_listIterPrevPrevSetC_CB(), Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIter", testListIter(AB_listIterPrevPrevSetC_CB(), 0, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterHas0Prev", testListIterHasPrev(AB_listIterPrevPrevSetC_CB(), 0, Result.False));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterHas1Prev", testListIterHasPrev(AB_listIterPrevPrevSetC_CB(), 1, Result.True));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterHas2Prev", testListIterHasPrev(AB_listIterPrevPrevSetC_CB(), 2, Result.True));
			printTest("AB_listIterPrevPrevSetC_CB_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevSetC_CB_testListIter1Prev1", testListIterPrev(AB_listIterPrevPrevSetC_CB(), 1, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testListIter2Prev2", testListIterPrev(AB_listIterPrevPrevSetC_CB(), 2, 2, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testListIter2Prev1", testListIterPrev(AB_listIterPrevPrevSetC_CB(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterAddNeg1C", testListIterAdd(AB_listIterPrevPrevSetC_CB(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterAdd0C", testListIterAdd(AB_listIterPrevPrevSetC_CB(), 0, ELEMENT_C, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterAdd1C", testListIterAdd(AB_listIterPrevPrevSetC_CB(), 1, ELEMENT_C, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterAdd2C", testListIterAdd(AB_listIterPrevPrevSetC_CB(), 2, ELEMENT_C, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterAdd3C", testListIterAdd(AB_listIterPrevPrevSetC_CB(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNextIndex0", testListIterNextIndex(AB_listIterPrevPrevSetC_CB(), 0, 0));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNextIndex1", testListIterNextIndex(AB_listIterPrevPrevSetC_CB(), 1, 1));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNextIndex2", testListIterNextIndex(AB_listIterPrevPrevSetC_CB(), 2, 2));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterPrevPrevSetC_CB(), 0, -1));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterPrevPrevSetC_CB(), 1, 0));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPreviousIndex2", testListIterPrevIndex(AB_listIterPrevPrevSetC_CB(), 2, 1));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNext0AddC", testListNextAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 0, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNext1AddC", testListNextAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNext2AddC", testListNextAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNext3AddC", testListNextAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev1Index0AddC", testListPrevAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev0Index0AddC", testListPrevAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev0Index1AddC", testListPrevAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev1Index1AddC", testListPrevAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev0Index2AddC", testListPrevAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev1Index2AddC", testListPrevAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev2Index2AddC", testListPrevAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev0Index3AddC", testListPrevAdd(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNext0SetC", testListNextSet(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 0, Result.IllegalState));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNext1SetC", testListNextSet(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNext2SetC", testListNextSet(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterNext3SetC", testListNextSet(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev0SetC", testListPrevSet(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev1SetC", testListPrevSet(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_listIterPrevPrevSetC_CB_testListIterPrev2SetC", testListPrevSet(AB_listIterPrevPrevSetC_CB(), ELEMENT_C, 2, 2, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterPrevPrevSetC_CB()");
			e.printStackTrace();
		
		}
	}
	
	
	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B] -> lit.prev() -> lit.set(C) -> [A,C]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A,B] -> lit.prev() -> lit.set(C) -> [A,C]
	 * @return [A,C] after listIterPrevSetC
	 */
	private IndexedUnsortedList<Integer> AB_listIterPrevSetC_AC(){
		IndexedUnsortedList<Integer> list = A_add1B_AB(); 
		ListIterator<Integer> lit = list.listIterator(2);
		lit.previous();
		lit.set(ELEMENT_C);
		
		return list;
	}
	
	private void test_AB_listIterPrevSetC_AC() {
		System.out.println("\nSCENARIO: [A.B] -> lit.next() -> lit.next() -> lit.set(C) -> [A,C]\n");
		try {
			printTest("AB_listIterPrevSetC_AC_testAddToFrontB", testAddToFront(AB_listIterPrevSetC_AC(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testAddToRearB", testAddToRear(AB_listIterPrevSetC_AC(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testAddAfterAB", testAddAfter(AB_listIterPrevSetC_AC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testAddAfterBB", testAddAfter(AB_listIterPrevSetC_AC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("AB_listIterPrevSetC_AC_testAddAfterCB", testAddAfter(AB_listIterPrevSetC_AC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testAddAtIndexNeg1B", testAddAtIndex(AB_listIterPrevSetC_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testAddAtIndex0B", testAddAtIndex(AB_listIterPrevSetC_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testAddAtIndex1B", testAddAtIndex(AB_listIterPrevSetC_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testAddAtIndex2B", testAddAtIndex(AB_listIterPrevSetC_AC(), 2, ELEMENT_B, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testAddAtIndex3B", testAddAtIndex(AB_listIterPrevSetC_AC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testAddB", testAdd(AB_listIterPrevSetC_AC(), ELEMENT_B, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testRemoveFirst", testRemoveFirst(AB_listIterPrevSetC_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testRemoveLast", testRemoveLast(AB_listIterPrevSetC_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testRemoveA", testRemoveElement(AB_listIterPrevSetC_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testRemoveB", testRemoveElement(AB_listIterPrevSetC_AC(), ELEMENT_B, Result.NoSuchElement));
			printTest("AB_listIterPrevSetC_AC_testRemoveC", testRemoveElement(AB_listIterPrevSetC_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testRemoveNeg1", testRemoveIndex(AB_listIterPrevSetC_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testRemove0", testRemoveIndex(AB_listIterPrevSetC_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testRemove1", testRemoveIndex(AB_listIterPrevSetC_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testRemove2", testRemoveIndex(AB_listIterPrevSetC_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testFirst", testFirst(AB_listIterPrevSetC_AC(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testLast", testLast(AB_listIterPrevSetC_AC(), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testContainsA", testContains(AB_listIterPrevSetC_AC(), ELEMENT_A, Result.True));
			printTest("AB_listIterPrevSetC_AC_testContainsB", testContains(AB_listIterPrevSetC_AC(), ELEMENT_B, Result.False));
			printTest("AB_listIterPrevSetC_AC_testContainsC", testContains(AB_listIterPrevSetC_AC(), ELEMENT_C, Result.True));
			printTest("AB_listIterPrevSetC_AC_testIsEmpty", testIsEmpty(AB_listIterPrevSetC_AC(), Result.False));
			printTest("AB_listIterPrevSetC_AC_testSize", testSize(AB_listIterPrevSetC_AC(), 2));
			printTest("AB_listIterPrevSetC_AC_testToString", testToString(AB_listIterPrevSetC_AC(), Result.ValidString));
			printTest("AB_listIterPrevSetC_AC_testSetNeg1B", testSet(AB_listIterPrevSetC_AC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testSet0B", testSet(AB_listIterPrevSetC_AC(), 0, ELEMENT_B, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testSet1B", testSet(AB_listIterPrevSetC_AC(), 1, ELEMENT_B, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testSet2B", testSet(AB_listIterPrevSetC_AC(), 2, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testGetNeg1", testGet(AB_listIterPrevSetC_AC(), -1, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testGet0", testGet(AB_listIterPrevSetC_AC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testGet1", testGet(AB_listIterPrevSetC_AC(), 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testGet2", testGet(AB_listIterPrevSetC_AC(), 2, null, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testIndexOfA", testIndexOf(AB_listIterPrevSetC_AC(), ELEMENT_A, 0));
			printTest("AB_listIterPrevSetC_AC_testIndexOfB", testIndexOf(AB_listIterPrevSetC_AC(), ELEMENT_B, -1));
			printTest("AB_listIterPrevSetC_AC_testIndexOfC", testIndexOf(AB_listIterPrevSetC_AC(), ELEMENT_C, 1));
			// Iterator
			printTest("AB_listIterPrevSetC_AC_testIter", testIter(AB_listIterPrevSetC_AC(), Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testIterHasNext", testIterHasNext(AB_listIterPrevSetC_AC().iterator(), Result.True));
			printTest("AB_listIterPrevSetC_AC_testIterNext", testIterNext(AB_listIterPrevSetC_AC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testIterRemove", testIterRemove(AB_listIterPrevSetC_AC().iterator(), Result.IllegalState));
			printTest("AB_listIterPrevSetC_AC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterPrevSetC_AC(), 1), Result.True));
			printTest("AB_listIterPrevSetC_AC_iterNext_testIterNext", testIterNext(iterAfterNext(AB_listIterPrevSetC_AC(), 1), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_iterNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterPrevSetC_AC(), 1), Result.NoException));
			printTest("AB_listIterPrevSetC_AC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterPrevSetC_AC(), 1)), Result.True));
			printTest("AB_listIterPrevSetC_AC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterPrevSetC_AC(), 1)), ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterPrevSetC_AC(), 1)), Result.IllegalState));
			printTest("AB_listIterPrevSetC_AC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(AB_listIterPrevSetC_AC(), 2), Result.False));
			printTest("AB_listIterPrevSetC_AC_iterNextNext_testIterNext", testIterNext(iterAfterNext(AB_listIterPrevSetC_AC(), 2), null, Result.NoSuchElement));
			printTest("AB_listIterPrevSetC_AC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(AB_listIterPrevSetC_AC(), 2), Result.NoException));
			printTest("AB_listIterPrevSetC_AC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(AB_listIterPrevSetC_AC(), 2)), Result.False));
			printTest("AB_listIterPrevSetC_AC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(AB_listIterPrevSetC_AC(), 2)), null, Result.NoSuchElement));
			printTest("AB_listIterPrevSetC_AC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(AB_listIterPrevSetC_AC(), 2)), Result.IllegalState));
			// ListIterator
			printTest("AB_listIterPrevSetC_AC_testListIter", testListIter(AB_listIterPrevSetC_AC(), Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIter", testListIter(AB_listIterPrevSetC_AC(), 0, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterHas0Prev", testListIterHasPrev(AB_listIterPrevSetC_AC(), 0, Result.False));
			printTest("AB_listIterPrevSetC_AC_testListIterHas1Prev", testListIterHasPrev(AB_listIterPrevSetC_AC(), 1, Result.True));
			printTest("AB_listIterPrevSetC_AC_testListIterHas2Prev", testListIterHasPrev(AB_listIterPrevSetC_AC(), 2, Result.True));
			printTest("AB_listIterPrevSetC_AC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("AB_listIterPrevSetC_AC_testListIter1Prev1", testListIterPrev(AB_listIterPrevSetC_AC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testListIter2Prev2", testListIterPrev(AB_listIterPrevSetC_AC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testListIter2Prev1", testListIterPrev(AB_listIterPrevSetC_AC(), 2, 1, ELEMENT_C, Result.MatchingValue));
			printTest("AB_listIterPrevSetC_AC_testListIterAddNeg1C", testListIterAdd(AB_listIterPrevSetC_AC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testListIterAdd0C", testListIterAdd(AB_listIterPrevSetC_AC(), 0, ELEMENT_C, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterAdd1C", testListIterAdd(AB_listIterPrevSetC_AC(), 1, ELEMENT_C, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterAdd2C", testListIterAdd(AB_listIterPrevSetC_AC(), 2, ELEMENT_C, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterAdd3C", testListIterAdd(AB_listIterPrevSetC_AC(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testListIterNextIndex0", testListIterNextIndex(AB_listIterPrevSetC_AC(), 0, 0));
			printTest("AB_listIterPrevSetC_AC_testListIterNextIndex1", testListIterNextIndex(AB_listIterPrevSetC_AC(), 1, 1));
			printTest("AB_listIterPrevSetC_AC_testListIterNextIndex2", testListIterNextIndex(AB_listIterPrevSetC_AC(), 2, 2));
			printTest("AB_listIterPrevSetC_AC_testListIterPreviousIndex0", testListIterPrevIndex(AB_listIterPrevSetC_AC(), 0, -1));
			printTest("AB_listIterPrevSetC_AC_testListIterPreviousIndex1", testListIterPrevIndex(AB_listIterPrevSetC_AC(), 1, 0));
			printTest("AB_listIterPrevSetC_AC_testListIterPreviousIndex2", testListIterPrevIndex(AB_listIterPrevSetC_AC(), 2, 1));
			printTest("AB_listIterPrevSetC_AC_testListIterNext0AddC", testListNextAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 0, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterNext1AddC", testListNextAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterNext2AddC", testListNextAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterNext3AddC", testListNextAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev1Index0AddC", testListPrevAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 1, 0, Result.NoSuchElement));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev0Index0AddC", testListPrevAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 0, 0, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev0Index1AddC", testListPrevAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 0, 1, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev1Index1AddC", testListPrevAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev0Index2AddC", testListPrevAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 0, 2, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev1Index2AddC", testListPrevAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 1, 2, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev2Index2AddC", testListPrevAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 2, 2, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev0Index3AddC", testListPrevAdd(AB_listIterPrevSetC_AC(), ELEMENT_C, 0, 3, Result.IndexOutOfBounds));
			printTest("AB_listIterPrevSetC_AC_testListIterNext0SetC", testListNextSet(AB_listIterPrevSetC_AC(), ELEMENT_C, 0, Result.IllegalState));
			printTest("AB_listIterPrevSetC_AC_testListIterNext1SetC", testListNextSet(AB_listIterPrevSetC_AC(), ELEMENT_C, 1, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterNext2SetC", testListNextSet(AB_listIterPrevSetC_AC(), ELEMENT_C, 2, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterNext3SetC", testListNextSet(AB_listIterPrevSetC_AC(), ELEMENT_C, 3, Result.NoSuchElement));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev0SetC", testListPrevSet(AB_listIterPrevSetC_AC(), ELEMENT_C, 0, 0, Result.IllegalState));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev1SetC", testListPrevSet(AB_listIterPrevSetC_AC(), ELEMENT_C, 1, 1, Result.NoException));
			printTest("AB_listIterPrevSetC_AC_testListIterPrev2SetC", testListPrevSet(AB_listIterPrevSetC_AC(), ELEMENT_C, 2, 2, Result.NoException));
				

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_AB_listIterPrevSetC_AC");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A.B,C] -> lit.next() -> lit.set(D) -> [D,B,C]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A.B,C] -> lit.next() -> lit.set(D) -> [D,B,C]
	 * @return [D,B,C] after listIterNextSetD
	 */
	private IndexedUnsortedList<Integer> ABC_listIterNextSetD_DBC(){
		IndexedUnsortedList<Integer> list = AB_add2C_ABC(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.set(ELEMENT_D);
		
		return list;
	}
	
	
	private void test_ABC_listIterNextSetD_DBC() {
		System.out.println("\nSCENARIO: [A.B,C] -> lit.next() -> lit.set(D) -> [D,B,C]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_listIterNextSetD_DBC_testAddToFrontA", testAddToFront(ABC_listIterNextSetD_DBC(), ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testAddToRearA", testAddToRear(ABC_listIterNextSetD_DBC(), ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testAddAfterAA", testAddAfter(ABC_listIterNextSetD_DBC(), ELEMENT_A, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterNextSetD_DBC_testAddAfterBA", testAddAfter(ABC_listIterNextSetD_DBC(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testAddAfterCA", testAddAfter(ABC_listIterNextSetD_DBC(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testAddAfterDA", testAddAfter(ABC_listIterNextSetD_DBC(), ELEMENT_D, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testAddAtIndexNeg1A", testAddAtIndex(ABC_listIterNextSetD_DBC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testAddAtIndex0A", testAddAtIndex(ABC_listIterNextSetD_DBC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testAddAtIndex1A", testAddAtIndex(ABC_listIterNextSetD_DBC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testAddAtIndex2A", testAddAtIndex(ABC_listIterNextSetD_DBC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testAddAtIndex3A", testAddAtIndex(ABC_listIterNextSetD_DBC(), 3, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testAddAtIndex3A", testAddAtIndex(ABC_listIterNextSetD_DBC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testAddC", testAdd(ABC_listIterNextSetD_DBC(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testRemoveFirst", testRemoveFirst(ABC_listIterNextSetD_DBC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testRemoveLast", testRemoveLast(ABC_listIterNextSetD_DBC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testRemoveA", testRemoveElement(ABC_listIterNextSetD_DBC(), ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterNextSetD_DBC_testRemoveB", testRemoveElement(ABC_listIterNextSetD_DBC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testRemoveC", testRemoveElement(ABC_listIterNextSetD_DBC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testRemoveD", testRemoveElement(ABC_listIterNextSetD_DBC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testRemoveNeg1", testRemoveIndex(ABC_listIterNextSetD_DBC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testRemove0", testRemoveIndex(ABC_listIterNextSetD_DBC(), 0, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testRemove1", testRemoveIndex(ABC_listIterNextSetD_DBC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testRemove2", testRemoveIndex(ABC_listIterNextSetD_DBC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testRemove3", testRemoveIndex(ABC_listIterNextSetD_DBC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testFirst", testFirst(ABC_listIterNextSetD_DBC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testLast", testLast(ABC_listIterNextSetD_DBC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testContainsA", testContains(ABC_listIterNextSetD_DBC(), ELEMENT_A, Result.False));
			printTest("ABC_listIterNextSetD_DBC_testContainsB", testContains(ABC_listIterNextSetD_DBC(), ELEMENT_B, Result.True));
			printTest("ABC_listIterNextSetD_DBC_testContainsC", testContains(ABC_listIterNextSetD_DBC(), ELEMENT_C, Result.True));
			printTest("ABC_listIterNextSetD_DBC_testContainsD", testContains(ABC_listIterNextSetD_DBC(), ELEMENT_D, Result.True));
			printTest("ABC_listIterNextSetD_DBC_testIsEmpty", testIsEmpty(ABC_listIterNextSetD_DBC(), Result.False));
			printTest("ABC_listIterNextSetD_DBC_testSize", testSize(ABC_listIterNextSetD_DBC(), 3));
			printTest("ABC_listIterNextSetD_DBC_testToString", testToString(ABC_listIterNextSetD_DBC(), Result.ValidString));
			printTest("ABC_listIterNextSetD_DBC_testSetNeg1A", testSet(ABC_listIterNextSetD_DBC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testSet0A", testSet(ABC_listIterNextSetD_DBC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testSet1A", testSet(ABC_listIterNextSetD_DBC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testSet2A", testSet(ABC_listIterNextSetD_DBC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testSet3A", testSet(ABC_listIterNextSetD_DBC(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testGetNeg1", testGet(ABC_listIterNextSetD_DBC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testGet0", testGet(ABC_listIterNextSetD_DBC(), 0, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testGet1", testGet(ABC_listIterNextSetD_DBC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testGet2", testGet(ABC_listIterNextSetD_DBC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testGet3", testGet(ABC_listIterNextSetD_DBC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testIndexOfA", testIndexOf(ABC_listIterNextSetD_DBC(), ELEMENT_A, -1));
			printTest("ABC_listIterNextSetD_DBC_testIndexOfB", testIndexOf(ABC_listIterNextSetD_DBC(), ELEMENT_B, 1));
			printTest("ABC_listIterNextSetD_DBC_testIndexOfC", testIndexOf(ABC_listIterNextSetD_DBC(), ELEMENT_C, 2));
			printTest("ABC_listIterNextSetD_DBC_testIndexOfD", testIndexOf(ABC_listIterNextSetD_DBC(), ELEMENT_D, 0));
			// Iterator
			printTest("ABC_listIterNextSetD_DBC_testIter", testIter(ABC_listIterNextSetD_DBC(), Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testIterHasNext", testIterHasNext(ABC_listIterNextSetD_DBC().iterator(), Result.True));
			printTest("ABC_listIterNextSetD_DBC_testIterNext", testIterNext(ABC_listIterNextSetD_DBC().iterator(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testIterRemove", testIterRemove(ABC_listIterNextSetD_DBC().iterator(), Result.IllegalState));
			printTest("ABC_listIterNextSetD_DBC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterNextSetD_DBC(), 1), Result.True));
			printTest("ABC_listIterNextSetD_DBC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterNextSetD_DBC(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterNextSetD_DBC(), 1), Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterNextSetD_DBC(), 1)), Result.True));
			printTest("ABC_listIterNextSetD_DBC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterNextSetD_DBC(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterNextSetD_DBC(), 1)), Result.IllegalState));
			printTest("ABC_listIterNextSetD_DBC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterNextSetD_DBC(), 2), Result.True));
			printTest("ABC_listIterNextSetD_DBC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterNextSetD_DBC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterNextSetD_DBC(), 2), Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterNextSetD_DBC(), 3)), Result.False));
			printTest("ABC_listIterNextSetD_DBC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterNextSetD_DBC(), 3)), null, Result.NoSuchElement));
			printTest("ABC_listIterNextSetD_DBC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterNextSetD_DBC(), 3)), Result.IllegalState));
			// ListIterator
			printTest("ABC_listIterNextSetD_DBC_testListIter", testListIter(ABC_listIterNextSetD_DBC(), Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIter", testListIter(ABC_listIterNextSetD_DBC(), 0, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterHas0Prev", testListIterHasPrev(ABC_listIterNextSetD_DBC(), 0, Result.False));
			printTest("ABC_listIterNextSetD_DBC_testListIterHas1Prev", testListIterHasPrev(ABC_listIterNextSetD_DBC(), 1, Result.True));
			printTest("ABC_listIterNextSetD_DBC_testListIterHas2Prev", testListIterHasPrev(ABC_listIterNextSetD_DBC(), 2, Result.True));
			printTest("ABC_listIterNextSetD_DBC_testListIterHas3Prev", testListIterHasPrev(ABC_listIterNextSetD_DBC(), 3, Result.True));
			printTest("ABC_listIterNextSetD_DBC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterNextSetD_DBC_testListIter1Prev1", testListIterPrev(ABC_listIterNextSetD_DBC(), 1, 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testListIter2Prev2", testListIterPrev(ABC_listIterNextSetD_DBC(), 2, 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testListIter2Prev1", testListIterPrev(ABC_listIterNextSetD_DBC(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testListIter3Prev1", testListIterPrev(ABC_listIterNextSetD_DBC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testListIter3Prev2", testListIterPrev(ABC_listIterNextSetD_DBC(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testListIter3Prev3", testListIterPrev(ABC_listIterNextSetD_DBC(), 3, 3, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextSetD_DBC_testListIterAddNeg1D", testListIterAdd(ABC_listIterNextSetD_DBC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testListIterAdd0D", testListIterAdd(ABC_listIterNextSetD_DBC(), 0, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterAdd1D", testListIterAdd(ABC_listIterNextSetD_DBC(), 1, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterAdd2D", testListIterAdd(ABC_listIterNextSetD_DBC(), 2, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterAdd3D", testListIterAdd(ABC_listIterNextSetD_DBC(), 3, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterAdd4D", testListIterAdd(ABC_listIterNextSetD_DBC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testListIterNextIndex0", testListIterNextIndex(ABC_listIterNextSetD_DBC(), 0, 0));
			printTest("ABC_listIterNextSetD_DBC_testListIterNextIndex1", testListIterNextIndex(ABC_listIterNextSetD_DBC(), 1, 1));
			printTest("ABC_listIterNextSetD_DBC_testListIterNextIndex2", testListIterNextIndex(ABC_listIterNextSetD_DBC(), 2, 2));
			printTest("ABC_listIterNextSetD_DBC_testListIterNextIndex3", testListIterNextIndex(ABC_listIterNextSetD_DBC(), 3, 3));
			printTest("ABC_listIterNextSetD_DBC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterNextSetD_DBC(), 0, -1));
			printTest("ABC_listIterNextSetD_DBC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterNextSetD_DBC(), 1, 0));
			printTest("ABC_listIterNextSetD_DBC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterNextSetD_DBC(), 2, 1));
			printTest("ABC_listIterNextSetD_DBC_testListIterPreviousIndex3", testListIterPrevIndex(ABC_listIterNextSetD_DBC(), 3, 2));
			printTest("ABC_listIterNextSetD_DBC_testListIterNext0AddD", testListNextAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 0, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterNext1AddD", testListNextAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterNext2AddD", testListNextAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterNext3AddD", testListNextAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterNext4AddD", testListNextAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev1Index0AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev0Index0AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev0Index1AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev1Index1AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev0Index2AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev1Index2AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev2Index2AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev0Index3AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev1Index3AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev2Index3AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev3Index3AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev0Index4AddD", testListPrevAdd(ABC_listIterNextSetD_DBC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextSetD_DBC_testListIterNext0SetD", testListNextSet(ABC_listIterNextSetD_DBC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("ABC_listIterNextSetD_DBC_testListIterNext1SetD", testListNextSet(ABC_listIterNextSetD_DBC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterNext2SetD", testListNextSet(ABC_listIterNextSetD_DBC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterNext3SetD", testListNextSet(ABC_listIterNextSetD_DBC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterNext4SetD", testListNextSet(ABC_listIterNextSetD_DBC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev0SetD", testListPrevSet(ABC_listIterNextSetD_DBC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev1SetD", testListPrevSet(ABC_listIterNextSetD_DBC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev2SetD", testListPrevSet(ABC_listIterNextSetD_DBC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterNextSetD_DBC_testListIterPrev3SetD", testListPrevSet(ABC_listIterNextSetD_DBC(), ELEMENT_D, 3, 3, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterNextSetD_DBC");
			e.printStackTrace();
		}
	}
	

	////////////////////////////////////////////////
	// XXX SCENARIO: [A.B,C] -> lit.next() -> lit.next() -> lit.set(D) -> [A,D,C]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A.B,C] -> lit.next() -> lit.next() -> lit.set(D) -> [A,D,C]
	 * @return [A,D,C] after listIterNextNextSetD
	 */
	private IndexedUnsortedList<Integer> ABC_listIterNextNextSetD_ADC(){
		IndexedUnsortedList<Integer> list = AB_add2C_ABC(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.next();
		lit.set(ELEMENT_D);
		
		return list;
	}

	private void test_ABC_listIterNextNextSetD_ADC() {
		System.out.println("\nSCENARIO: [A.B,C] -> lit.next() -> lit.next() -> lit.set(D) -> [A,D,C]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_listIterNextNextSetD_ADC_testAddToFrontB", testAddToFront(ABC_listIterNextNextSetD_ADC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testAddToRearB", testAddToRear(ABC_listIterNextNextSetD_ADC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testAddAfterDB", testAddAfter(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testAddAfterBB", testAddAfter(ABC_listIterNextNextSetD_ADC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_listIterNextNextSetD_ADC_testAddAfterCB", testAddAfter(ABC_listIterNextNextSetD_ADC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testAddAfterAB", testAddAfter(ABC_listIterNextNextSetD_ADC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testAddAtIndexNeg1B", testAddAtIndex(ABC_listIterNextNextSetD_ADC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testAddAtIndex0B", testAddAtIndex(ABC_listIterNextNextSetD_ADC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testAddAtIndex1B", testAddAtIndex(ABC_listIterNextNextSetD_ADC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testAddAtIndex2B", testAddAtIndex(ABC_listIterNextNextSetD_ADC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testAddAtIndex3B", testAddAtIndex(ABC_listIterNextNextSetD_ADC(), 3, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testAddAtIndex4B", testAddAtIndex(ABC_listIterNextNextSetD_ADC(), 4, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testAddB", testAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testRemoveFirst", testRemoveFirst(ABC_listIterNextNextSetD_ADC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testRemoveLast", testRemoveLast(ABC_listIterNextNextSetD_ADC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testRemoveA", testRemoveElement(ABC_listIterNextNextSetD_ADC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testRemoveB", testRemoveElement(ABC_listIterNextNextSetD_ADC(), ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_listIterNextNextSetD_ADC_testRemoveC", testRemoveElement(ABC_listIterNextNextSetD_ADC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testRemoveD", testRemoveElement(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testRemoveNeg1", testRemoveIndex(ABC_listIterNextNextSetD_ADC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testRemove0", testRemoveIndex(ABC_listIterNextNextSetD_ADC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testRemove1", testRemoveIndex(ABC_listIterNextNextSetD_ADC(), 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testRemove2", testRemoveIndex(ABC_listIterNextNextSetD_ADC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testRemove3", testRemoveIndex(ABC_listIterNextNextSetD_ADC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testFirst", testFirst(ABC_listIterNextNextSetD_ADC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testLast", testLast(ABC_listIterNextNextSetD_ADC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testContainsA", testContains(ABC_listIterNextNextSetD_ADC(), ELEMENT_A, Result.True));
			printTest("ABC_listIterNextNextSetD_ADC_testContainsB", testContains(ABC_listIterNextNextSetD_ADC(), ELEMENT_B, Result.False));
			printTest("ABC_listIterNextNextSetD_ADC_testContainsC", testContains(ABC_listIterNextNextSetD_ADC(), ELEMENT_C, Result.True));
			printTest("ABC_listIterNextNextSetD_ADC_testContainsD", testContains(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, Result.True));
			printTest("ABC_listIterNextNextSetD_ADC_testIsEmpty", testIsEmpty(ABC_listIterNextNextSetD_ADC(), Result.False));
			printTest("ABC_listIterNextNextSetD_ADC_testSize", testSize(ABC_listIterNextNextSetD_ADC(), 3));
			printTest("ABC_listIterNextNextSetD_ADC_testToString", testToString(ABC_listIterNextNextSetD_ADC(), Result.ValidString));
			printTest("ABC_listIterNextNextSetD_ADC_testSetNeg1B", testSet(ABC_listIterNextNextSetD_ADC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testSet0B", testSet(ABC_listIterNextNextSetD_ADC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testSet1B", testSet(ABC_listIterNextNextSetD_ADC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testSet2B", testSet(ABC_listIterNextNextSetD_ADC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testSet3B", testSet(ABC_listIterNextNextSetD_ADC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testGetNeg1", testGet(ABC_listIterNextNextSetD_ADC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testGet0", testGet(ABC_listIterNextNextSetD_ADC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testGet1", testGet(ABC_listIterNextNextSetD_ADC(), 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testGet2", testGet(ABC_listIterNextNextSetD_ADC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testGet3", testGet(ABC_listIterNextNextSetD_ADC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testIndexOfA", testIndexOf(ABC_listIterNextNextSetD_ADC(), ELEMENT_A, 0));
			printTest("ABC_listIterNextNextSetD_ADC_testIndexOfB", testIndexOf(ABC_listIterNextNextSetD_ADC(), ELEMENT_B, -1));
			printTest("ABC_listIterNextNextSetD_ADC_testIndexOfC", testIndexOf(ABC_listIterNextNextSetD_ADC(), ELEMENT_C, 2));
			printTest("ABC_listIterNextNextSetD_ADC_testIndexOfD", testIndexOf(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 1));
			// Iterator
			printTest("ABC_listIterNextNextSetD_ADC_testIter", testIter(ABC_listIterNextNextSetD_ADC(), Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testIterHasNext", testIterHasNext(ABC_listIterNextNextSetD_ADC().iterator(), Result.True));
			printTest("ABC_listIterNextNextSetD_ADC_testIterNext", testIterNext(ABC_listIterNextNextSetD_ADC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testIterRemove", testIterRemove(ABC_listIterNextNextSetD_ADC().iterator(), Result.IllegalState));
			printTest("ABC_listIterNextNextSetD_ADC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 1), Result.True));
			printTest("ABC_listIterNextNextSetD_ADC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 1), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 1), Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 1)), Result.True));
			printTest("ABC_listIterNextNextSetD_ADC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 1)), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 1)), Result.IllegalState));
			printTest("ABC_listIterNextNextSetD_ADC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 2), Result.True));
			printTest("ABC_listIterNextNextSetD_ADC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 2), Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 3)), Result.False));
			printTest("ABC_listIterNextNextSetD_ADC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 3)), null, Result.NoSuchElement));
			printTest("ABC_listIterNextNextSetD_ADC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterNextNextSetD_ADC(), 3)), Result.IllegalState));
			// List Iterator
			printTest("ABC_listIterNextNextSetD_ADC_testListIter", testListIter(ABC_listIterNextNextSetD_ADC(), Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIter", testListIter(ABC_listIterNextNextSetD_ADC(), 0, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterHas0Prev", testListIterHasPrev(ABC_listIterNextNextSetD_ADC(), 0, Result.False));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterHas1Prev", testListIterHasPrev(ABC_listIterNextNextSetD_ADC(), 1, Result.True));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterHas2Prev", testListIterHasPrev(ABC_listIterNextNextSetD_ADC(), 2, Result.True));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterHas3Prev", testListIterHasPrev(ABC_listIterNextNextSetD_ADC(), 3, Result.True));
			printTest("ABC_listIterNextNextSetD_ADC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterNextNextSetD_ADC_testListIter1Prev1", testListIterPrev(ABC_listIterNextNextSetD_ADC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testListIter2Prev2", testListIterPrev(ABC_listIterNextNextSetD_ADC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testListIter2Prev1", testListIterPrev(ABC_listIterNextNextSetD_ADC(), 2, 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testListIter3Prev1", testListIterPrev(ABC_listIterNextNextSetD_ADC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testListIter3Prev2", testListIterPrev(ABC_listIterNextNextSetD_ADC(), 3, 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testListIter3Prev3", testListIterPrev(ABC_listIterNextNextSetD_ADC(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterAddNeg1D", testListIterAdd(ABC_listIterNextNextSetD_ADC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterAdd0D", testListIterAdd(ABC_listIterNextNextSetD_ADC(), 0, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterAdd1D", testListIterAdd(ABC_listIterNextNextSetD_ADC(), 1, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterAdd2D", testListIterAdd(ABC_listIterNextNextSetD_ADC(), 2, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterAdd3D", testListIterAdd(ABC_listIterNextNextSetD_ADC(), 3, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterAdd4D", testListIterAdd(ABC_listIterNextNextSetD_ADC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNextIndex0", testListIterNextIndex(ABC_listIterNextNextSetD_ADC(), 0, 0));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNextIndex1", testListIterNextIndex(ABC_listIterNextNextSetD_ADC(), 1, 1));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNextIndex2", testListIterNextIndex(ABC_listIterNextNextSetD_ADC(), 2, 2));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNextIndex3", testListIterNextIndex(ABC_listIterNextNextSetD_ADC(), 3, 3));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterNextNextSetD_ADC(), 0, -1));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterNextNextSetD_ADC(), 1, 0));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterNextNextSetD_ADC(), 2, 1));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPreviousIndex3", testListIterPrevIndex(ABC_listIterNextNextSetD_ADC(), 3, 2));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNext0AddD", testListNextAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 0, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNext1AddD", testListNextAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNext2AddD", testListNextAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNext3AddD", testListNextAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNext4AddD", testListNextAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev1Index0AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev0Index0AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev0Index1AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev1Index1AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev0Index2AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev1Index2AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev2Index2AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev0Index3AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev1Index3AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev2Index3AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev3Index3AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev0Index4AddD", testListPrevAdd(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNext0SetD", testListNextSet(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNext1SetD", testListNextSet(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNext2SetD", testListNextSet(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNext3SetD", testListNextSet(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterNext4SetD", testListNextSet(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev0SetD", testListPrevSet(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev1SetD", testListPrevSet(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev2SetD", testListPrevSet(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterNextNextSetD_ADC_testListIterPrev3SetD", testListPrevSet(ABC_listIterNextNextSetD_ADC(), ELEMENT_D, 3, 3, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterNextNextSetD_ADC");
			e.printStackTrace();
		}
	}

	////////////////////////////////////////////////
	// XXX SCENARIO: [A.B,C] -> lit.next() -> lit.next() -> lit.next() -> lit.set(D) -> [A,B,D]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A.B,C] -> lit.next() -> lit.next() -> lit.next() -> lit.set(D) -> [A,B,D]
	 * @return [A,D,C] after listIterNextNextSetD
	 */
	private IndexedUnsortedList<Integer> ABC_listIterNextNextNextSetD_ABD(){
		IndexedUnsortedList<Integer> list = AB_add2C_ABC(); 
		ListIterator<Integer> lit = list.listIterator();
		lit.next();
		lit.next();
		lit.next();
		lit.set(ELEMENT_D);
		
		return list;
	}
	
	
	private void test_ABC_listIterNextNextNextSetD_ABD() {
		System.out.println("\nSCENARIO: [A.B,C] -> lit.next() -> lit.next() -> lit.next() -> lit.set(D) -> [A,B,D]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddToFrontC", testAddToFront(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddToRearC", testAddToRear(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddAfterAC", testAddAfter(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddAfterBC", testAddAfter(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddAfterCC", testAddAfter(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_C, ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddAfterDC", testAddAfter(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddAtIndexNeg1C", testAddAtIndex(ABC_listIterNextNextNextSetD_ABD(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddAtIndex0C", testAddAtIndex(ABC_listIterNextNextNextSetD_ABD(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddAtIndex1C", testAddAtIndex(ABC_listIterNextNextNextSetD_ABD(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddAtIndex2C", testAddAtIndex(ABC_listIterNextNextNextSetD_ABD(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddAtIndex3C", testAddAtIndex(ABC_listIterNextNextNextSetD_ABD(), 3, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddAtIndex4C", testAddAtIndex(ABC_listIterNextNextNextSetD_ABD(), 4, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testAddC", testAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemoveFirst", testRemoveFirst(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemoveLast", testRemoveLast(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemoveA", testRemoveElement(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemoveB", testRemoveElement(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemoveC", testRemoveElement(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemoveD", testRemoveElement(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemoveNeg1", testRemoveIndex(ABC_listIterNextNextNextSetD_ABD(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemove0", testRemoveIndex(ABC_listIterNextNextNextSetD_ABD(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemove1", testRemoveIndex(ABC_listIterNextNextNextSetD_ABD(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemove2", testRemoveIndex(ABC_listIterNextNextNextSetD_ABD(), 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testRemove3", testRemoveIndex(ABC_listIterNextNextNextSetD_ABD(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testFirst", testFirst(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testLast", testLast(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testContainsA", testContains(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_A, Result.True));
			printTest("ABC_listIterNextNextNextSetD_ABD_testContainsB", testContains(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_B, Result.True));
			printTest("ABC_listIterNextNextNextSetD_ABD_testContainsC", testContains(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_C, Result.False));
			printTest("ABC_listIterNextNextNextSetD_ABD_testContainsD", testContains(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, Result.True));
			printTest("ABC_listIterNextNextNextSetD_ABD_testIsEmpty", testIsEmpty(ABC_listIterNextNextNextSetD_ABD(), Result.False));
			printTest("ABC_listIterNextNextNextSetD_ABD_testSize", testSize(ABC_listIterNextNextNextSetD_ABD(), 3));
			printTest("ABC_listIterNextNextNextSetD_ABD_testToString", testToString(ABC_listIterNextNextNextSetD_ABD(), Result.ValidString));
			printTest("ABC_listIterNextNextNextSetD_ABD_testSetNeg1C", testSet(ABC_listIterNextNextNextSetD_ABD(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testSet0C", testSet(ABC_listIterNextNextNextSetD_ABD(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testSet1C", testSet(ABC_listIterNextNextNextSetD_ABD(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testSet2C", testSet(ABC_listIterNextNextNextSetD_ABD(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testSet3C", testSet(ABC_listIterNextNextNextSetD_ABD(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testGetNeg1", testGet(ABC_listIterNextNextNextSetD_ABD(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testGet0", testGet(ABC_listIterNextNextNextSetD_ABD(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testGet1", testGet(ABC_listIterNextNextNextSetD_ABD(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testGet2", testGet(ABC_listIterNextNextNextSetD_ABD(), 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testGet3", testGet(ABC_listIterNextNextNextSetD_ABD(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testIndexOfA", testIndexOf(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_A, 0));
			printTest("ABC_listIterNextNextNextSetD_ABD_testIndexOfB", testIndexOf(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_B, 1));
			printTest("ABC_listIterNextNextNextSetD_ABD_testIndexOfC", testIndexOf(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_C, -1));
			printTest("ABC_listIterNextNextNextSetD_ABD_testIndexOfD", testIndexOf(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 2));
			// Iterator
			printTest("ABC_listIterNextNextNextSetD_ABD_testIter", testIter(ABC_listIterNextNextNextSetD_ABD(), Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testIterHasNext", testIterHasNext(ABC_listIterNextNextNextSetD_ABD().iterator(), Result.True));
			printTest("ABC_listIterNextNextNextSetD_ABD_testIterNext", testIterNext(ABC_listIterNextNextNextSetD_ABD().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testIterRemove", testIterRemove(ABC_listIterNextNextNextSetD_ABD().iterator(), Result.IllegalState));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 1), Result.True));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 1), Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 1)), Result.True));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 1)), Result.IllegalState));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 2), Result.True));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 2), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 2), Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 3)), Result.False));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 3)), null, Result.NoSuchElement));
			printTest("ABC_listIterNextNextNextSetD_ABD_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterNextNextNextSetD_ABD(), 3)), Result.IllegalState));
			// List Iterator
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIter", testListIter(ABC_listIterNextNextNextSetD_ABD(), Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIter", testListIter(ABC_listIterNextNextNextSetD_ABD(), 0, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterHas0Prev", testListIterHasPrev(ABC_listIterNextNextNextSetD_ABD(), 0, Result.False));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterHas1Prev", testListIterHasPrev(ABC_listIterNextNextNextSetD_ABD(), 1, Result.True));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterHas2Prev", testListIterHasPrev(ABC_listIterNextNextNextSetD_ABD(), 2, Result.True));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterHas3Prev", testListIterHasPrev(ABC_listIterNextNextNextSetD_ABD(), 3, Result.True));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIter1Prev1", testListIterPrev(ABC_listIterNextNextNextSetD_ABD(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIter2Prev2", testListIterPrev(ABC_listIterNextNextNextSetD_ABD(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIter2Prev1", testListIterPrev(ABC_listIterNextNextNextSetD_ABD(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIter3Prev1", testListIterPrev(ABC_listIterNextNextNextSetD_ABD(), 3, 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIter3Prev2", testListIterPrev(ABC_listIterNextNextNextSetD_ABD(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIter3Prev3", testListIterPrev(ABC_listIterNextNextNextSetD_ABD(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterAddNeg1D", testListIterAdd(ABC_listIterNextNextNextSetD_ABD(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterAdd0D", testListIterAdd(ABC_listIterNextNextNextSetD_ABD(), 0, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterAdd1D", testListIterAdd(ABC_listIterNextNextNextSetD_ABD(), 1, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterAdd2D", testListIterAdd(ABC_listIterNextNextNextSetD_ABD(), 2, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterAdd3D", testListIterAdd(ABC_listIterNextNextNextSetD_ABD(), 3, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterAdd4D", testListIterAdd(ABC_listIterNextNextNextSetD_ABD(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNextIndex0", testListIterNextIndex(ABC_listIterNextNextNextSetD_ABD(), 0, 0));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNextIndex1", testListIterNextIndex(ABC_listIterNextNextNextSetD_ABD(), 1, 1));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNextIndex2", testListIterNextIndex(ABC_listIterNextNextNextSetD_ABD(), 2, 2));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNextIndex3", testListIterNextIndex(ABC_listIterNextNextNextSetD_ABD(), 3, 3));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterNextNextNextSetD_ABD(), 0, -1));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterNextNextNextSetD_ABD(), 1, 0));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterNextNextNextSetD_ABD(), 2, 1));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPreviousIndex3", testListIterPrevIndex(ABC_listIterNextNextNextSetD_ABD(), 3, 2));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNext0AddD", testListNextAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 0, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNext1AddD", testListNextAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNext2AddD", testListNextAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNext3AddD", testListNextAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNext4AddD", testListNextAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev1Index0AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev0Index0AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev0Index1AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev1Index1AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev0Index2AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev1Index2AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev2Index2AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev0Index3AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev1Index3AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev2Index3AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev3Index3AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev0Index4AddD", testListPrevAdd(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNext0SetD", testListNextSet(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 0, Result.IllegalState));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNext1SetD", testListNextSet(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNext2SetD", testListNextSet(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNext3SetD", testListNextSet(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterNext4SetD", testListNextSet(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev0SetD", testListPrevSet(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev1SetD", testListPrevSet(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev2SetD", testListPrevSet(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterNextNextNextSetD_ABD_testListIterPrev3SetD", testListPrevSet(ABC_listIterNextNextNextSetD_ABD(), ELEMENT_D, 3, 3, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterNextNextNextSetD_ABD");
			e.printStackTrace();
		}
	}


	////////////////////////////////////////////////
	// XXX SCENARIO: [A,B,C] -> lit.prev() -> lit.prev() -> lit.prev() -> lit.set(D) -> [D,B,C]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A.B,C] -> lit.prev() -> lit.prev() -> lit.prev() -> lit.set(D) -> [D,B,C]
	 * @return [D,B,C] after listIterPrevPrevPrevSetD
	 */
	private IndexedUnsortedList<Integer> ABC_listIterPrevPrevPrevSetD_DBC(){
		IndexedUnsortedList<Integer> list = AB_add2C_ABC(); 
		ListIterator<Integer> lit = list.listIterator(3);
		lit.previous();
		lit.previous();
		lit.previous();
		lit.set(ELEMENT_D);
		
		return list;
	}
	
	
	private void test_ABC_listIterPrevPrevPrevSetD_DBC() {
		System.out.println("\nSCENARIO: [A.B,C] -> lit.prev() -> lit.prev() -> lit.prev() -> lit.set(D) -> [D,B,C]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddToFrontA", testAddToFront(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddToRearA", testAddToRear(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddAfterAA", testAddAfter(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_A, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddAfterBA", testAddAfter(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_B, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddAfterCA", testAddAfter(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_C, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddAfterDA", testAddAfter(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddAtIndexNeg1A", testAddAtIndex(ABC_listIterPrevPrevPrevSetD_DBC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddAtIndex0A", testAddAtIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddAtIndex1A", testAddAtIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddAtIndex2A", testAddAtIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddAtIndex3A", testAddAtIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 3, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddAtIndex3A", testAddAtIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testAddC", testAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemoveFirst", testRemoveFirst(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemoveLast", testRemoveLast(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemoveA", testRemoveElement(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemoveB", testRemoveElement(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemoveC", testRemoveElement(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemoveD", testRemoveElement(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemoveNeg1", testRemoveIndex(ABC_listIterPrevPrevPrevSetD_DBC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemove0", testRemoveIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 0, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemove1", testRemoveIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemove2", testRemoveIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testRemove3", testRemoveIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testFirst", testFirst(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testLast", testLast(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testContainsA", testContains(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_A, Result.False));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testContainsB", testContains(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_B, Result.True));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testContainsC", testContains(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_C, Result.True));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testContainsD", testContains(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, Result.True));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testIsEmpty", testIsEmpty(ABC_listIterPrevPrevPrevSetD_DBC(), Result.False));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testSize", testSize(ABC_listIterPrevPrevPrevSetD_DBC(), 3));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testToString", testToString(ABC_listIterPrevPrevPrevSetD_DBC(), Result.ValidString));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testSetNeg1A", testSet(ABC_listIterPrevPrevPrevSetD_DBC(), -1, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testSet0A", testSet(ABC_listIterPrevPrevPrevSetD_DBC(), 0, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testSet1A", testSet(ABC_listIterPrevPrevPrevSetD_DBC(), 1, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testSet2A", testSet(ABC_listIterPrevPrevPrevSetD_DBC(), 2, ELEMENT_A, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testSet3A", testSet(ABC_listIterPrevPrevPrevSetD_DBC(), 3, ELEMENT_A, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testGetNeg1", testGet(ABC_listIterPrevPrevPrevSetD_DBC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testGet0", testGet(ABC_listIterPrevPrevPrevSetD_DBC(), 0, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testGet1", testGet(ABC_listIterPrevPrevPrevSetD_DBC(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testGet2", testGet(ABC_listIterPrevPrevPrevSetD_DBC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testGet3", testGet(ABC_listIterPrevPrevPrevSetD_DBC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testIndexOfA", testIndexOf(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_A, -1));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testIndexOfB", testIndexOf(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_B, 1));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testIndexOfC", testIndexOf(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_C, 2));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testIndexOfD", testIndexOf(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 0));
			// Iterator
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testIter", testIter(ABC_listIterPrevPrevPrevSetD_DBC(), Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testIterHasNext", testIterHasNext(ABC_listIterPrevPrevPrevSetD_DBC().iterator(), Result.True));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testIterNext", testIterNext(ABC_listIterPrevPrevPrevSetD_DBC().iterator(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testIterRemove", testIterRemove(ABC_listIterPrevPrevPrevSetD_DBC().iterator(), Result.IllegalState));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 1), Result.True));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 1), Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 1)), Result.True));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 1)), Result.IllegalState));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 2), Result.True));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 2), Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 3)), Result.False));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 3)), null, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevPrevSetD_DBC(), 3)), Result.IllegalState));
			// List Iterator
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIter", testListIter(ABC_listIterPrevPrevPrevSetD_DBC(), Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIter", testListIter(ABC_listIterPrevPrevPrevSetD_DBC(), 0, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterHas0Prev", testListIterHasPrev(ABC_listIterPrevPrevPrevSetD_DBC(), 0, Result.False));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterHas1Prev", testListIterHasPrev(ABC_listIterPrevPrevPrevSetD_DBC(), 1, Result.True));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterHas2Prev", testListIterHasPrev(ABC_listIterPrevPrevPrevSetD_DBC(), 2, Result.True));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterHas3Prev", testListIterHasPrev(ABC_listIterPrevPrevPrevSetD_DBC(), 3, Result.True));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIter1Prev1", testListIterPrev(ABC_listIterPrevPrevPrevSetD_DBC(), 1, 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIter2Prev2", testListIterPrev(ABC_listIterPrevPrevPrevSetD_DBC(), 2, 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIter2Prev1", testListIterPrev(ABC_listIterPrevPrevPrevSetD_DBC(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIter3Prev1", testListIterPrev(ABC_listIterPrevPrevPrevSetD_DBC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIter3Prev2", testListIterPrev(ABC_listIterPrevPrevPrevSetD_DBC(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIter3Prev3", testListIterPrev(ABC_listIterPrevPrevPrevSetD_DBC(), 3, 3, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterAddNeg1D", testListIterAdd(ABC_listIterPrevPrevPrevSetD_DBC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterAdd0D", testListIterAdd(ABC_listIterPrevPrevPrevSetD_DBC(), 0, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterAdd1D", testListIterAdd(ABC_listIterPrevPrevPrevSetD_DBC(), 1, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterAdd2D", testListIterAdd(ABC_listIterPrevPrevPrevSetD_DBC(), 2, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterAdd3D", testListIterAdd(ABC_listIterPrevPrevPrevSetD_DBC(), 3, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterAdd4D", testListIterAdd(ABC_listIterPrevPrevPrevSetD_DBC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNextIndex0", testListIterNextIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 0, 0));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNextIndex1", testListIterNextIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 1, 1));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNextIndex2", testListIterNextIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 2, 2));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNextIndex3", testListIterNextIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 3, 3));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 0, -1));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 1, 0));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 2, 1));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPreviousIndex3", testListIterPrevIndex(ABC_listIterPrevPrevPrevSetD_DBC(), 3, 2));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNext0AddD", testListNextAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 0, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNext1AddD", testListNextAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNext2AddD", testListNextAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNext3AddD", testListNextAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNext4AddD", testListNextAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev1Index0AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev0Index0AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev0Index1AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev1Index1AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev0Index2AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev1Index2AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev2Index2AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev0Index3AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev1Index3AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev2Index3AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev3Index3AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev0Index4AddD", testListPrevAdd(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNext0SetD", testListNextSet(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNext1SetD", testListNextSet(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNext2SetD", testListNextSet(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNext3SetD", testListNextSet(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterNext4SetD", testListNextSet(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev0SetD", testListPrevSet(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev1SetD", testListPrevSet(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev2SetD", testListPrevSet(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevPrevSetD_DBC_testListIterPrev3SetD", testListPrevSet(ABC_listIterPrevPrevPrevSetD_DBC(), ELEMENT_D, 3, 3, Result.NoException));
			
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterPrevPrevPrevSetD_DBC");
			e.printStackTrace();
		}
	}
	

	////////////////////////////////////////////////
	// XXX SCENARIO: [A.B,C] -> lit.prev() -> lit.prev() -> lit.set(D) -> [A,D,C]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A.B,C] -> lit.prev() -> lit.prev() -> lit.set(D) -> [A,D,C]
	 * @return [A,D,C] after listIterPrevPrevSetD
	 */
	private IndexedUnsortedList<Integer> ABC_listIterPrevPrevSetD_ADC(){
		IndexedUnsortedList<Integer> list = AB_add2C_ABC(); 
		ListIterator<Integer> lit = list.listIterator(3);
		lit.previous();
		lit.previous();
		lit.set(ELEMENT_D);
		
		return list;
	}

	private void test_ABC_listIterPrevPrevSetD_ADC() {
		System.out.println("\nSCENARIO: [A.B,C] -> lit.next() -> lit.next() -> lit.set(D) -> [A,D,C]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddToFrontB", testAddToFront(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddToRearB", testAddToRear(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddAfterDB", testAddAfter(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddAfterBB", testAddAfter(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_B, ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddAfterCB", testAddAfter(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_C, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddAfterAB", testAddAfter(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_A, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddAtIndexNeg1B", testAddAtIndex(ABC_listIterPrevPrevSetD_ADC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddAtIndex0B", testAddAtIndex(ABC_listIterPrevPrevSetD_ADC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddAtIndex1B", testAddAtIndex(ABC_listIterPrevPrevSetD_ADC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddAtIndex2B", testAddAtIndex(ABC_listIterPrevPrevSetD_ADC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddAtIndex3B", testAddAtIndex(ABC_listIterPrevPrevSetD_ADC(), 3, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddAtIndex4B", testAddAtIndex(ABC_listIterPrevPrevSetD_ADC(), 4, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testAddB", testAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemoveFirst", testRemoveFirst(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemoveLast", testRemoveLast(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemoveA", testRemoveElement(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemoveB", testRemoveElement(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_B, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemoveC", testRemoveElement(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemoveD", testRemoveElement(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemoveNeg1", testRemoveIndex(ABC_listIterPrevPrevSetD_ADC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemove0", testRemoveIndex(ABC_listIterPrevPrevSetD_ADC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemove1", testRemoveIndex(ABC_listIterPrevPrevSetD_ADC(), 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemove2", testRemoveIndex(ABC_listIterPrevPrevSetD_ADC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testRemove3", testRemoveIndex(ABC_listIterPrevPrevSetD_ADC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testFirst", testFirst(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testLast", testLast(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testContainsA", testContains(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_A, Result.True));
			printTest("ABC_listIterPrevPrevSetD_ADC_testContainsB", testContains(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_B, Result.False));
			printTest("ABC_listIterPrevPrevSetD_ADC_testContainsC", testContains(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_C, Result.True));
			printTest("ABC_listIterPrevPrevSetD_ADC_testContainsD", testContains(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, Result.True));
			printTest("ABC_listIterPrevPrevSetD_ADC_testIsEmpty", testIsEmpty(ABC_listIterPrevPrevSetD_ADC(), Result.False));
			printTest("ABC_listIterPrevPrevSetD_ADC_testSize", testSize(ABC_listIterPrevPrevSetD_ADC(), 3));
			printTest("ABC_listIterPrevPrevSetD_ADC_testToString", testToString(ABC_listIterPrevPrevSetD_ADC(), Result.ValidString));
			printTest("ABC_listIterPrevPrevSetD_ADC_testSetNeg1B", testSet(ABC_listIterPrevPrevSetD_ADC(), -1, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testSet0B", testSet(ABC_listIterPrevPrevSetD_ADC(), 0, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testSet1B", testSet(ABC_listIterPrevPrevSetD_ADC(), 1, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testSet2B", testSet(ABC_listIterPrevPrevSetD_ADC(), 2, ELEMENT_B, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testSet3B", testSet(ABC_listIterPrevPrevSetD_ADC(), 3, ELEMENT_B, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testGetNeg1", testGet(ABC_listIterPrevPrevSetD_ADC(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testGet0", testGet(ABC_listIterPrevPrevSetD_ADC(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testGet1", testGet(ABC_listIterPrevPrevSetD_ADC(), 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testGet2", testGet(ABC_listIterPrevPrevSetD_ADC(), 2, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testGet3", testGet(ABC_listIterPrevPrevSetD_ADC(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testIndexOfA", testIndexOf(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_A, 0));
			printTest("ABC_listIterPrevPrevSetD_ADC_testIndexOfB", testIndexOf(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_B, -1));
			printTest("ABC_listIterPrevPrevSetD_ADC_testIndexOfC", testIndexOf(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_C, 2));
			printTest("ABC_listIterPrevPrevSetD_ADC_testIndexOfD", testIndexOf(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 1));
			// Iterator
			printTest("ABC_listIterPrevPrevSetD_ADC_testIter", testIter(ABC_listIterPrevPrevSetD_ADC(), Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testIterHasNext", testIterHasNext(ABC_listIterPrevPrevSetD_ADC().iterator(), Result.True));
			printTest("ABC_listIterPrevPrevSetD_ADC_testIterNext", testIterNext(ABC_listIterPrevPrevSetD_ADC().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testIterRemove", testIterRemove(ABC_listIterPrevPrevSetD_ADC().iterator(), Result.IllegalState));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 1), Result.True));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 1), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 1), Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 1)), Result.True));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 1)), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 1)), Result.IllegalState));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 2), Result.True));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 2), ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 2), Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 3)), Result.False));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 3)), null, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevSetD_ADC_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterPrevPrevSetD_ADC(), 3)), Result.IllegalState));
			// List Iterator
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIter", testListIter(ABC_listIterPrevPrevSetD_ADC(), Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIter", testListIter(ABC_listIterPrevPrevSetD_ADC(), 0, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterHas0Prev", testListIterHasPrev(ABC_listIterPrevPrevSetD_ADC(), 0, Result.False));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterHas1Prev", testListIterHasPrev(ABC_listIterPrevPrevSetD_ADC(), 1, Result.True));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterHas2Prev", testListIterHasPrev(ABC_listIterPrevPrevSetD_ADC(), 2, Result.True));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterHas3Prev", testListIterHasPrev(ABC_listIterPrevPrevSetD_ADC(), 3, Result.True));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIter1Prev1", testListIterPrev(ABC_listIterPrevPrevSetD_ADC(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIter2Prev2", testListIterPrev(ABC_listIterPrevPrevSetD_ADC(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIter2Prev1", testListIterPrev(ABC_listIterPrevPrevSetD_ADC(), 2, 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIter3Prev1", testListIterPrev(ABC_listIterPrevPrevSetD_ADC(), 3, 1, ELEMENT_C, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIter3Prev2", testListIterPrev(ABC_listIterPrevPrevSetD_ADC(), 3, 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIter3Prev3", testListIterPrev(ABC_listIterPrevPrevSetD_ADC(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterAddNeg1D", testListIterAdd(ABC_listIterPrevPrevSetD_ADC(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterAdd0D", testListIterAdd(ABC_listIterPrevPrevSetD_ADC(), 0, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterAdd1D", testListIterAdd(ABC_listIterPrevPrevSetD_ADC(), 1, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterAdd2D", testListIterAdd(ABC_listIterPrevPrevSetD_ADC(), 2, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterAdd3D", testListIterAdd(ABC_listIterPrevPrevSetD_ADC(), 3, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterAdd4D", testListIterAdd(ABC_listIterPrevPrevSetD_ADC(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNextIndex0", testListIterNextIndex(ABC_listIterPrevPrevSetD_ADC(), 0, 0));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNextIndex1", testListIterNextIndex(ABC_listIterPrevPrevSetD_ADC(), 1, 1));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNextIndex2", testListIterNextIndex(ABC_listIterPrevPrevSetD_ADC(), 2, 2));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNextIndex3", testListIterNextIndex(ABC_listIterPrevPrevSetD_ADC(), 3, 3));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterPrevPrevSetD_ADC(), 0, -1));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterPrevPrevSetD_ADC(), 1, 0));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterPrevPrevSetD_ADC(), 2, 1));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPreviousIndex3", testListIterPrevIndex(ABC_listIterPrevPrevSetD_ADC(), 3, 2));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNext0AddD", testListNextAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 0, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNext1AddD", testListNextAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNext2AddD", testListNextAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNext3AddD", testListNextAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNext4AddD", testListNextAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev1Index0AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev0Index0AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev0Index1AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev1Index1AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev0Index2AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev1Index2AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev2Index2AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev0Index3AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev1Index3AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev2Index3AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev3Index3AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev0Index4AddD", testListPrevAdd(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNext0SetD", testListNextSet(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 0, Result.IllegalState));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNext1SetD", testListNextSet(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNext2SetD", testListNextSet(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNext3SetD", testListNextSet(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterNext4SetD", testListNextSet(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev0SetD", testListPrevSet(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev1SetD", testListPrevSet(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev2SetD", testListPrevSet(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterPrevPrevSetD_ADC_testListIterPrev3SetD", testListPrevSet(ABC_listIterPrevPrevSetD_ADC(), ELEMENT_D, 3, 3, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterPrevPrevSetD_ADC");
			e.printStackTrace();
		}
	}



	////////////////////////////////////////////////
	// XXX SCENARIO: [A.B,C] -> lit.prev() -> lit.set(D) -> [A,B,D]
	////////////////////////////////////////////////
	
	
	
	/** Scenario: [A.B,C] -> lit.prev() -> lit.set(D) -> [A,B,D]
	 * @return [A,B,D] after listIterPrevSetD
	 */
	private IndexedUnsortedList<Integer> ABC_listIterPrevSetD_ABD(){
		IndexedUnsortedList<Integer> list = AB_add2C_ABC(); 
		ListIterator<Integer> lit = list.listIterator(3);
		lit.previous();
		lit.set(ELEMENT_D);
		
		return list;
	}
	
	
	private void test_ABC_listIterPrevSetD_ABD() {
		System.out.println("\nSCENARIO: [A.B,C] -> lit.prev() -> lit.set(D) -> [A,B,D]\n");
		try {
			// IndexedUnsortedList
			printTest("ABC_listIterPrevSetD_ABD_testAddToFrontC", testAddToFront(ABC_listIterPrevSetD_ABD(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testAddToRearC", testAddToRear(ABC_listIterPrevSetD_ABD(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testAddAfterAC", testAddAfter(ABC_listIterPrevSetD_ABD(), ELEMENT_A, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testAddAfterBC", testAddAfter(ABC_listIterPrevSetD_ABD(), ELEMENT_B, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testAddAfterCC", testAddAfter(ABC_listIterPrevSetD_ABD(), ELEMENT_C, ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_listIterPrevSetD_ABD_testAddAfterDC", testAddAfter(ABC_listIterPrevSetD_ABD(), ELEMENT_D, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testAddAtIndexNeg1C", testAddAtIndex(ABC_listIterPrevSetD_ABD(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testAddAtIndex0C", testAddAtIndex(ABC_listIterPrevSetD_ABD(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testAddAtIndex1C", testAddAtIndex(ABC_listIterPrevSetD_ABD(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testAddAtIndex2C", testAddAtIndex(ABC_listIterPrevSetD_ABD(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testAddAtIndex3C", testAddAtIndex(ABC_listIterPrevSetD_ABD(), 3, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testAddAtIndex4C", testAddAtIndex(ABC_listIterPrevSetD_ABD(), 4, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testAddC", testAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testRemoveFirst", testRemoveFirst(ABC_listIterPrevSetD_ABD(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testRemoveLast", testRemoveLast(ABC_listIterPrevSetD_ABD(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testRemoveA", testRemoveElement(ABC_listIterPrevSetD_ABD(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testRemoveB", testRemoveElement(ABC_listIterPrevSetD_ABD(), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testRemoveC", testRemoveElement(ABC_listIterPrevSetD_ABD(), ELEMENT_C, Result.NoSuchElement));
			printTest("ABC_listIterPrevSetD_ABD_testRemoveD", testRemoveElement(ABC_listIterPrevSetD_ABD(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testRemoveNeg1", testRemoveIndex(ABC_listIterPrevSetD_ABD(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testRemove0", testRemoveIndex(ABC_listIterPrevSetD_ABD(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testRemove1", testRemoveIndex(ABC_listIterPrevSetD_ABD(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testRemove2", testRemoveIndex(ABC_listIterPrevSetD_ABD(), 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testRemove3", testRemoveIndex(ABC_listIterPrevSetD_ABD(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testFirst", testFirst(ABC_listIterPrevSetD_ABD(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testLast", testLast(ABC_listIterPrevSetD_ABD(), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testContainsA", testContains(ABC_listIterPrevSetD_ABD(), ELEMENT_A, Result.True));
			printTest("ABC_listIterPrevSetD_ABD_testContainsB", testContains(ABC_listIterPrevSetD_ABD(), ELEMENT_B, Result.True));
			printTest("ABC_listIterPrevSetD_ABD_testContainsC", testContains(ABC_listIterPrevSetD_ABD(), ELEMENT_C, Result.False));
			printTest("ABC_listIterPrevSetD_ABD_testContainsD", testContains(ABC_listIterPrevSetD_ABD(), ELEMENT_D, Result.True));
			printTest("ABC_listIterPrevSetD_ABD_testIsEmpty", testIsEmpty(ABC_listIterPrevSetD_ABD(), Result.False));
			printTest("ABC_listIterPrevSetD_ABD_testSize", testSize(ABC_listIterPrevSetD_ABD(), 3));
			printTest("ABC_listIterPrevSetD_ABD_testToString", testToString(ABC_listIterPrevSetD_ABD(), Result.ValidString));
			printTest("ABC_listIterPrevSetD_ABD_testSetNeg1C", testSet(ABC_listIterPrevSetD_ABD(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testSet0C", testSet(ABC_listIterPrevSetD_ABD(), 0, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testSet1C", testSet(ABC_listIterPrevSetD_ABD(), 1, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testSet2C", testSet(ABC_listIterPrevSetD_ABD(), 2, ELEMENT_C, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testSet3C", testSet(ABC_listIterPrevSetD_ABD(), 3, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testGetNeg1", testGet(ABC_listIterPrevSetD_ABD(), -1, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testGet0", testGet(ABC_listIterPrevSetD_ABD(), 0, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testGet1", testGet(ABC_listIterPrevSetD_ABD(), 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testGet2", testGet(ABC_listIterPrevSetD_ABD(), 2, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testGet3", testGet(ABC_listIterPrevSetD_ABD(), 3, null, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testIndexOfA", testIndexOf(ABC_listIterPrevSetD_ABD(), ELEMENT_A, 0));
			printTest("ABC_listIterPrevSetD_ABD_testIndexOfB", testIndexOf(ABC_listIterPrevSetD_ABD(), ELEMENT_B, 1));
			printTest("ABC_listIterPrevSetD_ABD_testIndexOfC", testIndexOf(ABC_listIterPrevSetD_ABD(), ELEMENT_C, -1));
			printTest("ABC_listIterPrevSetD_ABD_testIndexOfD", testIndexOf(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 2));
			// Iterator
			printTest("ABC_listIterPrevSetD_ABD_testIter", testIter(ABC_listIterPrevSetD_ABD(), Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testIterHasNext", testIterHasNext(ABC_listIterPrevSetD_ABD().iterator(), Result.True));
			printTest("ABC_listIterPrevSetD_ABD_testIterNext", testIterNext(ABC_listIterPrevSetD_ABD().iterator(), ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testIterRemove", testIterRemove(ABC_listIterPrevSetD_ABD().iterator(), Result.IllegalState));
			printTest("ABC_listIterPrevSetD_ABD_iterNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterPrevSetD_ABD(), 1), Result.True));
			printTest("ABC_listIterPrevSetD_ABD_iterNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterPrevSetD_ABD(), 1), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_iterNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterPrevSetD_ABD(), 1), Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_iterNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevSetD_ABD(), 1)), Result.True));
			printTest("ABC_listIterPrevSetD_ABD_iterNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevSetD_ABD(), 1)), ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_iterNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterPrevSetD_ABD(), 1)), Result.IllegalState));
			printTest("ABC_listIterPrevSetD_ABD_iterNextNext_testIterHasNext", testIterHasNext(iterAfterNext(ABC_listIterPrevSetD_ABD(), 2), Result.True));
			printTest("ABC_listIterPrevSetD_ABD_iterNextNext_testIterNext", testIterNext(iterAfterNext(ABC_listIterPrevSetD_ABD(), 2), ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_iterNextNext_testIterRemove", testIterRemove(iterAfterNext(ABC_listIterPrevSetD_ABD(), 2), Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_iterNextNextRemove_testIterHasNext", testIterHasNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevSetD_ABD(), 3)), Result.False));
			printTest("ABC_listIterPrevSetD_ABD_iterNextNextRemove_testIterNext", testIterNext(iterAfterRemove(iterAfterNext(ABC_listIterPrevSetD_ABD(), 3)), null, Result.NoSuchElement));
			printTest("ABC_listIterPrevSetD_ABD_iterNextNextRemove_testIterRemove", testIterRemove(iterAfterRemove(iterAfterNext(ABC_listIterPrevSetD_ABD(), 3)), Result.IllegalState));
			// List Iterator
			printTest("ABC_listIterPrevSetD_ABD_testListIter", testListIter(ABC_listIterPrevSetD_ABD(), Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIter", testListIter(ABC_listIterPrevSetD_ABD(), 0, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterHas0Prev", testListIterHasPrev(ABC_listIterPrevSetD_ABD(), 0, Result.False));
			printTest("ABC_listIterPrevSetD_ABD_testListIterHas1Prev", testListIterHasPrev(ABC_listIterPrevSetD_ABD(), 1, Result.True));
			printTest("ABC_listIterPrevSetD_ABD_testListIterHas2Prev", testListIterHasPrev(ABC_listIterPrevSetD_ABD(), 2, Result.True));
			printTest("ABC_listIterPrevSetD_ABD_testListIterHas3Prev", testListIterHasPrev(ABC_listIterPrevSetD_ABD(), 3, Result.True));
			printTest("ABC_listIterPrevSetD_ABD_testListIter0Prev1", testListIterPrev(newList(), 0, 1, ELEMENT_A, Result.NoSuchElement));
			printTest("ABC_listIterPrevSetD_ABD_testListIter1Prev1", testListIterPrev(ABC_listIterPrevSetD_ABD(), 1, 1, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testListIter2Prev2", testListIterPrev(ABC_listIterPrevSetD_ABD(), 2, 2, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testListIter2Prev1", testListIterPrev(ABC_listIterPrevSetD_ABD(), 2, 1, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testListIter3Prev1", testListIterPrev(ABC_listIterPrevSetD_ABD(), 3, 1, ELEMENT_D, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testListIter3Prev2", testListIterPrev(ABC_listIterPrevSetD_ABD(), 3, 2, ELEMENT_B, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testListIter3Prev3", testListIterPrev(ABC_listIterPrevSetD_ABD(), 3, 3, ELEMENT_A, Result.MatchingValue));
			printTest("ABC_listIterPrevSetD_ABD_testListIterAddNeg1D", testListIterAdd(ABC_listIterPrevSetD_ABD(), -1, ELEMENT_C, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testListIterAdd0D", testListIterAdd(ABC_listIterPrevSetD_ABD(), 0, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterAdd1D", testListIterAdd(ABC_listIterPrevSetD_ABD(), 1, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterAdd2D", testListIterAdd(ABC_listIterPrevSetD_ABD(), 2, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterAdd3D", testListIterAdd(ABC_listIterPrevSetD_ABD(), 3, ELEMENT_D, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterAdd4D", testListIterAdd(ABC_listIterPrevSetD_ABD(), 4, ELEMENT_D, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNextIndex0", testListIterNextIndex(ABC_listIterPrevSetD_ABD(), 0, 0));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNextIndex1", testListIterNextIndex(ABC_listIterPrevSetD_ABD(), 1, 1));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNextIndex2", testListIterNextIndex(ABC_listIterPrevSetD_ABD(), 2, 2));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNextIndex3", testListIterNextIndex(ABC_listIterPrevSetD_ABD(), 3, 3));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPreviousIndex0", testListIterPrevIndex(ABC_listIterPrevSetD_ABD(), 0, -1));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPreviousIndex1", testListIterPrevIndex(ABC_listIterPrevSetD_ABD(), 1, 0));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPreviousIndex2", testListIterPrevIndex(ABC_listIterPrevSetD_ABD(), 2, 1));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPreviousIndex3", testListIterPrevIndex(ABC_listIterPrevSetD_ABD(), 3, 2));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNext0AddD", testListNextAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 0, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNext1AddD", testListNextAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNext2AddD", testListNextAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNext3AddD", testListNextAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNext4AddD", testListNextAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev1Index0AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 1, 0, Result.NoSuchElement));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev0Index0AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 0, 0, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev0Index1AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 0, 1, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev1Index1AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev0Index2AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 0, 2, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev1Index2AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 1, 2, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev2Index2AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev0Index3AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 0, 3, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev1Index3AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 1, 3, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev2Index3AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 2, 3, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev3Index3AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 3, 3, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev0Index4AddD", testListPrevAdd(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 0, 4, Result.IndexOutOfBounds));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNext0SetD", testListNextSet(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 0, Result.IllegalState));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNext1SetD", testListNextSet(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 1, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNext2SetD", testListNextSet(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 2, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNext3SetD", testListNextSet(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 3, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterNext4SetD", testListNextSet(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 4, Result.NoSuchElement));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev0SetD", testListPrevSet(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 0, 0, Result.IllegalState));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev1SetD", testListPrevSet(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 1, 1, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev2SetD", testListPrevSet(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 2, 2, Result.NoException));
			printTest("ABC_listIterPrevSetD_ABD_testListIterPrev3SetD", testListPrevSet(ABC_listIterPrevSetD_ABD(), ELEMENT_D, 3, 3, Result.NoException));
			

		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_ABC_listIterPrevSetD_ABD");
			e.printStackTrace();
		}
	}





	
	////////////////////////////
	// XXX LIST TEST METHODS
	////////////////////////////

	/**
	 * Runs addToFront() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param element
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testAddToFront(IndexedUnsortedList<Integer> list, Integer element, Result expectedResult) {
		Result result;
		try {
			list.addToFront(element);
			result = Result.NoException;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testAddToFront",  e.toString());
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs addToRear() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param element
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testAddToRear(IndexedUnsortedList<Integer> list, Integer element, Result expectedResult) {
		Result result;
		try {
			list.addToRear(element);
			result = Result.NoException;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testAddToRear", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs addAfter() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param target
	 * @param element
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testAddAfter(IndexedUnsortedList<Integer> list, Integer target, Integer element, Result expectedResult) {
		Result result;
		try {
			list.addAfter(element, target);
			result = Result.NoException;
		} catch (NoSuchElementException e) {
			result = Result.NoSuchElement;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testAddAfter", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs add(int, T) method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param index
	 * @param element
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testAddAtIndex(IndexedUnsortedList<Integer> list, int index, Integer element, Result expectedResult) {
		Result result;
		try {
			list.add(index, element);
			result = Result.NoException;
		} catch (IndexOutOfBoundsException e) {
			result = Result.IndexOutOfBounds;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testAddAtIndex", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	
	/**
	 * Runs add(T) method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param element
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testAdd(IndexedUnsortedList<Integer> list, Integer element, Result expectedResult) {
		Result result;
		try {
			list.add(element);
			result = Result.NoException;
		} catch (IndexOutOfBoundsException e) {
			result = Result.IndexOutOfBounds;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testAddAtIndex", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	
	/**
	 * Runs removeFirst() method on given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param expectedElement element or null if expectedResult is an Exception
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testRemoveFirst(IndexedUnsortedList<Integer> list, Integer expectedElement, Result expectedResult) {
		Result result;
		try {
			Integer retVal = list.removeFirst();
			if (retVal.equals(expectedElement)) {
				result = Result.MatchingValue;
			} else {
				result = Result.Fail;
			}
		} catch (IllegalStateException e) {
			result = Result.IllegalState;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testRemoveFirst", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs removeLast() method on given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param expectedElement element or null if expectedResult is an Exception
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testRemoveLast(IndexedUnsortedList<Integer> list, Integer expectedElement, Result expectedResult) {
		Result result;
		try {
			Integer retVal = list.removeLast();
			if (retVal.equals(expectedElement)) {
				result = Result.MatchingValue;
			} else {
				result = Result.Fail;
			}
		} catch (IllegalStateException e) {
			result = Result.IllegalState;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testRemoveLast", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs removeLast() method on given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param element element to remove
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testRemoveElement(IndexedUnsortedList<Integer> list, Integer element, Result expectedResult) {
		Result result;
		try {
			Integer retVal = list.remove(element);
			if (retVal.equals(element)) {
				result = Result.MatchingValue;
			} else {
				result = Result.Fail;
			}
		} catch (NoSuchElementException e) {
			result = Result.NoSuchElement;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testRemoveElement", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs remove(index) method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param index
	 * @param expectedElement
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testRemoveIndex(IndexedUnsortedList<Integer> list, int index, Integer expectedElement, Result expectedResult) {
		Result result;
		try {
			Integer retVal = list.remove(index);
			if (retVal.equals(expectedElement)) {
				result = Result.MatchingValue;
			} else {
				result = Result.Fail;
			}
		} catch (IndexOutOfBoundsException e) {
			result = Result.IndexOutOfBounds;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testRemoveIndex", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	
	/**
	 * Runs set(int, T) method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param index
	 * @param element
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testSet(IndexedUnsortedList<Integer> list, int index, Integer element, Result expectedResult) {
		Result result;
		try {
			list.set(index, element);
			result = Result.NoException;
		} catch (IndexOutOfBoundsException e) {
			result = Result.IndexOutOfBounds;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testSet", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs get() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param index
	 * @param expectedElement
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testGet(IndexedUnsortedList<Integer> list, int index, Integer expectedElement, Result expectedResult) {
		Result result;
		try {
			Integer retVal = list.get(index);
			if (retVal.equals(expectedElement)) {
				result = Result.MatchingValue;
			} else {
				result = Result.Fail;
			}
		} catch (IndexOutOfBoundsException e) {
			result = Result.IndexOutOfBounds;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testGet", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs indexOf() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param element
	 * @param expectedIndex
	 * @return test success
	 */
	private boolean testIndexOf(IndexedUnsortedList<Integer> list, Integer element, int expectedIndex) {
		try {
			return list.indexOf(element) == expectedIndex;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIndexOf", e.toString());
			e.printStackTrace();
			return false;
		}
	}
	
	/**
	 * Runs first() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param expectedElement element or null if expectedResult is an Exception
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testFirst(IndexedUnsortedList<Integer> list, Integer expectedElement, Result expectedResult) {
		Result result;
		try {
			Integer retVal = list.first();
			if (retVal.equals(expectedElement)) {
				result = Result.MatchingValue;
			} else {
				result = Result.Fail;
			}
		} catch (IllegalStateException e) {
			result = Result.IllegalState;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testFirst", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs last() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param expectedElement element or null if expectedResult is an Exception
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testLast(IndexedUnsortedList<Integer> list, Integer expectedElement, Result expectedResult) {
		Result result;
		try {
			Integer retVal = list.last();
			if (retVal.equals(expectedElement)) {
				result = Result.MatchingValue;
			} else {
				result = Result.Fail;
			}
		} catch (IllegalStateException e) {
			result = Result.IllegalState;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testLast", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs contains() method on a given list and element and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param element
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testContains(IndexedUnsortedList<Integer> list, Integer element, Result expectedResult) {
		Result result;
		try {
			if (list.contains(element)) {
				result = Result.True;
			} else {
				result = Result.False;
			}
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testContains", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs isEmpty() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testIsEmpty(IndexedUnsortedList<Integer> list, Result expectedResult) {
		Result result;
		try {
			if (list.isEmpty()) {
				result = Result.True;
			} else {
				result = Result.False;
			}
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIsEmpty", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs size() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param expectedSize
	 * @return test success
	 */
	private boolean testSize(IndexedUnsortedList<Integer> list, int expectedSize) {
		try {
			return (list.size() == expectedSize);
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testSize", e.toString());
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * Runs toString() method on given list and attempts to confirm non-default or empty String
	 * difficult to test - just confirm that default address output has been overridden
	 * @param list a list already prepared for a given change scenario
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testToString(IndexedUnsortedList<Integer> list, Result expectedResult) {
		Result result;
		try {
			String str = list.toString();
			System.out.println("toString() output: " + str);
			if (str.length() == 0) {
				result = Result.Fail;
			}
			char lastChar = str.charAt(str.length() - 1);
			if (str.contains("@")
					&& !str.contains(" ")
					&& Character.isLetter(str.charAt(0))
					&& (Character.isDigit(lastChar) || (lastChar >= 'a' && lastChar <= 'f'))) {
				result = Result.Fail; // looks like default toString()
			} else {
				result = Result.ValidString;
			}
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testToString", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}


	//////////////////////////////
	// XXX ITERATOR TEST METHODS
	//////////////////////////////
	
	/**
	 * Runs list's iterator hasNext() method on a given list and checks result against expectedResult
	 * @param iterator an iterator already positioned for the call to hasNext()
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testIterHasNext(Iterator<Integer> iterator, Result expectedResult) {
		Result result;
		try {
			if (iterator.hasNext()) {
				result = Result.True;
			} else {
				result = Result.False;
			}
		} catch (ConcurrentModificationException e) {
			result = Result.ConcurrentModification;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIterHasNext", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs list's iterator next() method on a given list and checks result against expectedResult
	 * @param iterator an iterator already positioned for the call to hasNext()
	 * @param expectedValue the Integer expected from next() or null if an exception is expected
	 * @param expectedResult MatchingValue or expected exception
	 * @return test success
	 */
	private boolean testIterNext(Iterator<Integer> iterator, Integer expectedValue, Result expectedResult) {
		Result result;
		try {
			Integer retVal = iterator.next();
			if (retVal.equals(expectedValue)) {
				result = Result.MatchingValue;
			} else {
				result = Result.Fail;
			}
		} catch (NoSuchElementException e) {
			result = Result.NoSuchElement;
		} catch (ConcurrentModificationException e) {
			result = Result.ConcurrentModification;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIterNext", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs list's iterator remove() method on a given list and checks result against expectedResult
	 * @param iterator an iterator already positioned for the call to remove()
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testIterRemove(Iterator<Integer> iterator, Result expectedResult) {
		Result result;
		try {
			iterator.remove();
			result = Result.NoException;
		} catch (IllegalStateException e) {
			result = Result.IllegalState;
		} catch (ConcurrentModificationException e) {
			result = Result.ConcurrentModification;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIterRemove", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/////////////////////////////////////////////
	// XXX HELPER METHODS FOR TESTING ITERATORS
	/////////////////////////////////////////////
	
	/**
	 * Helper for testing iterators. Return an Iterator that has been advanced numCallsToNext times.
	 * @param list
	 * @param numCallsToNext
	 * @return Iterator for given list, after numCallsToNext
	 */
	private Iterator<Integer> iterAfterNext(IndexedUnsortedList<Integer> list, int numCallsToNext) {
		Iterator<Integer> it = list.iterator();
		for (int i = 0; i < numCallsToNext; i++) {
			it.next();
		}
		return it;
	}
	
	/**
	 * Helper for testing iterators. Return an Iterator that has had remove() called once.
	 * @param iterator
	 * @return same Iterator following a call to remove()
	 */
	private Iterator<Integer> iterAfterRemove(Iterator<Integer> iterator) {
		iterator.remove();
		return iterator;
	}



	/**
	 * Runs iterator() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testIter(IndexedUnsortedList<Integer> list, Result expectedResult) {
		Result result;
		try {
			@SuppressWarnings("unused")
			Iterator<Integer> it = list.iterator();
			result = Result.NoException;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIter", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	
	/**
	 * Runs listIterator() method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testListIter(IndexedUnsortedList<Integer> list, Result expectedResult) {
		Result result;
		try {
			@SuppressWarnings("unused")
			ListIterator<Integer> it = list.listIterator();
			result = Result.NoException;
		} catch (UnsupportedOperationException e) {
			result = Result.UnsupportedOperation;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIter", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/**
	 * Runs listIterator(int startingIndex) method on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param startingIndex
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testListIter(IndexedUnsortedList<Integer> list, int startingIndex, Result expectedResult) {
		Result result;
		try {
			@SuppressWarnings("unused")
			ListIterator<Integer> it = list.listIterator(startingIndex);
			result = Result.NoException;
		} catch (UnsupportedOperationException e) {
			result = Result.UnsupportedOperation;
		} catch (IndexOutOfBoundsException e) {
			result = Result.IndexOutOfBounds;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIter", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}

	/////////////////////////////////////////////
	// XXX LIST ITERATOR TESTS
	/////////////////////////////////////////////

	
	
	/**
	 * 
	 * Tests the List Iterator's hasPrevious() method
	 * 
	 * @param list a list already prepared for a given change scenario
	 * @param startingIndex The index to start the test at
	 * @param expectedResult whether or not the index has previous
	 * @return if the expected result matches the actual result
	 */
	private boolean testListIterHasPrev(IndexedUnsortedList<Integer> list, int startingIndex, Result expectedResult) {
		Result result;
		ListIterator<Integer> lit = list.listIterator(startingIndex);
		try {
			if (lit.hasPrevious()) {
				result = Result.True;
			} else {
				result = Result.False;
			}
		} catch (ConcurrentModificationException e) {
			result = Result.ConcurrentModification;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIterHasNext", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	

	/**
	 * 
	 * Tests the List Iterators ability to call previous() from a certain index
	 * 
	 * @param list a list already prepared for a given change scenario
	 * @param startingIndex The index that the list iterator starts at
	 * @param numCalls number of calls to previous
	 * @param expectedValue the expected value from the call to previous
	 * @param expectedResult the expected result, either matching or not
	 * @return returns whether the expected value matches the expected result
	 */
	private <T> boolean testListIterPrev(IndexedUnsortedList<Integer> list, int startingIndex, int numCalls, int expectedValue, Result expectedResult) {
		Result result = null;
		Integer retVal = null;
		ListIterator<Integer> lit = list.listIterator(startingIndex);
		try {
			for(int x = 0; x < numCalls; x++){
				retVal = lit.previous();
			}
			
			if (retVal.equals(expectedValue)) {
				result = Result.MatchingValue;
			} else {
				result = Result.Fail;
			}
		} catch (NoSuchElementException e) {
			result = Result.NoSuchElement;
		} catch (ConcurrentModificationException e) {
			result = Result.ConcurrentModification;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIterNext", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	
	
	/**
	 * 
	 * Tests the List Iterators ability to add(), in particular at a certain index.
	 * 
	 * @param list a list already prepared for a given change scenario
	 * @param startingIndex The index to start the test at
	 * @param element the element passed in to add
	 * @param expectedResult checks to see if the add() command worked
	 * @return whether or not the element was added successfully 
	 */
	private boolean testListIterAdd(IndexedUnsortedList<Integer> list, int startingIndex, Integer element, Result expectedResult) {
		Result result;
		
		try {
			ListIterator<Integer> lit = list.listIterator(startingIndex);
			lit.add(element);
			result = Result.NoException;
		} catch (IndexOutOfBoundsException e) {
			result = Result.IndexOutOfBounds;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testAddAtIndex", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	
	
	
	/**
	 * 
	 * Tests the List Iterators ability of nextIndex()
	 * 
	 * @param list a list already prepared for a given change scenario
	 * @param startingIndex The index to start the test at
	 * @param expectedIndex The index passed in to determine if nextIndex() works
	 * @return whether next index worked or not
	 */
	private boolean testListIterNextIndex(IndexedUnsortedList<Integer> list, int startingIndex, int expectedIndex) {
		
		ListIterator<Integer> lit = list.listIterator(startingIndex);
		try {
			return(lit.nextIndex() == expectedIndex);
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIterHasNext", e.toString());
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/**
	 * 
	 * Test method used to test the previous() method, starting from a particular index
	 * 
	 * @param list a list already prepared for a given change scenario
	 * @param startingIndex The index to start the test at
	 * @param expectedIndex he index passed in to determine if previous Index() works
	 * @return whether or not Previous() worked
	 */
	private boolean testListIterPrevIndex(IndexedUnsortedList<Integer> list, int startingIndex, int expectedIndex) {
		
		ListIterator<Integer> lit = list.listIterator(startingIndex);
		
		try {
			
			return(lit.previousIndex() == expectedIndex);
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIterHasNext", e.toString());
			e.printStackTrace();
			return false;
		}
		
	}

	
	
	/**
	 * 
	 * Calls next() a specified amount of times, and then calls add()
	 * 
	 * @param list a list already prepared for a given change scenario
	 * @param element the element to add
	 * @param numCalls number of calls to next
	 * @param expectedResult what is expected after the add() command is called
	 * @return whether or not the add() command worked
	 */
	private boolean testListNextAdd(IndexedUnsortedList<Integer> list, Integer element, Integer numCalls, Result expectedResult) {
		Result result;
		ListIterator<Integer> lit = list.listIterator();
		try {
			for(int x = 0 ; x <numCalls; x++){
				lit.next();
			}
			lit.add(element);
			result = Result.NoException;
		} catch (NoSuchElementException e) {
			result = Result.NoSuchElement;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testAddAtIndex", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	

	
	/**
	 * 
	 * Instatiates a list at a certain index and then calls previous(), 
	 * followed by the add() command.
	 * 
	 * @param list a list already prepared for a given change scenario
	 * @param element the element to add
	 * @param numCalls number of calls to previous
	 * @param startingIndex The index to start the test at
	 * @param expectedResult what is expected from the calls to add() and previous()
	 * @return whether or not the expected result matched the result
	 */
	private boolean testListPrevAdd(IndexedUnsortedList<Integer> list, Integer element, Integer numCalls, Integer startingIndex, Result expectedResult) {
		Result result;
		
		try {
			ListIterator<Integer> lit = list.listIterator(startingIndex);
			for(int x = 0 ; x <numCalls; x++){
				lit.previous();
			}
			lit.add(element);
			result = Result.NoException;
		} catch (NoSuchElementException e) {
			result = Result.NoSuchElement;
		} catch (IndexOutOfBoundsException e) {
			result = Result.IndexOutOfBounds;
		
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testAddAtIndex", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	

	
	/**
	 * 
	 * Calls the next() command a certain number of times and then calls set()
	 * 
	 * @param list a list already prepared for a given change scenario
	 * @param element what the index is being set to
	 * @param numCalls number of calls to next()
	 * @param expectedResult the expected result
	 * @return whether the expectedResult matches the actual result
	 */
	private boolean testListNextSet(IndexedUnsortedList<Integer> list, Integer element, Integer numCalls, Result expectedResult) {
		Result result;
		ListIterator<Integer> lit = list.listIterator();
		try {
			for(int x = 0 ; x <numCalls; x++){
				lit.next();
			}
			lit.set(element);
			result = Result.NoException;
		} catch (NoSuchElementException e) {
			result = Result.NoSuchElement;
		} catch (IllegalStateException e) {
			result = Result.IllegalState;
		 
		}catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testAddAtIndex", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}

		return result == expectedResult;
	}
	

	
	/**
	 * 
	 * Calls previous() a certain number of times and then calls set()
	 * 
	 * @param list a list already prepared for a given change scenario
	 * @param element the element that will be used to set()
	 * @param numCalls number of calls to previous()
	 * @param startingIndex The index to start the test at
	 * @param expectedResult the result that is expected
	 * @return whether or not the method call matched the expectedResult
	 */
	private boolean testListPrevSet(IndexedUnsortedList<Integer> list, Integer element, Integer numCalls, Integer startingIndex, Result expectedResult) {
		Result result;
		
		try {
			ListIterator<Integer> lit = list.listIterator(startingIndex);
			for(int x = 0 ; x <numCalls; x++){
				lit.previous();
			}
			lit.set(element);
			result = Result.NoException;
		} catch (NoSuchElementException e) {
			result = Result.NoSuchElement;
		} catch (IllegalStateException e) {
			result = Result.IllegalState;
		} catch (IndexOutOfBoundsException e) {
			result = Result.IndexOutOfBounds;
		
		}catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testAddAtIndex", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	
	
	/////////////////////////////////////////////
	// XXX CONCURRENCY TEST
	/////////////////////////////////////////////
	
	
	/**
	 * Runs iterator() method twice on a given list and checks result against expectedResult
	 * @param list a list already prepared for a given change scenario
	 * @param expectedResult
	 * @return test success
	 */
	private boolean testIterConcurrent(IndexedUnsortedList<Integer> list, Result expectedResult) {
		Result result;
		try {
			@SuppressWarnings("unused")
			Iterator<Integer> it1 = list.iterator();
			@SuppressWarnings("unused")
			Iterator<Integer> it2 = list.iterator();
			result = Result.NoException;
		} catch (Exception e) {
			System.out.printf("%s caught unexpected %s\n", "testIterConcurrent", e.toString());
			e.printStackTrace();
			result = Result.UnexpectedException;
		}
		return result == expectedResult;
	}
	
	/** run Iterator concurrency tests */
	private void test_IterConcurrency() {
		System.out.println("\nIterator Concurrency Tests\n");		
		try {
			printTest("emptyList_testConcurrentIter", testIterConcurrent(newList(), Result.NoException));
			IndexedUnsortedList<Integer> list = newList();
			Iterator<Integer> it1 = list.iterator();
			Iterator<Integer> it2 = list.iterator();
			it1.hasNext();
			printTest("emptyList_iter1HasNext_testIter2HasNext", testIterHasNext(it2, Result.False));
			list = newList();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.hasNext();
			printTest("emptyList_iter1HasNext_testIter2Next", testIterNext(it2, null, Result.NoSuchElement));
			list = newList();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.hasNext();
			printTest("emptyList_iter1HasNext_testIter2Remove", testIterRemove(it2, Result.IllegalState));

			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.hasNext();
			printTest("A_iter1HasNext_testIter2HasNext", testIterHasNext(it2, Result.True));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.hasNext();
			printTest("A_iter1HasNext_testIter2Next", testIterNext(it2, ELEMENT_A, Result.MatchingValue));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.hasNext();
			printTest("A_iter1HasNext_testIter2Remove", testIterRemove(it2, Result.IllegalState));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.next();
			printTest("A_iter1Next_testIter2HasNext", testIterHasNext(it2, Result.True));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.next();
			printTest("A_iter1Next_testIter2Next", testIterNext(it2, ELEMENT_A, Result.MatchingValue));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.next();
			printTest("A_iter1Next_testIter2Remove", testIterRemove(it2, Result.IllegalState));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.next();
			it1.remove();
			printTest("A_iter1NextRemove_testIter2HasNext", testIterHasNext(it2, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.next();
			it1.remove();
			printTest("A_iter1NextRemove_testIter2Next", testIterNext(it2, ELEMENT_A, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			it2 = list.iterator();
			it1.next();
			it1.remove();
			printTest("A_iter1NextRemove_testIter2Remove", testIterRemove(it2, Result.ConcurrentModification));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.removeFirst();
			printTest("A_removeFirst_testIterHasNextConcurrent", testIterHasNext(it1, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.removeFirst();
			printTest("A_removeFirst_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.removeFirst();
			printTest("A_removeLast_testIterRemoveConcurrent", testIterRemove(it1, Result.ConcurrentModification));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.removeLast();
			printTest("A_removeLast_testIterHasNextConcurrent", testIterHasNext(it1, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.removeLast();
			printTest("A_removeLast_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.removeLast();
			printTest("A_removeLast_testIterRemoveConcurrent", testIterRemove(it1, Result.ConcurrentModification));			
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.remove(ELEMENT_A);
			printTest("A_removeA_testIterHasNextConcurrent", testIterHasNext(it1, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.remove(ELEMENT_A);
			printTest("A_remove_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.remove(ELEMENT_A);
			printTest("A_remove_testIterRemoveConcurrent", testIterRemove(it1, Result.ConcurrentModification));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.first();
			printTest("A_first_testIterHasNextConcurrent", testIterHasNext(it1, Result.True));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.first();
			printTest("A_first_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.MatchingValue));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.first();
			printTest("A_first_testIterRemoveConcurrent", testIterRemove(it1, Result.IllegalState));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.last();
			printTest("A_last_testIterHasNextConcurrent", testIterHasNext(it1, Result.True));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.last();
			printTest("A_last_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.MatchingValue));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.last();
			printTest("A_last_testIterRemoveConcurrent", testIterRemove(it1, Result.IllegalState));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.contains(ELEMENT_A);
			printTest("A_containsA_testIterHasNextConcurrent", testIterHasNext(it1, Result.True));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.contains(ELEMENT_A);
			printTest("A_containsA_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.MatchingValue));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.contains(ELEMENT_A);
			printTest("A_containsA_testIterRemoveConcurrent", testIterRemove(it1, Result.IllegalState));

			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.isEmpty();
			printTest("A_isEmpty_testIterHasNextConcurrent", testIterHasNext(it1, Result.True));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.isEmpty();
			printTest("A_isEmpty_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.MatchingValue));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.isEmpty();
			printTest("A_isEmpty_testIterRemoveConcurrent", testIterRemove(it1, Result.IllegalState));

			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.size();
			printTest("A_size_testIterHasNextConcurrent", testIterHasNext(it1, Result.True));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.size();
			printTest("A_size_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.MatchingValue));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.size();
			printTest("A_size_testIterRemoveConcurrent", testIterRemove(it1, Result.IllegalState));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.toString();
			printTest("A_toString_testIterHasNextConcurrent", testIterHasNext(it1, Result.True));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.toString();
			printTest("A_toString_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.MatchingValue));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.toString();
			printTest("A_toString_testIterRemoveConcurrent", testIterRemove(it1, Result.IllegalState));

			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.addToFront(ELEMENT_B);
			printTest("A_addToFrontB_testIterHasNextConcurrent", testIterHasNext(it1, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.addToFront(ELEMENT_B);
			printTest("A_addToFrontB_testIterNextConcurrent", testIterNext(it1, ELEMENT_B, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.addToFront(ELEMENT_B);
			printTest("A_addToFrontB_testIterRemoveConcurrent", testIterRemove(it1, Result.ConcurrentModification));

			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.addToRear(ELEMENT_B);
			printTest("A_addToRearB_testIterHasNextConcurrent", testIterHasNext(it1, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.addToRear(ELEMENT_B);
			printTest("A_addToRearB_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.addToRear(ELEMENT_B);
			printTest("A_addToRearB_testIterRemoveConcurrent", testIterRemove(it1, Result.ConcurrentModification));

			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.addAfter(ELEMENT_B, ELEMENT_A);
			printTest("A_addAfterAB_testIterHasNextConcurrent", testIterHasNext(it1, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.addAfter(ELEMENT_B, ELEMENT_A);
			printTest("A_addAfterAB_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.addAfter(ELEMENT_B, ELEMENT_A);
			printTest("A_addAfterAB_testIterRemoveConcurrent", testIterRemove(it1, Result.ConcurrentModification));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.add(0,ELEMENT_B);
			printTest("A_add0B_testIterHasNextConcurrent", testIterHasNext(it1, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.add(0,ELEMENT_B);
			printTest("A_add0B_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.add(0,ELEMENT_B);
			printTest("A_add0B_testIterRemoveConcurrent", testIterRemove(it1, Result.ConcurrentModification));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.set(0,ELEMENT_B);
			printTest("A_set0B_testIterHasNextConcurrent", testIterHasNext(it1, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.set(0,ELEMENT_B);
			printTest("A_set0B_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.set(0,ELEMENT_B);
			printTest("A_set0B_testIterRemoveConcurrent", testIterRemove(it1, Result.ConcurrentModification));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.add(ELEMENT_B);
			printTest("A_addB_testIterHasNextConcurrent", testIterHasNext(it1, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.add(ELEMENT_B);
			printTest("A_addB_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.add(ELEMENT_B);
			printTest("A_addB_testIterRemoveConcurrent", testIterRemove(it1, Result.ConcurrentModification));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.get(0);
			printTest("A_get0_testIterHasNextConcurrent", testIterHasNext(it1, Result.True));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.get(0);
			printTest("A_get0_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.MatchingValue));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.get(0);
			printTest("A_get_testIterRemoveConcurrent", testIterRemove(it1, Result.IllegalState));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.indexOf(ELEMENT_A);
			printTest("A_indexOfA_testIterHasNextConcurrent", testIterHasNext(it1, Result.True));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.indexOf(ELEMENT_A);
			printTest("A_indexOfA_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.MatchingValue));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.indexOf(ELEMENT_A);
			printTest("A_indexOfA_testIterRemoveConcurrent", testIterRemove(it1, Result.IllegalState));
			
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.remove(0);
			printTest("A_remove0_testIterHasNextConcurrent", testIterHasNext(it1, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.remove(0);
			printTest("A_remove0_testIterNextConcurrent", testIterNext(it1, ELEMENT_A, Result.ConcurrentModification));
			list = emptyList_addToFrontA_A();
			it1 = list.iterator();
			list.remove(0);
			printTest("A_remove0_testIterRemoveConcurrent", testIterRemove(it1, Result.ConcurrentModification));
		} catch (Exception e) {
			System.out.printf("***UNABLE TO RUN/COMPLETE %s***\n", "test_IteratorConcurrency");
			e.printStackTrace();
		}
	}


		
}// end class ListTester
